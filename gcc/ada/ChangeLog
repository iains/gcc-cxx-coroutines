2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (Identifier_to_gnu): Use correct subtype.
	(elaborate_profile): New function.
	(Call_to_gnu): Call it on the formals and the result type before
	retrieving the translated result type from the subprogram type.

2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Fix
	computation of boolean result in the unchecked union case.
	(components_to_record): Rename MAYBE_UNUSED parameter to IN_VARIANT
	and remove local variable of the same name.  Pass NULL recursively
	as P_GNU_REP_LIST for nested variants in the unchecked union case.

2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (lvalue_required_p) <N_Pragma>: New case.
	<N_Pragma_Argument_Association>: Likewise.
	(Pragma_to_gnu) <Pragma_Inspection_Point>: Fetch the corresponding
	variable of a constant before marking it as addressable.

2022-01-10  Arnaud Charlet  <charlet@adacore.com>

	* gcc-interface/Make-lang.in (ADA_GENERATED_FILES): Remove
	s-casuti.ad?, s-crtl.ad?, s-os_lib.ad?.  Update list of object
	files accordingly.

2022-01-10  Piotr Trojanek  <trojanek@adacore.com>

	* libgnat/s-atopri.ads (Atomic_Compare_Exchange): Replaces
	deprecated Sync_Compare_And_Swap.
	* libgnat/s-atopri.adb (Lock_Free_Try_Write): Switch from __sync
	to __atomic builtins.

2022-01-10  Piotr Trojanek  <trojanek@adacore.com>

	* libgnat/s-exponn.adb, libgnat/s-expont.adb,
	libgnat/s-exponu.adb, libgnat/s-widthi.adb,
	libgnat/s-widthu.adb: Remove CodePeer annotations for pragma
	Loop_Variant.

2022-01-10  Piotr Trojanek  <trojanek@adacore.com>

	* exp_prag.adb (Expand_Pragma_Loop_Variant): Disable expansion
	in CodePeer mode.

2022-01-10  Piotr Trojanek  <trojanek@adacore.com>

	* sem_util.adb (Is_Child_Or_Sibling): Fix typo in comment.

2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_pakd.adb (Install_PAT): If the PAT is a scalar type, apply
	the canonical adjustment to its alignment.

2022-01-10  Piotr Trojanek  <trojanek@adacore.com>

	* libgnat/s-atocou__builtin.adb (Decrement, Increment): Switch
	from __sync to __atomic builtins; use 'Address to be consistent
	with System.Atomic_Primitives.

2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_pakd.adb (Install_PAT): Do not reset the alignment here.
	* layout.adb (Layout_Type): Call Adjust_Esize_Alignment after having
	copied the RM_Size onto the Esize when the latter is too small.

2022-01-10  Justin Squirek  <squirek@adacore.com>

	* sem_warn.adb (Check_References): Handle arrays of tasks
	similar to task objects.

2022-01-07  Patrick Bernardi  <bernardi@adacore.com>

	* libgnat/a-direct.adb (Search_Data): Remove type.
	(Directory_Vectors): New package instantiation.
	(Search_State): New type.
	(Fetch_Next_Entry): Remove.
	(Close): Remove.
	(Finalize): Rewritten.
	(Full_Name): Ditto.
	(Get_Next_Entry): Return next entry from Search results vector
	rather than querying the directory directly using readdir.
	(Kind): Rewritten.
	(Modification_Time): Rewritten.
	(More_Entries): Use Search state cursor to determine if more
	entries are available for users to read.
	(Simple_Name): Rewritten.
	(Size): Rewritten.
	(Start_Search_Internal): Rewritten to load the contents of the
	directory that matches the pattern and filter into the search
	object.
	* libgnat/a-direct.ads (Search_Type): New type.
	(Search_Ptr): Ditto.
	(Directory_Entry_Type): Rewritten to support new Start_Search
	procedure.
	* libgnat/s-filatt.ads (File_Length_Attr): New function.

2022-01-07  Etienne Servais  <servais@adacore.com>

	* sem_attr.adb (Check_Reference): Fix condition.

2022-01-07  Ghjuvan Lacambre  <lacambre@adacore.com>

	* libgnarl/s-taprop__mingw.adb (Timed_Sleep): Remove "pragma
	Unreferenced" for Result.
	(Timed_Delay): Likewise.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* gen_il-gen.adb (Put_Make_Decls): Put pragma Inline in a
	dedicated line, so that the current indentation is taken into
	account.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* exp_aggr.adb (Build_Array_Aggr_Code): Fix inconsistent style
	in comments and code.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* exp_aggr.adb (Gen_Assign): Remove explicit initialization for
	components of access types.
	(Get_Assoc_Expr): Enable initialization for components of all
	types that require simple initialization.

2022-01-07  Javier Miranda  <miranda@adacore.com>

	* atree.ads (Traverse_Func_With_Parent): New generic subprogram.
	(Traverse_Proc_With_Parent): Likewise.
	* atree.adb (Parents_Stack): New table used to traverse trees
	passing the parent field of each node.
	(Internal_Traverse_With_Parent): New generic subprogram.
	(Traverse_Func_With_Parent): Likewise.
	(Traverse_Proc_With_Parent): Likewise.
	* contracts.adb (Fix_Parents): New subprogram.
	(Restore_Original_Selected_Component): Enhanced to fix the
	parent field of restored nodes.
	(Inherit_Condition): Adding assertions to check the parent field
	of inherited conditions and to ensure that the built inherited
	condition has no reference to the formals of the parent
	subprogram.
	* sem_util.ads, sem_util.adb (Check_Parents): New subprogram.

2022-01-07  Etienne Servais  <servais@adacore.com>

	* sem_attr.adb (Check_Placement_In_Test_Case): Fix typo.

2022-01-07  Justin Squirek  <squirek@adacore.com>

	* comperr.adb (Delete_SCIL_Files): Replace unnecessary
	Unreferenced pragma with specific pragma Warnings.
	* doc/gnat_rm/implementation_defined_pragmas.rst (Unreferenced):
	Add documentation for new behavior.
	* gnat_rm.texi: Regenerate.
	* erroutc.adb (Set_At): Remove useless assignment.
	* exp_ch2.adb (In_Assignment_Context): Deleted.
	(Is_Object_Renaming_Name): Replace calls to Is_LHS with calls to
	Known_To_Be_Assigned.
	(Expand_Current_Value): Replace calls to May_Be_Lvalue with
	calls to Known_To_Be_Assigned.
	(Expand_Entry_Paramter): Replace calls to In_Assignment_Context
	with calls to Known_To_Be_Assigned.
	* exp_ch4.adb (Expand_N_Op_Rem): Remove unnecessary Unreferenced
	pragma.
	* exp_imgv.adb (Build_Enumeration_Image_Tables): Default
	initialize S_N.
	* ghost.adb (Check_Ghost_Policy): Replace call to May_Be_Lvalue
	with call to Known_To_Be_Assigned.
	* lib-xref.adb (Is_On_LHS): Deleted.
	(OK_To_Set_Referenced): Rewrite subprogram to encompass the new
	pragma Unreferenced behavior.
	(Process_Deferred_References): Replace call to Is_LHS with call
	to Known_To_Be_Assigned.
	* libgnarl/s-taasde.adb, libgnarl/s-tasren.adb,
	libgnarl/s-tpobop.adb, libgnat/a-calend.adb,
	libgnat/a-calfor.adb, libgnat/a-cbdlli.adb,
	libgnat/a-cbhama.adb, libgnat/a-cbhase.adb,
	libgnat/a-cbmutr.adb, libgnat/a-cborma.adb,
	libgnat/a-cborse.adb, libgnat/a-cdlili.adb,
	libgnat/a-cfhama.adb, libgnat/a-cforse.adb,
	libgnat/a-cidlli.adb, libgnat/a-cihama.adb,
	libgnat/a-cihase.adb, libgnat/a-cimutr.adb,
	libgnat/a-ciorma.adb, libgnat/a-ciormu.adb,
	libgnat/a-ciorse.adb, libgnat/a-cohama.adb,
	libgnat/a-cohase.adb, libgnat/a-comutr.adb,
	libgnat/a-convec.adb, libgnat/a-coorma.adb,
	libgnat/a-coormu.adb, libgnat/a-coorse.adb,
	libgnat/a-crdlli.adb, libgnat/a-tigeau.adb,
	libgnat/a-wtgeau.adb, libgnat/a-ztgeau.adb,
	libgnat/g-calend.adb, libgnat/g-comlin.adb,
	libgnat/g-expect.adb, libgnat/g-mbflra.adb,
	libgnat/g-spipat.adb, libgnat/s-fatgen.adb,
	libgnat/s-fileio.adb, libgnat/s-os_lib.adb,
	libgnat/s-regpat.adb, libgnat/s-valued.adb,
	libgnat/s-valuer.adb: Remove unnecessary Unreferenced pragmas
	* sem_ch10.adb (Process_Spec_Clauses): Remove useless
	assignments.
	* sem_ch13.adb (Validate_Literal_Aspect): Default initialize I.
	* sem_ch3.adb (Build_Derived_Concurrent_Type): Default
	initialize Corr_Decl.
	* sem_ch8.adb (Undefined): Replace calls to Is_LHS with calls to
	Known_To_Be_Assigned.
	(In_Abstract_View_Pragma): Likewise.
	* sem_eval.adb (Eval_Selected_Component): Replace calls to
	Is_LHS with calls to Known_To_Be_Assigned.
	* sem_res.adb (Init_Component): Replace calls to May_Be_Lvalue
	with calls to Known_To_Be_Assigned.
	* sem_util.adb, sem_util.ads (End_Label_Loc): Default initialize
	Owner.
	(Explain_Limited_Type): Default initialize Expr_Func.
	(Find_Actual): Modified to handle entry families.
	(Is_LHS): Deleted.
	(May_Be_Lvalue): Deleted.
	(Known_To_Be_Assigned): Modified and improved to handle all
	cases.
	* sem_warn.adb (Traverse_Result): Replace calls to May_Be_Lvalue
	with calls to Known_To_Be_Assigned.
	(Check_Ref): Modify error on unreferenced out parameters to take
	into account different warning flags.

2022-01-07  Javier Miranda  <miranda@adacore.com>

	* sem_ch3.adb (Reorder_Interfaces): When the conflicting
	interface is identified we just replace the interface in the
	list of interfaces of the tagged type (instead of adding a
	duplicate to the list of interfaces).

2022-01-07  Dmitriy Anisimkov  <anisimko@adacore.com>

	* adaint.c (__gnat_kill): Terminate process only in case of
	SIGKILL, SIGINT, SIGBREAK, SIGTERM, SIGABRT.  Do not call
	OpenProcess if not going to terminate process.

2022-01-07  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_prag.adb (Expand_Pragma_Inspection_Point): Do a single pass
	over the arguments of the pragma.  Set the Address_Taken flag on
	them and use the Has_Delayed_Freeze flag to spot those which have
	their elaboration delayed.  Reuse the location variable Loc.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* osint.adb (To_Lower): Clarify that only To_Lower function
	causes bootstrap issues; fix style.
	* treepr.adb (Print_Str_Mixed_Case): Reuse existing case
	conversion routine.
	(To_Mixed): Rename from Capitalize; reuse System.Case_Util
	procedure and explain the bootstrap issue.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch7.adb (Process_Transients_In_Scope): Remove unnecessary
	initialization of Must_Hook; change Detect_Subprogram_Call from
	function to procedure; adapt caller.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch5.adb, exp_disp.adb, exp_util.adb, par-ch4.adb,
	sem_ch13.adb: Remove extra space before THEN that occurs at the
	end of a line.

2022-01-07  Dmitriy Anisimkov  <anisimko@adacore.com>

	* expect.c (__gnat_waitpid): Use macros WIFEXITED, WEXITSTATUS,
	WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG to get exit status
	or signal that caused the child process to terminate/stop.  Do
	not process exit status in case of error in waitpid call.
	* adaint.c (__gnat_kill): Use of GenerateConsoleCtrlEvent is
	removed in Windows variant as it actually is not working and was
	terminating the calling process.  Set signal number into exit
	code parameter of TerminateProcess to work the same like in
	Linux.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch5.adb (Expand_N_Case_Statement): Remove explicit
	expansion.

2022-01-07  Etienne Servais  <servais@adacore.com>

	* doc/gnat_ugn/building_executable_programs_with_gnat.rst:
	Update -gnatwr documentation.
	* gnat_ugn.texi: Regenerate.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* exp_unst.adb (Unnest_Subprogram): Sync comment with the
	current code.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch4.adb (Raise_Accessibility_Error): Move exception name
	to the message string; move << control characters to the end,
	for consistency.
	* sem_ch6.adb (Analyze_Function_Return): Likewise.
	* sem_util.adb (Compile_Time_Constraint_Error): Likewise.
	* gcc-interface/decl.c (gnat_to_gnu_entity): Remove quotes
	around Storage_Error.
	* gcc-interface/trans.c (gnat_to_gnu): Remove quotes around
	Constraint_Error.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* errout.adb (Error_Msg): Move warning suppression code from
	Error_Msg_NLE
	(Error_Msg_NLE): Warning suppression is now done by the internal
	call to Error_Msg.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch3.adb (Expand_N_Object_Declaration): Remove unnecessary
	guards.
	* exp_ch4.adb (Expand_N_If_Expression): Likewise; clarify comment.
	* exp_ch5.adb (Expand_N_If_Statement,
	Expand_Iterator_Loop_Over_Container): Likewise.
	* exp_ch9.adb (Expand_N_Task_Type_Declaration): Remove redundant
	guard.
	* freeze.adb (Freeze_All_Ent): Reduce scope of a local variable.

2022-01-07  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch3.adb (Build_Init_Procedure): Remove unnecessary guard.
	* exp_disp.adb (Make_DT): Likewise.
	* sem_ch12.adb (Analyze_Associations): Likewise.

2022-01-07  Etienne Servais  <servais@adacore.com>

	* sem_res.adb (Resolve_Op_Concat_Arg): Check range when
	concatenating scalars.

2022-01-07  Bob Duff  <duff@adacore.com>

	* treepr.adb (Print_Node_Ref): Change "not Is_Array_Type" to
	"Is_Discrete_Type".

2022-01-07  Richard Kenner  <kenner@adacore.com>

	* libgnat/g-spipat.ads (Boolean_Func, Natural_Func,
	VString_Func): Mark as Favor_Top_Level.
	* sem_ch13.adb (Validate_Unchecked_Conversion): Avoid using
	internal representation if Unchecked_Conversion between
	an access to subprogram and System.Address within the same unit.

2022-01-07  Bob Duff  <duff@adacore.com>

	* treepr.adb (Print_Node_Ref): Print the value if available.

2022-01-07  Richard Kenner  <kenner@adacore.com>

	* sem_util.ads, sem_util.adb (Get_Fullest_View): Add option to
	not recurse and return the next-most-fullest view.

2022-01-07  Bob Duff  <duff@adacore.com>

	* sem_ch10.adb (Check_Redundant_Withs): Add a warning if a
	library unit with's its own ancestor. Note that this warning is
	not triggered for something like "with P.R;" in P.Q, because
	there the "with P;" is considered implicit.
	* fname-sf.adb, libgnarl/s-stusta.adb, libgnarl/s-tasdeb.ads,
	libgnat/a-calfor.adb, libgnat/a-tiboio.adb,
	libgnat/a-wwboio.adb, libgnat/a-zzboio.adb, libgnat/i-cobol.adb,
	libgnat/s-bitops.adb, libgnat/s-bitops.ads,
	libgnat/s-direio.adb, libgnat/s-dwalin.adb,
	libgnat/s-geveop.adb, libgnat/s-mmosin__unix.adb,
	libgnat/s-os_lib.adb, libgnat/s-os_lib.ads,
	libgnat/s-pooglo.ads, libgnat/s-secsta.adb,
	libgnat/s-shasto.adb, libgnat/s-stausa.ads,
	libgnat/s-stratt.ads, libgnat/s-ststop.adb: Remove with of
	parent.
	* sinfo.ads: Minor comment fix.

2022-01-07  Bob Duff  <duff@adacore.com>

	* osint-m.adb: Remove with_clause and pragma.

2022-01-06  Bob Duff  <duff@adacore.com>

	* sem_res.adb (Resolve_Range): Warn on null range, unless we are
	inside a generic unit or an instance thereof.
	* sem_ch3.adb (Analyze_Subtype_Indication): Minor: avoid double
	negative.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* errout.adb (Adjust_Name_Case): Remove unnecessary declare
	block.

2022-01-06  Yannick Moy  <moy@adacore.com>

	* libgnat/a-ngcoar.adb: Add pragma to ignore assertions in
	instance.
	* libgnat/a-ngrear.adb: Likewise.
	* libgnat/s-gearop.adb: Prove implementation is free of runtime
	errors.
	* libgnat/s-gearop.ads: Add contracts to protect against runtime
	errors in the generic part.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* errout.adb (Remove_Warning_Messages): Use traversal procedure
	instead of traversal function, since we discard status of each
	step anyway.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch4.adb (Expand_Concatenate): There is no reason for using
	declaring, raising and catching an exception; a simple return
	statement is enough.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* sem_eval.adb (Eval_Arithmetic_Op): Add Loc parameter to all
	calls to Apply_Compile_Time_Constraint_Error related to division
	by zero.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* errout.adb (Remove_Warning_Messages): Remove unnecessary guard.
	* exp_util.adb (Kill_Dead_Code): Likewise.
	* par_sco.adb (Traverse_Declarations_Or_Statements): Likewise.
	* sem_ch3.adb (Build_Derived_Record_Type): Likewise.
	* sem_ch4.adb (Traverse_Interfaces): Likewise.
	* sem_eval.adb (Traverse_Interfaces): Likewise.
	* sem_util.adb (Collect_Interfaces): Likewise.
	(Has_Non_Null_Statements, Side_Effect_Free_Statements):
	Likewise; turn into WHILE loops, for consistency.

2022-01-06  Etienne Servais  <servais@adacore.com>

	* sem_type.adb (Full_View_Covers): Fix typo.

2022-01-06  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch12.adb (Insert_Freeze_Node_For_Instance): When going to
	the outer level, do not jump over following instantiations in
	the list.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* err_vars.ads (Warn_On_Instance): Remove; it was a relic from
	the previous handling of warning in instances that was removed
	decades ago.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* errout.adb (Error_Msg_Internal): Reorder words.
	* erroutc.ads (Is_Warning_Msg): Add closing paren.
	* sem_util.adb (Compile_Time_Constraint_Error): Fix casing.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* sem_res.adb (Resolve_String_Literal): Simplify pointer
	arithmetic.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* sem_res.adb (Resolve_String_Literal): Avoid unnecessary
	conversions inside "<" and ">" bodies.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* checks.adb (Null_Exclusion_Static_Checks,
	Selected_Range_Checks): Fix style.

2022-01-06  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch8.adb (Analyze_Package_Renaming): Do not check for Text_IO
	special units when the name of the renaming is a generic instance,
	which is the case for package instantiations in the GNAT model.

2022-01-06  Steve Baird  <baird@adacore.com>

	* sem_util.adb (Build_Discriminant_Reference): In the unexpected
	case where we previously would fail an assertion, we instead
	revert to the old behavior.

2022-01-06  Steve Baird  <baird@adacore.com>

	* sem_util.adb (Build_Actual_Subtype_Of_Component): Define a new
	local function, Build_Discriminant_Reference, and call it in
	each of the three cases where Make_Selected_Component was
	previously being called to construct a discriminant reference (2
	in Build_Actual_Array_Constraint and 1 in
	Build_Actual_Record_Constraint). Instead of unconditionally
	using the passed-in object name as the prefix for the new
	selected component node, this new function checks to see if
	perhaps a prefix of that name should be used instead.

2022-01-06  Etienne Servais  <servais@adacore.com>

	* atree.adb: Fix typo.
	* einfo.ads: Likewise.
	* exp_aggr.adb: Likewise.
	* exp_ch6.adb: Likewise.
	* exp_ch7.adb: Likewise.
	* exp_ch9.adb: Likewise.
	* exp_prag.adb: Likewise.
	* exp_unst.adb: Likewise.
	* exp_unst.ads: Likewise.
	* exp_util.adb: Likewise.
	* par-endh.adb: Likewise.
	* par.adb: Likewise.
	* restrict.adb: Likewise.
	* sem.ads: Likewise.
	* sem_ch4.adb: Likewise.
	* sem_ch5.adb: Likewise.
	* sem_ch6.adb: Likewise.
	* sem_ch8.adb: Likewise.
	* sem_ch12.adb: Likewise.
	* sem_ch13.adb: Likewise.
	* sem_dim.adb: Likewise.
	* sem_elab.adb: Likewise.
	* sem_prag.adb: Likewise.
	* sem_res.adb: Likewise.
	* sem_util.adb: Likewise.
	* sem_util.ads: Likewise.
	* sinfo.ads: Likewise.
	* sprint.adb: Likewise.
	* urealp.adb: Likewise.

2022-01-06  Justin Squirek  <squirek@adacore.com>

	* exp_ch3.adb (Build_Assignment): Replace current instance of
	type with Init_Proc formal.
	* sem_attr.adb (OK_Self_Reference): Handle recognition of
	Current_Instance to detect certain expansion.
	* sem_ch4.adb (Analyze_One_Call): Set actual's type when the
	actual in question is a current instance and its corresponding
	formal is an incomplete type.
	* sem_util.adb (Is_Current_Instance): Add check for incomplete
	views and add comment.

2022-01-06  Bob Duff  <duff@adacore.com>

	* libgnat/s-rident.ads (No_Tagged_Type_Registration): New
	restriction identifier.
	* restrict.ads (Implementation_Restriction): Add restriction.
	* exp_ch7.adb (Process_Declarations): Suppress
	tagged-type-related finalization actions if the restriction is
	active.  Call RTE_Available last.
	* exp_disp.adb (Make_DT): Likewise.
	* exp_util.adb (Requires_Cleanup_Actions): Return False for a
	tagged type declaration if No_Tagged_Type_Registration is
	active.
	* sem_attr.adb (Check_Stream_Attribute): Check restriction
	No_Tagged_Type_Registration.
	* libgnat/a-except.ads (Null_Occurrence): Minor: Initialize, to
	avoid stopping at a warning in gdb.
	* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:
	Document new restriction.
	* gnat_rm.texi: Regenerate.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* par-ch4.adb (P_Simple_Expression): Reuse Null_String_Id.
	* prep.adb (Parse_Def_File): Likewise; remove Empty_String.

2022-01-06  Eric Botcazou  <ebotcazou@adacore.com>

	* stand.ads (Any_Access): Delete.
	(Universal_Access): New entity.
	* einfo.ads: Remove obsolete reference to Any_Access.
	* gen_il-gen-gen_entities.adb: Likewise.
	* cstand.adb (Create_Standard): Do not create Any_Access and create
	Universal_Access as a full type instead.
	* errout.adb (Set_Msg_Insertion_Type_Reference): Do not deal with
	Any_Access and deal with Universal_Access instead.
	* sem_ch3.adb (Analyze_Object_Declaration): Replace Any_Access with
	Universal_Access.
	* sem_ch4.adb (Analyze_Null): Likewise.
	(Find_Non_Universal_Interpretations): Likewise.
	(Find_Equality_Types.Try_One_Interp): Likewise and avoid shadowing
	by renaming a local variable of the same name.
	* sem_res.adb (Make_Call_Into_Operato): Likewise.
	(Resolve_Equality_Op): Likewise.
	* sem_type.adb (Covers): Likewise.
	(Specific_Type): Likewise.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* treepr.adb (Destroy): Prevent spurious check from CodePeer.

2022-01-06  Yannick Moy  <moy@adacore.com>

	* libgnat/s-exponu.adb (Exponu): Add annotation.

2022-01-06  Justin Squirek  <squirek@adacore.com>

	* exp_ch6.adb (Add_Simple_Call_By_Copy_Code): Add comments
	regarding special handling of components which depend on
	discriminants.
	* exp_dist.adb (Build_From_Any_Function): Add Real_Rep actual
	for calls to Has_Stream_Attribute_Definition.
	(Build_To_Any_Function): Likewise.
	(Build_TypeCode_Function): Likewise.
	* freeze.adb (Freeze_Entity): Add missing comment for Test_E.
	* libgnat/s-utf_32.adb: Remove disabled warning comments and
	temporarily inserted pragma warnings.  Remove very old (2006 and
	2012) comments about bootstrapping older versions.
	* par.adb (P_Identifier): Add new parameter Force_Msg.
	* par-ch2.adb (P_Identifier): Restructure and clean up function.
	* par-ch3.adb (P_Defining_Identifier): Remove code duplication
	for parsing identifiers.
	* sem_attr.adb (Stream_Attribute_Available): Add missing
	comments and add Real_Rep actual for calls to
	Has_Stream_Attribute_Definition.
	* sem_cat.adb (Has_Read_Write_Attribute): Add Real_Rep actual
	for calls to Has_Stream_Attribute_Definition.
	(Has_Stream_Attribute_Definition): Remove local Real_Rep and fix
	recursive calls. Add default value for Real_Rep.
	* sem_cat.ads (Has_Stream_Attribute_Definition): Add new out
	parameter "Real_Rep".
	* sem_type.adb (Add_Entry): Add condition to avoid passing
	non-function calls to Function_Interp_Has_Abstract_Op.
	(Function_Interp_Has_Abstract_Op): Add missing comments and
	remove check for Is_Overloadable.
	* sem_util.adb (Derivation_Too_Early_To_Inherit): Remove
	duplicated code.

2022-01-06  Javier Miranda  <miranda@adacore.com>

	* contracts.adb (Restore_Original_Selected_Component): New
	subprogram that traverses a preanalyzed expression searching for
	dispatching calls to functions whose original node was a
	selected component, and replacing them with their original node.
	This functionality is required because the preanalyis of
	dispatching calls using the Object.Operation notation transforms
	such calls, and we need the original condition to properly
	inherit and extend the condition expression on tagged type
	derivations.  This functionality was previously provided by the
	routine Install_Original_Selected_Component (as part of
	inheriting conditions); now it is performed as part of the
	preanalysis of the condition, thus avoiding repeatedly
	installing and restoring such nodes.
	(Install_Original_Selected_Component): Removed.
	(Restore_Dispatching_Calls): Removed.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* treepr.adb (Visit_Node): Simplify repeated call to
	Next_Entity.

2022-01-06  Piotr Trojanek  <trojanek@adacore.com>

	* treepr.ads (Treepr, Print_Tree_List, Print_Tree_Elist): Fix
	style in comments.
	* treepr.adb (Serial_Numbers): Hash table instance.
	(Hash): Hashing routine.
	(Print_Field): Fix style.
	(Print_Init): Adapt to simple hash table.
	(Print_Term): Likewise.
	(Serial_Numbers): Likewise.
	(Set_Serial_Number): Likewise.

2022-01-06  Yannick Moy  <moy@adacore.com>

	* libgnat/s-expmod.adb: Mark in SPARK. Add ghost code for proof.
	* libgnat/s-expmod.ads: Mark in SPARK. Add ghost specifications.

2022-01-06  Yannick Moy  <moy@adacore.com>

	* libgnat/s-explllu.ads: Mark in SPARK.
	* libgnat/s-expllu.ads: Mark in SPARK.
	* libgnat/s-exponu.adb: Add loop invariants and needed
	assertions.
	* libgnat/s-exponu.ads: Add functional contract.
	* libgnat/s-expuns.ads: Mark in SPARK.

2022-01-05  Steve Baird  <baird@adacore.com>

	* exp_ch5.adb (Finish_Binding_Object_Declaration): Fix a bug
	that was introduced in the previous commit.  The previous
	version initialized a Boolean constant Declare_Copy before the
	variable Decl had been initialized properly.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* sem_prag.adb (Adjust_External_Name_Case): Use membership test.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch3.adb (Make_Controlling_Function_Wrappers): For
	GNATprove build the wrapper as an expression function.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch3.ads (Make_Controlling_Function_Wrappers): Move
	declaration from body to spec, so it can be called by
	SPARK-specific expansion.
	* exp_ch3.adb (Make_Controlling_Function_Wrappers): Likewise.
	* exp_spark.adb (SPARK_Freeze_Type): Enable expansion of
	wrappers for function with controlling result types.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_dbug.adb, sem_dim.adb: Replace Add_Str_To_Name_Buffer with
	Add_Char_To_Name_Buffer.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* gnatls.adb (Gnatls): Use Name_Find function.
	* targparm.adb (Get_Target_Parameters): Likewise.

2022-01-05  Bob Duff  <duff@adacore.com>

	* repinfo.adb (List_Entities): The code was assuming that if we
	encounter a package in the current scope, then it must be
	a (physically) nested package.  That was wrong, because it could
	be a child package.  Avoid recursing into child packages; they
	have not been annotated with representation information, and
	-gnatR2 queries that information.

2022-01-05  Marc Poulhiès  <poulhies@adacore.com>

	* libgnat/s-sopco3.ads, libgnat/s-sopco3.adb: Remove.
	* libgnat/s-sopco4.ads, libgnat/s-sopco4.adb: Remove.
	* libgnat/s-sopco5.ads, libgnat/s-sopco5.adb: Remove.
	* libgnat/s-strops.ads, libgnat/s-strops.adb: Remove.
	* Makefile.rtl (ADA_EXCLUDE_SRCS): Remove occurences of removed
	units.
	* gcc-interface/Make-lang.in (ada/sdefault.o): Remove
	dependencies on removed units.
	(GNATBIND_OBJS): Remove occurences of removed units.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch3.adb (Build_Dcheck_Function): Remove extra whitespace.
	* libgnarl/s-taskin.adb (Initialize_ATCB): Likewise.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_attr.adb (Build_Array_VS_Func): Remove explicit "IN" in
	spec of the generated array validation function; it was
	redundant, just like it would be in a user-written code.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch4.adb (Expand_N_Op_Ne): Fix whitespace.
	* sem_dim.adb (Expand_Put_Call_With_Symbol): Likewise.
	(Reduce): Likewise.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_aggr.adb (Two_Pass_Aggregate_Expansion): Fix whitespace.
	* libgnat/a-cofuve.ads (Add): Likewise.
	* sem_ch3.adb (Build_Access_Subprogram_Wrapper): Likewise.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch3.adb (Make_Eq_Body, Make_Neq_Body,
	Make_Predefined_Primitive_Eq_Spec,
	Make_Predefined_Primitive_Specs): Fix whitespace.

2022-01-05  Etienne Servais  <servais@adacore.com>

	* sem_ch3.adb (Analyze_Component_Declaration): Rework condition
	to build subtypes.
	(Analyze_Object_Declaration): Likewise.
	(Should_Build_Subtype): New.

2022-01-05  Yannick Moy  <moy@adacore.com>

	* libgnat/s-arit128.adb: Mark in SPARK.
	* libgnat/s-arit128.ads: Add functional contracts.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* sem_util.adb (String_From_Numeric_Literal): Simplify using
	membership tests and ranges; fix whitespace.

2022-01-05  Yannick Moy  <moy@adacore.com>

	* libgnat/s-expint.ads: Mark in SPARK. Adapt to change to
	package.
	* libgnat/s-explli.ads: Likewise.
	* libgnat/s-expllli.ads: Likewise.
	* libgnat/s-expont.adb: Add lemmas and ghost code.
	* libgnat/s-expont.ads: Add functional contract.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_disp.adb (Gen_Parameters_Profile): Remove redundant guard.

2022-01-05  Claire Dross  <dross@adacore.com>

	* libgnat/s-valuti.ads (Starts_As_Exponent_Format_Ghost): Ghost
	function to determine if a string is recognized as something
	which might be an exponent.
	(Is_Opt_Exponent_Format_Ghost): Ghost function to determine if a
	string has the correct format for an optional exponent.
	(Scan_Exponent): Use ghost functions to factorize contracts.

2022-01-05  Bob Duff  <duff@adacore.com>

	* exp_util.ads (Get_Current_Value_Condition): Belt: Add a
	postcondition that Val /= Var.
	* sem_util.adb (Known_Null): Suspenders: Raise Program_Error if
	Get_Current_Value_Condition returned the same value. This will
	be enabled even without assertions, because infinite recursion
	is a nuisance -- better to crash if this bug ever occurs.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch3.adb (Make_Null_Procedure_Specs): Simplify by reusing
	Copy_Subprogram_Spec.
	* sem_util.ads (Copy_Subprogram_Spec): Add New_Sloc parameter.
	* sem_util.adb (Copy_Subprogram_Spec): Pass New_Sloc to
	New_Copy_Tree.

2022-01-05  Yannick Moy  <moy@adacore.com>

	* libgnat/s-exnint.ads: Mark in SPARK. Adapt to change to
	package.
	* libgnat/s-exnlli.ads: Likewise.
	* libgnat/s-exnllli.ads: Likewise.
	* libgnat/s-exponn.adb: Add lemmas and ghost code. Secial case
	value zero as Left or Right to simplify proof.
	* libgnat/s-exponn.ads: Transform the generic function into a
	generic package with a function inside. Add a functional
	contract.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* sem_ch12.adb (Instantiate_Formal_Subprogram): Remove redundant
	call to Set_Defining_Unit_Name; a similar call is done few lines
	below.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch3.adb (Make_Controlling_Function_Wrappers): Create
	distinct copies of parameter lists for spec and body with
	Copy_Parameter_List; cleanup.
	(Make_Null_Procedure_Specs): Fix style in comments; remove a
	potentially unnecessary initialization of a local variable.

2022-01-05  Bob Duff  <duff@adacore.com>

	* einfo-utils.ads, einfo-utils.adb (Renamed_Entity Alias):
	Change Node_Id to Entity_Id.

2022-01-05  Piotr Trojanek  <trojanek@adacore.com>

	* sem_ch12.ads (Build_Function_Wrapper, Build_Operator_Wrapper):
	Remove unreferenced spec.
	* sem_ch12.adb (Build_Function_Wrapper, Build_Operator_Wrapper):
	Remove dead bodies.

2022-01-05  Yannick Moy  <moy@adacore.com>

	* libgnat/s-aridou.adb: Apply replacement.

2022-01-05  Yannick Moy  <moy@adacore.com>

	* libgnat/s-aridou.adb (Lemma_Word_Commutation): Fix for
	instances with other values of Single_Size.

2022-01-05  Marc Poulhiès  <poulhies@adacore.com>

	* doc/gnat_rm/implementation_defined_pragmas.rst (Compiler_Unit)
	(Compiler_Unit_Warning): Remove.
	* gnat-style.texi, gnat_rm.texi, gnat_ugn.texi: Regenerate.
	* libgnat/g-dynhta.ads: Add comment indicating this unit is
	built during stage1.
	* libgnat/g-dyntab.ads: Likewise.
	* libgnat/g-graphs.ads: Likewise.
	* libgnat/g-lists.ads: Likewise.
	* libgnat/g-sets.ads: Likewise.
	* libgnat/gnat.ads: Likewise.
	* libgnat/s-pehage.ads: Likewise.
	* libgnat/s-resfil.ads: Likewise.
	* libgnat/s-rident.ads: Likewise.
	* libgnat/s-utf_32.ads: Likewise.
	* errout.ads: Update comment.
	* opt.ads (Opt): Remove Compiler_Unit.
	* par-ch5.adb (All_Pragmas): Remove call to Check_Compiler_Unit.
	* sem_prag.adb (Analyze_Pragma): Likewise.
	* sem_ch4.adb (Non_Static_Choice_Error, Analyze_If_Expression)
	(Analyze_Set_Membership, Record_Interp): Likewise.
	* sem_ch11.adb (Analyze_Raise_Expression): Likewise.
	* sem_ch6.adb: Remove Restric package reference.
	(Analyze_Extended_Return_Statement): Remove call to
	Check_Compiler_Unit.
	* par-prag.adb (Process_Restrictions_Or_Restriction_Warnings):
	Remove handling of Pragma_Compiler_Unit[_Warning}.
	* restrict.adb (Check_Compiler_Unit): Remove both.
	* restrict.ads: Likewise.
	* snames.ads-tmpl (Pragma_Id): Remove
	Pragma_Compiler_Unit[_Warning].
	* libgnat/a-assert.ads: Remove pragma Compiler_Unit_Warning.
	* libgnat/a-chlat1.ads: Likewise.
	* libgnat/a-elchha.adb: Likewise.
	* libgnat/a-elchha.ads: Likewise.
	* libgnat/a-ioexce.ads: Likewise.
	* libgnat/a-strhas.ads: Likewise.
	* libgnat/g-byorma.adb: Likewise.
	* libgnat/g-byorma.ads: Likewise.
	* libgnat/g-dyntab.adb: Likewise.
	* libgnat/g-heasor.ads: Likewise.
	* libgnat/g-hesora.adb: Likewise.
	* libgnat/g-hesora.ads: Likewise.
	* libgnat/g-htable.adb: Likewise.
	* libgnat/g-htable.ads: Likewise.
	* libgnat/g-spchge.adb: Likewise.
	* libgnat/g-spchge.ads: Likewise.
	* libgnat/g-speche.adb: Likewise.
	* libgnat/g-speche.ads: Likewise.
	* libgnat/g-table.ads: Likewise.
	* libgnat/g-u3spch.adb: Likewise.
	* libgnat/g-u3spch.ads: Likewise.
	* libgnat/interfac.ads: Likewise.
	* libgnat/s-addope.adb: Likewise.
	* libgnat/s-addope.ads: Likewise.
	* libgnat/s-assert.adb: Likewise.
	* libgnat/s-assert.ads: Likewise.
	* libgnat/s-bitops.adb: Likewise.
	* libgnat/s-bitops.ads: Likewise.
	* libgnat/s-carun8.adb: Likewise.
	* libgnat/s-carun8.ads: Likewise.
	* libgnat/s-casuti.adb: Likewise.
	* libgnat/s-casuti.ads: Likewise.
	* libgnat/s-conca2.adb: Likewise.
	* libgnat/s-conca2.ads: Likewise.
	* libgnat/s-conca3.adb: Likewise.
	* libgnat/s-conca3.ads: Likewise.
	* libgnat/s-conca4.adb: Likewise.
	* libgnat/s-conca4.ads: Likewise.
	* libgnat/s-conca5.adb: Likewise.
	* libgnat/s-conca5.ads: Likewise.
	* libgnat/s-conca6.adb: Likewise.
	* libgnat/s-conca6.ads: Likewise.
	* libgnat/s-conca7.adb: Likewise.
	* libgnat/s-conca7.ads: Likewise.
	* libgnat/s-conca8.adb: Likewise.
	* libgnat/s-conca8.ads: Likewise.
	* libgnat/s-conca9.adb: Likewise.
	* libgnat/s-conca9.ads: Likewise.
	* libgnat/s-crc32.adb: Likewise.
	* libgnat/s-crc32.ads: Likewise.
	* libgnat/s-crtl.ads: Likewise.
	* libgnat/s-excdeb.adb: Likewise.
	* libgnat/s-excdeb.ads: Likewise.
	* libgnat/s-except.ads: Likewise.
	* libgnat/s-exctab.adb: Likewise.
	* libgnat/s-exctab.ads: Likewise.
	* libgnat/s-finmas.ads: Likewise.
	* libgnat/s-htable.adb: Likewise.
	* libgnat/s-htable.ads: Likewise.
	* libgnat/s-mastop.adb: Likewise.
	* libgnat/s-mastop.ads: Likewise.
	* libgnat/s-memory.adb: Likewise.
	* libgnat/s-memory.ads: Likewise.
	* libgnat/s-os_lib.ads: Likewise.
	* libgnat/s-parame.adb: Likewise.
	* libgnat/s-parame.ads: Likewise.
	* libgnat/s-parame__posix2008.ads: Likewise.
	* libgnat/s-purexc.ads: Likewise.
	* libgnat/s-resfil.adb: Likewise.
	* libgnat/s-restri.adb: Likewise.
	* libgnat/s-restri.ads: Likewise.
	* libgnat/s-secsta.adb: Likewise.
	* libgnat/s-secsta.ads: Likewise.
	* libgnat/s-soflin.adb: Likewise.
	* libgnat/s-soflin.ads: Likewise.
	* libgnat/s-sopco3.adb: Likewise.
	* libgnat/s-sopco3.ads: Likewise.
	* libgnat/s-sopco4.adb: Likewise.
	* libgnat/s-sopco4.ads: Likewise.
	* libgnat/s-sopco5.adb: Likewise.
	* libgnat/s-sopco5.ads: Likewise.
	* libgnat/s-spsufi.ads: Likewise.
	* libgnat/s-stache.adb: Likewise.
	* libgnat/s-stache.ads: Likewise.
	* libgnat/s-stalib.adb: Likewise.
	* libgnat/s-stalib.ads: Likewise.
	* libgnat/s-stoele.adb: Likewise.
	* libgnat/s-stoele.ads: Likewise.
	* libgnat/s-strcom.adb: Likewise.
	* libgnat/s-strcom.ads: Likewise.
	* libgnat/s-strhas.adb: Likewise.
	* libgnat/s-string.adb: Likewise.
	* libgnat/s-string.ads: Likewise.
	* libgnat/s-strops.adb: Likewise.
	* libgnat/s-strops.ads: Likewise.
	* libgnat/s-ststop.adb: Likewise.
	* libgnat/s-ststop.ads: Likewise.
	* libgnat/s-traceb.adb: Likewise.
	* libgnat/s-traceb.ads: Likewise.
	* libgnat/s-traent.adb: Likewise.
	* libgnat/s-traent.ads: Likewise.
	* libgnat/s-utf_32.adb: Likewise.
	* libgnat/s-unstyp.ads: Likewise.
	* libgnat/s-wchcnv.adb: Likewise.
	* libgnat/s-wchcnv.ads: Likewise.
	* libgnat/s-wchcon.adb: Likewise.
	* libgnat/s-wchcon.ads: Likewise.
	* libgnat/s-wchjis.adb: Likewise.
	* libgnat/s-wchjis.ads: Likewise.

2022-01-05  Arnaud Charlet  <charlet@adacore.com>

	* osint.adb (File_Names_Equal): Declare To_Lower locally.
	* osint.ads (Null_FD): New.
	* fmap.adb, sinput-l.adb, targparm.adb: Adapt to changes above.
	* switch-b.adb (Scan_Debug_Switches): Use Is_Regular_File to
	simplify the bootstrap dependencies.

2022-01-03  Jakub Jelinek  <jakub@redhat.com>

	* gnat_ugn.texi: Bump @copying's copyright year.
	* gnat_rm.texi: Likewise.


Copyright (C) 2022 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
