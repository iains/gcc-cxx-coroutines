2020-06-12  Steve Baird  <baird@adacore.com>

	* sem_res.adb (Valid_Conversion): The simpler cases of
	violations of the aforementioned 8.6 rule are already handled
	correctly. These include cases where the operand of the type
	conversion is an access parameter or a stand-alone object of an
	anonymous access type. Add code to detect violations where the
	operand of the type conversion is an access discriminant whose
	accessibility level is tied to one of the other simpler cases.
	This is implemented in a new function,
	Valid_Conversion.Is_Discrim_Of_Bad_Access_Conversion_Argument,
	which is called in place of the previous test.

2020-06-12  Bob Duff  <duff@adacore.com>

	* exp_attr.adb (Put_Image): Remove assertion. This assertion is
	False in mixed-Ada-version programs.
	* exp_put_image.adb (Tagged_Put_Image_Enabled): New flag to make
	it easy to experiment with Put_Image on tagged types. False in
	this version.
	(Enable_Put_Image): Enable in pre-2020.  Workarounds: Disable
	for tagged types if Tagged_Put_Image_Enabled is False. Disable
	for access-to-subprogram types.  Disable if errors have been
	detected, or Sink is unavailable.
	(Preload_Sink): Move all conditionals here, from Sem_Ch10, so
	they can be nearby related code in Enable_Put_Image.  Load Sink
	only if we have seen a tagged type.  This removes the dilemma
	about calling Preload_Sink when compiling the compiler, which
	caused unwanted dependences.
	* exp_put_image.ads (Preload_Sink): New formal Compilation_Unit,
	needed to move all conditionals here, from Sem_Ch10.
	* libgnat/a-stouut.adb (Put_UTF_8): Make this suitable for
	inlining, so we don't get warnings about inlining in some tests.
	And so it can be inlined!
	* opt.ads (Tagged_Seen): New flag (see Preload_Sink).
	* scng.adb (Scan): Set new Tagged_Seen flag.
	* sem_ch10.adb (Analyze_Compilation_Unit): Move conditionals and
	comments regarding Preload_Sink into Preload_Sink.

2020-06-12  Arnaud Charlet  <charlet@adacore.com>

	* sem_res.adb (Resolve_Actuals): Check for AI12-0074.

2020-06-12  Olivier Hainque  <hainque@adacore.com>

	* libgnat/s-secsta.ads (Memory_Alignment): New constant, memory
	alignment for chunks and allocated blocks. Initialize to
	Standard'Maximum_Alignment * 2.
	(Chunk_Memory): Use it.
	* libgnat/s-secsta.adb (Round_Up): Likewise.

2020-06-12  Piotr Trojanek  <trojanek@adacore.com>

	* par-prag.adb: Fix ordering.
	* snames.ads-tmpl (Name_Test_Case, Pragma_Test_Case): Likewise.
	* sem_prag.adb (Sig_Flags): Likewise.

2020-06-12  Arnaud Charlet  <charlet@adacore.com>

	* sem_res.adb (Resolve_Entity_Name): Fix handling of expressions
	containing array attributes wrt Ada 83 detection.

2020-06-12  Steve Baird  <baird@adacore.com>

	* sem_util.ads, sem_util.adb: Define 3 new Boolean-valued
	functions - Statically_Denotes_Entity,
	Statically_Denotes_Object, and Statically_Names_Object. The
	first two were taken from sem_attr.adb. The term "statically
	names" is defined in the Ada RM and the new function
	Statically_Names_Object is intended to reflect that definition,
	or more precisely, as described in a comment in the code, to
	reflect the expected future definition of that term.
	* sem_attr.adb: Delete functions Statically_Denotes_Object and
	Statically_Denotes_Entity; these two functions have been moved
	to package Sem_Util. Replace call to Statically_Denotes_Object
	with a call to Statically_Names_Object as per AI12-0217 (a
	binding interpretation, so no Ada_Version check).
	* exp_ch9.adb (Expand_Entry_Barrier.Is_Simple_Barrier): Change
	name of function (it was previously Is_Simple_Barrier_Name)
	because the function should return True in the case of a static
	expression; implement this requirement.  Change function to
	include a call to Statically_Names_Object so that, for Ada_2020
	and later, it will return True for appropriate subcomponent
	names.
	(Expand_Entry_Barrier.Is_Pure_Barrier): Handle
	N_Indexed_Component and N_Selected_Component cases by calling
	Statically_Names_Object.
	(Expand_Entry_Barrier): Reorganize to treat Simple_Barriers and
	Pure_Barriers more uniformly.  Prevent cascaded errors.

2020-06-12  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch12.adb (Find_Matching_Actual): Add guard on search loops
	to detect a compilation error when using a compiler built
	without assertions.
	(Instantiate_Formal_Subprogram): Create a new subprogram name
	for the actual only if formal has contract aspects and expansion
	is enabled.

2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_aggr.adb: Add with and use clauses for Sem_Mech.
	(Get_Base_Object): New function to get the base object of a node.
	(In_Place_Assign_OK): Add Target_Object parameter.  Deal with a
	qualified expression on entry.  Remove short-circuit for array
	aggregates with a single "others" choice.  Do not look into the
	components of the aggregate if the parent is an allocator.
	(Check_Component): Add T_OK parameter and rewrite.
	(Safe_Component): Invoke Check_Component with T_OK set to False.
	(Convert_To_Assignments): Try to use an in-place assignment for
	any target; for that, call Get_Base_Object on the target and pass
	the result to In_Place_Assign_OK.
	(Expand_Array_Aggregate): Use Parent_Kind and Parent_Node more
	consistently.  For an assignment, call Get_Base_Object on the
	target and pass the result to In_Place_Assign_OK.

2020-06-12  Dmitriy Anisimkov  <anisimko@adacore.com>

	* socket.c (__gnat_minus_500ms): Use GetVersionEx to detect
	Windows Server version.
	* libgnat/g-sothco.ads (Minus_500ms_Windows_Timeout): Remade to
	Boolean constant.
	* libgnat/g-socket.adb (Set_Socket_Option): Use
	Minus_500ms_Windows_Timeout constant instead of function call.

2020-06-12  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/a-coinho.ads, libgnat/a-coinho.adb,
	libgnat/a-coinho__shared.ads, libgnat/a-coinho__shared.adb
	(Swap): New procedure.

2020-06-12  Arnaud Charlet  <charlet@adacore.com>

	* exp_ch6.adb (Expand_N_Subprogram_Declaration): Do nothing for
	a subprogram declared in a protected body.
	* exp_ch9.ads, exp_ch9.adb
	(Build_Private_Protected_Declaration): Moved to sem_ch6.adb.
	(Expand_N_Protected_Body): Do nothing for a subprogram declared
	in a protected body.
	* sem_ch6.adb (Build_Internal_Protected_Declaration): Moved from
	exp_ch9.adb and renamed and fixed to ensure in particular that
	such subprograms have convention Intrinsic and have no protected
	version.
	(Analyze_Subprogram_Body_Helper): Call
	Build_Internal_Protected_Declaration.
	(Move_Pragmas): Moved up and merged with the more general
	version from Build_Private_Protected_Declaration. We only want
	to copy selected pragmas, most pragmas are not suitable for a
	copy on the spec.

2020-06-12  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch6.adb (Check_Overriding_Indicatior): Reject an
	overriding indicator on a subprogram declared within a protected
	body.

2020-06-12  Piotr Trojanek  <trojanek@adacore.com>

	* contracts.adb, einfo.adb, sem_ch4.adb, sem_ch6.adb,
	sem_res.adb, sem_util.adb: Replace Ekind_In with Is_Entry.

2020-06-12  Piotr Trojanek  <trojanek@adacore.com>

	* sem_res.adb (Resolve_Entry_Call): Add call to
	Warn_On_Overlapping_Actuals.

2020-06-12  Arnaud Charlet  <charlet@adacore.com>

	* aspects.ads (Is_Representation_Aspect): New array.
	* sem_ch13.adb (Analyze_Aspect_Specifications): Check
	13.1(9.2/5) for representation aspects.

2020-06-12  Bob Duff  <duff@adacore.com>

	* exp_put_image.ads, exp_put_image.adb (Preload_Sink): Procedure
	for preloading type Sink.  This has the side effect of loading
	various dependents, including Ada.Strings.UTF_Encoding.
	(Enable_Put_Image): Disable Put_Image in pre-2020 versions of
	Ada.  This limitation can probably be lifted later.  Enable for
	tagged types except in predefined units.  Disable for CPP types;
	Put_Image is legal, just prints the type name.
	* sem_attr.adb (Check_Put_Image_Attribute): Don't complain about
	Put_Image of CPP types; instead call the "unknown" version of
	Put_Image.
	* sem_ch10.adb (Analyze_Compilation_Unit): Call Preload_Sink.

2020-06-12  Piotr Trojanek  <trojanek@adacore.com>

	* sem_warn.adb (Warn_On_Overlapping_Actuals): Simplify.

2020-06-12  Piotr Trojanek  <trojanek@adacore.com>

	* sem_warn.adb (Warn_On_Overlapping_Actuals): Remove suppression
	for internal units.

2020-06-12  Arnaud Charlet  <charlet@adacore.com>

	* exp_strm.adb (Build_Elementary_Input_Call): Add support for 24
	bits elementary types.
	* rtsfind.ads: Add 24 bits integer streaming routines.
	* sem_ch13.adb (Analyze_Attribute_Definition_Clause
	[Attribute_Stream_Size]): Add support for 24 bits elementary
	types.
	* libgnat/s-stratt.ads, libgnat/s-stratt.adb,
	libgnat/s-stratt__xdr.adb: Add support for signed and unsigned
	24 bits integers.

2020-06-12  Piotr Trojanek  <trojanek@adacore.com>

	* sem_ch3.adb (Get_Discr_Value): Cleanup.

2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>

	* rtsfind.ads (RTU_Id): Add System_Address_To_Access_Conversions.
	* sem_elab.adb (Elaboration_Phase_Active): Alphabetize.
	(Finalize_All_Data_Structures): Likewise.
	(Error_Preelaborated_Call): New procedure.
	(Build_Call_Marker): Set Is_Preelaborable_Call flag in marker.
	(Build_Access_Marker): Likewise.
	(Build_Subprogram_Invocation): Likewise.
	(Build_Task_Activation): Likewise.
	(Check_Preelaborated_Call): Return when the call is preelaborable.
	Call Error_Preelaborated_Call to give the error otherwise.
	(Check_Elab_Call): Likewise.
	* sem_util.adb (Is_Preelaborable_Function): New predicate.
	(Is_Non_Preelaborable_Construct.Visit): Recurse on the
	Explicit_Actual_Parameter field of N_Parameter_Association.
	(Is_Non_Preelaborable_Construct.Visit_Subexpression): In Ada 2020,
	for a call to a preelaborable function, visit the parameter list;
	otherwise, raise Non_Preelaborable exception.
	(Is_Preelaborable_Construct): Likewise, but recursively check the
	parameters instead and return false upon failure, otherwise true.
	* sinfo.ads (Is_Preelaborable_Call): New flag in call marker nodes.
	(Is_Preelaborable_Call): New inline function.
	(Set_Is_Preelaborable_Call): New inline procedure.
	* sinfo.adb (Is_Preelaborable_Call): New inline function.
	(Set_Is_Preelaborable_Call): New inline procedure.

2020-06-12  Bob Duff  <duff@adacore.com>

	* stringt.ads: Remove "use System;".

2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch4.adb (Try_Container_Indexing): Replace call to
	First_Discriminant by Get_Reference_Discriminant to get the
	reference discriminant.
	* sem_ch13.adb (Check_Indexing_Functions): Likewise.
	* sem_ch5.adb (Preanalyze_Range): Call Get_Reference_Discriminant
	to get the reference discriminant.
	* sem_util.adb (Is_OK_Variable_For_Out_Formal): Treat all
	Ada 2012 implicit dereferences in only one place.
	(Is_Variable): Minor tweak.

2020-06-12  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch12.adb (Has_Contracts): New predicate to check whether a
	formal subprogram carries an aspect specification for a pre- or
	postcondition.
	(Build_Subprogram_Wrappers): If actual is overloaded, create a
	new name to be used in call inside wrapper body. This names
	carries the interpretations of the actual, and is resolved when
	the body is analyzed.
	(Build_Subprogram_Body_Wrapper): Use this generated name in
	call.
	(Build_Subprogram_Decl_Wrapper): Build profile of wrapper from
	the profile of formal, and reset type entities for subsequent
	analysis.

2020-06-12  Bob Duff  <duff@adacore.com>

	* debug.adb: Remove usage of -gnatd_z.
	* exp_attr.adb, exp_put_image.ads, exp_put_image.adb: Clean up
	the enable/disable code. If Put_Image is disabled for a type,
	systematically call the "unknown" version.  Improve comments.
	Consolidate workarounds.  Remove usage of -gnatd_z.

2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_elab.adb: Fix typos in comments.

2020-06-12  Justin Squirek  <squirek@adacore.com>

	* sem_util.adb (Object_Access_Level): Add processing of implicit
	dereferences.

2020-06-12  Bob Duff  <duff@adacore.com>

	* libgnat/a-nbnbin.adb, libgnat/a-nbnbin.ads,
	libgnat/a-nbnbin__gmp.adb, libgnat/a-nbnbre.adb,
	libgnat/a-nbnbre.ads: Update Put_Image, and uncomment the aspect
	specification.  Add pragmas Ada_2020.
	* libgnat/a-stouut.ads, libgnat/a-stteou.ads: Add Preelaborate,
	because the Big_Numbers packages have Preelaborate, and now
	depend on these Text_Output packages.

2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>

	* einfo.ads (No_Return): Document it for all subprograms.
	* einfo.adb (Set_No_Return): Adjust assertion accordingly.
	* sem_ch3.adb (Check_Abstract_Overriding): Implement the
	check prescribed by RM 6.5.1(6/2) here instead of...
	(Derive_Subprogram): Adjust comment accordingly.
	* sem_disp.adb (Override_Dispatching_Operation): ...here.
	Remove superfluous return statement.
	* sem_ch6.adb (Check_No_Return_Expression): New procedure.
	(Analyze_Function_Return): Call it to implement the check
	prescribed by AI12-0269 for simple return statements of
	No_Return functions, and also checks extended statements.
	(Analyze_Return_Statement): Only give an error on a return
	statement in No_Return procedures.  Use idiomatic form.
	* sem_ch8.adb (Analyze_Subprogram_Renaming): Adjust error
	message for No_Return renaming subprogram.
	* sem_prag.adb (Analyze_Pragma) <Pragma_No_Return>: Accept
	it on functions and generic functions in Ada 2020.

2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_res.adb (Resolve_Implicit_Dereference): In an instance,
	reset the type of the prefix if it is private before building
	the dereference.

2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_util.adb (Safe_Unchecked_Type_Conversion): Add missing
	Is_Type guard before calling Has_Discriminants on Etype.

2020-06-11  Bob Duff  <duff@adacore.com>

	* libgnat/a-nbnbin__gmp.adb: There's no Optional_Big_Integer
	anymore.  Invalid_Big_Integer is not used.
	Greatest_Common_Divisor returns Big_Positive.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* sem_aggr.adb (Get_Value): Refine type of the Compon parameter.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* sem_aggr.adb (Resolve_Record_Aggregate): Refine type of
	Others_Box.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* checks.adb, exp_ch7.adb, exp_ch9.adb, exp_smem.adb, lib.adb,
	nlists.adb, sem.adb, sem_aggr.adb, sem_ch3.adb, sem_ch6.adb,
	sem_ch8.adb, sem_dim.adb, sem_res.adb, sem_util.adb,
	sem_warn.adb: Replace uses of Next function with procedure.

2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_pakd.ads: Add paragraph about scalar storage order.
	* exp_pakd.adb (Install_PAT): Do not set the scalar storage
	order of the PAT here but...
	(Set_PB_Type): ...here instead and...
	(Create_Packed_Array_Impl_Type): ...here as well.
	* rtsfind.ads (RE_Id): Add RE_Rev_Packed_Bytes{1,2,4}.
	(RE_Unit_Table): Likewise.
	* libgnat/s-unstyp.ads (Rev_Packed_Bytes1): New derived type.
	(Rev_Packed_Bytes2): Likewise.
	(Rev_Packed_Bytes4): Likewise.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* sem_ch4.adb, sem_ch6.adb, sem_res.adb, sem_util.ads: Fix
	references to SPARK RM 7.1.3 rule numbers.

2020-06-11  Ed Schonberg  <schonberg@adacore.com>

	* sem_warn.adb (Warn_On_Overlapping_Actuals): Simplify code,
	remove inner predicate Is_Covered_Formal, preserve warning for
	two overlapping composite types when only one is writable, and
	for two overlapping and writable elementary types.

2020-06-11  Steve Baird  <baird@adacore.com>

	* contracts.adb (Add_Contract_Item): Support specifying
	volatility refinement aspects for types.
	(Analyze_Contracts): Add call to Analyze_Type_Contract in the
	case of a contract for a type.
	(Freeze_Contracts): Add call to Analyze_Type_Contract in the
	case of a contract for a type.
	(Check_Type_Or_Object_External_Properties): A new procedure
	which performs the work that needs to be done for both object
	declarations and types.
	(Analyze_Object_Contract): Add a call to
	Check_Type_Or_Object_External_Properties and remove the code in
	this procedure which did much of the work that is now performed
	by that call.
	(Analyze_Type_Contract): Implement this new routine as nothing
	more than a call to Check_Type_Or_Object_External_Properties.
	* contracts.ads: Update comment for Add_Contract_To_Item because
	types can have contracts.  Follow (questionable) precedent and
	declare new routine Analyze_Type_Contract as visible (following
	example of Analyze_Object_Contract), despite the fact that it is
	never called from outside of the package where it is declared.
	* einfo.adb (Contract, Set_Contract): Id argument can be a type;
	support this case.
	(Write_Field34_Name): Field name is "contract" for a type.
	* einfo.ads: Update comment describing Contract attribute.
	* sem_ch3.adb (Build_Derived_Numeric_Type): Is_Volatile should
	return same answer for all subtypes of a given type. Thus, when
	building the base type for something like type Volatile_1_To_10
	is range 1 .. 10 with Volatile; that basetype should be marked
	as being volatile.
	(Access_Type_Declaration): Add SPARK-specific legality check
	that the designated type of an access type shall be compatible
	with respect to volatility with the access type.
	* sem_ch12.adb (Check_Shared_Variable_Control_Aspects): Add
	SPARK-specific legality check that an actual type parameter in
	an instantiation shall be compatible with respect to volatility
	with the corresponding formal type.
	* sem_ch13.adb (Analyze_Aspect_Specifications): Perform checks
	for aspect specs for the 4 volatility refinement aspects that
	were already being performed for all language-defined aspects.
	* sem_prag.adb (Analyze_External_Property_In_Decl_Part,
	Analyze_Pragma): External properties (other than No_Caching) may
	be specified for a type, including a generic formal type.
	* sem_util.ads: Declare new subprograms - Async_Readers_Enabled,
	Async_Writers_Enabled, Effective_Reads, Effective_Writes, and
	Check_Volatility_Compatibility.
	* sem_util.adb (Async_Readers_Enabled, Async_Writers_Enabled,
	Effective_Reads, Effective_Writes): Initial implementation of
	new functions for querying aspect values.
	(Check_Volatility_Compatibility): New procedure intended for use
	in checking all SPARK legality rules of the form "<> shall be
	compatible with respect to volatility with <>".
	(Has_Enabled_Property): Update comment because Item_Id can be a
	type.  Change name of nested Variable_Has_Enabled_Property
	function to Type_Or_Variable_Has_Enabled_Property; add a
	parameter to that function because recursion may be needed,
	e.g., in the case of a derived typ).  Cope with the case where
	the argument to Has_Enabled_Property is a type.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* sem_aggr.adb (Add_Association): Add assertion about the formal
	parameters.
	(Propagate_Discriminants): Always add an explicit component
	association, so that an "others => <>" association is never
	needed.

2020-06-11  Bob Duff  <duff@adacore.com>

	* exp_put_image.adb (Build_Elementary_Put_Image_Call): If the
	underlying type is real, call Put_Image_Unknown.
	(Build_Unknown_Put_Image_Call): Pass the type name to
	Put_Image_Unknown.
	* libgnat/s-putima.ads, libgnat/s-putima.adb
	(Put_Image_Unknown): Add Type_Name parameter.  Remove
	overly-detailed documentation of what it does; better to leave
	it open.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* sem_ch3.adb (Build_Constrained_Array_Type,
	Build_Constrained_Discriminated_Type): Skip unnecessary loop
	iterations.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* sem_aggr.adb (Build_Constrained_Itype): Move to Sem_Util.
	* sem_ch3.adb (Build_Subtype, Inherit_Predicate_Flags): Move...
	* sem_util.adb (Build_Subtype): Here.  Add parameters for
	references to objects previously declared in enclosing scopes.
	(Inherit_Predicate_Flags): And here, because it is called by
	Build_Subtype.
	* sem_util.ads (Build_Overriding_Spec): Reorder alphabetically.
	(Build_Subtype): Moved from Sem_Ch3; comments updated.
	(Build_Constrained_Itype): Moved from Sem_Aggr; comments
	updated.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* sem_aggr.adb (Case_Table_Type): Change index type from Nat to
	Pos.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* sem_aggr.adb (Build_Constrained_Itype): Previously a declare
	block, now a separate procedure; the only change is that now
	New_Assoc_List might include components and an others clause,
	which we ignore (while we deal with discriminants exactly as we
	did before); extend a ??? comment about how this routine is
	different from the Build_Subtype
	(Resolve_Record_Aggregate): Create a constrained itype not just
	for the outermost record aggregate, but for its inner record
	aggregates as well.

2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>

	* checks.adb (Build_Discriminant_Checks): Build an explicit
	dereference when the type is an access type.
	* exp_atag.adb (Build_CW_Membership): Add explicit dereferences.
	(Build_Get_Access_Level): Likewise.
	(Build_Get_Alignment): Likewise.
	(Build_Inherit_Prims): Likewise.
	(Build_Get_Transportable): Likewise.
	(Build_Set_Size_Function): Likewise.
	* exp_ch3.adb (Build_Offset_To_Top_Function): Likewise.
	* exp_ch4.adb (Expand_Allocator_Expression): Likewise.
	(Expand_N_Indexed_Component ): Remove code dealing with implicit
	dereferences.
	(Expand_N_Selected_Component): Likewise.
	(Expand_N_Slice): Likewise.
	* exp_ch9.adb (Add_Formal_Renamings): Add explicit dereference.
	(Expand_Accept_Declarations): Likewise.
	(Build_Simple_Entry_Call): Remove code dealing with implicit
	dereferences.
	(Expand_N_Requeue_Statement): Likewise.
	* exp_disp.adb (Expand_Dispatching_Call): Build an explicit
	dereference when the controlling type is an access type.
	* exp_spark.adb (Expand_SPARK_N_Selected_Component): Delete.
	(Expand_SPARK_N_Slice_Or_Indexed_Component): Likewise.
	(Expand_SPARK): Do not call them.
	* sem_ch4.adb (Process_Implicit_Dereference_Prefix): Delete.
	(Process_Indexed_Component): Call Implicitly_Designated_Type
	to get the designated type for an implicit dereference.
	(Analyze_Overloaded_Selected_Component): Do not insert an
	explicit dereference here.
	(Analyze_Selected_Component): Likewise.
	(Analyze_Slice): Call Implicitly_Designated_Type to get the
	designated type for an implicit dereference.
	* sem_ch8.adb (Has_Components): New predicate extracted from...
	(Is_Appropriate_For_Record): ...this.  Delete.
	(Is_Appropriate_For_Entry_Prefix): Likewise.
	(Analyze_Renamed_Entry): Deal with implicit dereferences.
	(Find_Selected_Component): Do not insert an explicit dereference
	here.  Call Implicitly_Designated_Type to get the designated type
	for an implicit dereference.  Call Has_Components, Is_Task_Type
	and Is_Protected_Type directly.  Adjust test for error.
	* sem_res.adb (Resolve_Implicit_Dereference): New procedure.
	(Resolve_Call): Call Resolve_Indexed_Component last.
	(Resolve_Entry): Call Resolve_Implicit_Dereference on the prefix.
	(Resolve_Indexed_Component): Call Implicitly_Designated_Type to
	get the designated type for an implicit dereference and
	Resolve_Implicit_Dereference on the prefix at the end.
	(Resolve_Selected_Component): Likewise.
	(Resolve_Slice): Likewise.  Do not apply access checks here.
	* sem_util.ads (Implicitly_Designated_Type): Declare.
	* sem_util.adb (Copy_And_Maybe_Dereference): Simplify.
	(Implicitly_Designated_Type): New function.
	(Object_Access_Level): Fix typo.
	* sem_warn.adb (Check_Unset_Reference): Test Comes_From_Source
	on the original node.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* exp_disp.adb: Minor reformatting.
	* exp_aggr.adb (Is_Static_Dispatch_Table_Aggregate): Recognize
	aggregates of the Ada.Tags.Object_Specific_Data type as static.
	* sem_aggr.adb (Check_Static_Discriminated_Subtype): Deconstruct
	and do not call it from Build_Constrained_Itype.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* exp_disp.adb (Make_Secondary_DT): Internally generated OSD
	tables are now constant.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* exp_aggr.adb (Backend_Processing_Possible): Remove useless
	call.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* opt.ads (Building_Static_Dispatch_Tables): Fix punctuation in
	comment.

2020-06-11  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/s-stposu.ads (Root_Storage_Pool_With_Subpools,
	Root_Subpool): Mark with Preelaborable_Initialization.

2020-06-11  Javier Miranda  <miranda@adacore.com>

	* exp_ch9.adb (Expand_N_Conditional_Entry_Call): Replace call to
	New_Copy_List by calls to the new routine
	New_Copy_Separate_List.
	* sem_util.ads (New_Copy_Separate_List, New_Copy_Separate_Tree):
	New routines.
	* sem_util.adb (New_Copy_Separate_List, New_Copy_Separate_Tree):
	New routines.
	(New_Copy_Tree): Extend the machinery that detects syntactic
	nodes to handle lists of indentifiers with field More_Ids;
	otherwise such nodes are erroneously handled as semantic nodes.
	Copy aspect specifications attached to nodes.
	* sem_ch12.adb (Copy_Generic_Node): Protect reading attribute
	Etype.

2020-06-11  Bob Duff  <duff@adacore.com>

	* sem_ch13.adb (Analyze_Aspect_Specifications): Do not set the
	Has_Predicates flag when the Predicate_Failure aspect is seen.
	It is legal (but pointless) to use this aspect without a
	predicate.  If we set the flag, we generate a half-baked
	Predicate procedure, and if that procedure is nested, it causes
	unnesting to crash.

2020-06-11  Bob Duff  <duff@adacore.com>

	* exp_put_image.adb (Build_Record_Put_Image_Procedure): Remove
	special processing of protected types, because those are handled
	by Build_Protected_Put_Image_Call.
	(Enable_Put_Image): Use the switch -gnatd_z to control enabling
	of Put_Image. Disable Put_Image for types in Remote_Types
	packages.
	* debug.adb: Document -gnatd_z switch.
	* exp_imgv.adb, libgnat/a-stteou.ads, opt.ads: Minor cleanups.

2020-06-11  Piotr Trojanek  <trojanek@adacore.com>

	* sem_warn.adb (Warn_On_Overlapping_Actuals): Add label to the
	outer loop and use it in the exit statement.

2020-06-11  Ghjuvan Lacambre  <lacambre@adacore.com>

	* exp_ch3.adb (Build_Assignment): Generate predicate check if
	subtype mark has predicate.

2020-06-11  Justin Squirek  <squirek@adacore.com>

	* sem_util.adb (Expand_N_Attribute_Reference): Use original
	nodes where required to avoid looking at the expanded tree.

2020-06-11  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/a-catizo.ads, libgnat/a-nbnbin.ads,
	libgnat/a-nbnbre.ads, libgnat/a-nubinu.ads,
	libgnat/s-aoinar.ads, libgnat/s-aomoar.ads,
	libgnat/s-aotase.ads, libgnat/s-stopoo.ads: Remove aspects that
	we will not implement.

2020-06-11  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/s-aoinar.adb (Atomic_Fetch_And_Add,
	Atomic_Fetch_And_Subtract): Add fallback using
	compare-and-exchange, in case the integer type does not map to a
	machine type.

2020-06-10  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/s-aomoar.ads, libgnat/s-aomoar.adb: New files.
	* libgnat/s-atopar.ads: Move...
	* libgnat/s-aoinar.ads: Here.
	* libgnat/s-atopar.adb: Move...
	* libgnat/s-aoinar.adb: Here.
	* impunit.adb: Update list of runtime files.
	* Makefile.rtl (GNATRTL_NONTASKING_OBJS=): Adjust.

2020-06-10  Arnaud Charlet  <charlet@adacore.com>

	* snames.ads-tmpl (Name_Characters_Assertion_Check,
	Name_Containers_Assertion_Check,
	Name_Interfaces_Assertion_Check, Name_IO_Assertion_Check,
	Name_Numerics_Assertion_Check, Name_Strings_Assertion_Check,
	Name_System_Assertion_Check): New constants.
	* types.ads (Characters_Assertion_Check,
	Containers_Assertion_Check, Interfaces_Assertion_Check,
	IO_Assertion_Check, Numerics_Assertion_Check,
	Strings_Assertion_Check, System_Assertion_Check): New constants.
	(All_Checks): Update accordingly.

2020-06-10  Ghjuvan Lacambre  <lacambre@adacore.com>

	* exp_ch3.adb (Build_Equivalent_Record_Aggregate): Return Empty
	if Etype of record component has predicates.

2020-06-10  Arnaud Charlet  <charlet@adacore.com>

	* exp_ch3.adb (Build_Init_Statements): Implement the notion of
	"require late initialization".

2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_util.adb (Copy_And_Maybe_Dereference): Temporarily copy
	the parent node of the original tree when dereferencing.

2020-06-10  Ed Schonberg  <schonberg@adacore.com>

	* sem_warn.adb (Warn_On_Overlapping_Actuals): Add a warning when
	two actuals in a call overlap, both are composite types that may
	be passed by reference, and only one of them is writable.

2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_ch4.adb (Expand_N_In): Use an expression with actions to
	insert the PE raise statement for the Unchecked_Union case.

2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch4.adb (Analyze_Call): Use idiomatic condition.
	* sem_res.adb (Resolve_Call): Remove obsolete code.

2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_util.adb (Copy_And_Maybe_Dereference): New function.
	(Build_Access_Record_Constraint): Use it to copy the prefix.
	(Build_Actual_Array_Constraint): Likewise.
	(Build_Actual_Record_Constraint): Likewise.

2020-06-10  Bob Duff  <duff@adacore.com>

	* sem_prag.adb (Invariant): Remove the pragma removing code.  It
	doesn't work to remove the pragma, because various flags are set
	during Build_Invariant_Procedure_Declaration and
	Build_Invariant_Procedure_Body that need to be set to avoid the
	spurious warnings.
	* exp_util.adb (Make_Invariant_Call): Avoid calling the
	invariant-checking procedure if the body is empty. This is an
	optimization.

2020-06-10  Vasiliy Fofanov  <fofanov@adacore.com>

	* doc/gnat_ugn/gnat_utility_programs.rst: Fix gnatmetric
	switches description.

2020-06-10  Arnaud Charlet  <charlet@adacore.com>

	* repinfo-input.ads, repinfo-input.adb, repinfo.adb,
	repinfo.ads: Update header.

2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_aggr.adb (In_Place_Assign_OK): Do not necessarily return
	false for a type with discriminants.
	(Convert_To_Assignments): Use Parent_Node and Parent_Kind more
	consistently.  In the in-place assignment case, first apply a
	discriminant check if need be, and be prepared for a rewritten
	aggregate as a result.

2020-06-10  Arnaud Charlet  <charlet@adacore.com>

	* atree.adb, contracts.adb, debug.adb, freeze.adb,
	repinfo-input.adb, repinfo.adb, sem_attr.adb, sem_ch10.adb,
	sem_ch13.adb, sem_ch3.adb, sem_ch5.adb, sem_ch6.adb,
	sem_ch8.adb, sem_ch9.adb, sem_disp.adb, sem_eval.adb,
	sem_prag.adb: Remove more references to ASIS.

2020-06-10  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/s-secsta.adb (Round_Up): Fix typo in exception
	message.

2020-06-10  Piotr Trojanek  <trojanek@adacore.com>

	* par-ch4.adb (P_Membership_Test): Fix typo in a grammar rule.

2020-06-10  Piotr Trojanek  <trojanek@adacore.com>

	* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Remove
	expansion of First and Last attributes.

2020-06-10  Piotr Trojanek  <trojanek@adacore.com>

	* exp_attr.adb (Expand_N_Attribute_Reference): Remove folding
	for Enum_Rep attribute.
	* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Remove
	duplicated code for folding Enum_Rep attribute.
	* sem_attr.adb (Eval_Attribute): Relax condition for folding
	Enum_Rep attribute; previously dead code is now executed when
	the attribute prefix is an enumeration literal; refine type in
	processing of Enum_Val.

2020-06-10  Javier Miranda  <miranda@adacore.com>

	* sem_ch3.adb (Analyze_Declarations): Adjust the machinery that
	takes care of late body overriding of initialize, adjust,
	finalize.  Remove ASIS mode code.

2020-06-10  Ed Schonberg  <schonberg@adacore.com>

	* einfo.ads (Access_Subprogram_Wrapper): New attribute of
	Subprogram_Type entities. Denotes subprogram constructed for
	Access_To_Subprogram types that include pre- and postconditions.
	* einfo.adb: Subprogram bodies for Access_Subprogram_Wrapper.
	* exp_ch6.adb (Expand_Call): An indirect call through an
	Access_To_subprogram that includes contracts is rewritten as a
	call to the corresponding Access_ ubprogram_Wrapper. Handle
	derived types that inherit contract from parent.
	* sem_prag.adb (Build_Access_Subprogram_Wrapper): Build
	subprogram declaration for subprogram that incorporates the
	contracts of an Access_To_Subprogram type declaration. Build
	corresponding body and attach it to freeze actions for type.
	* sem_util.ads, sem_util.adb (Is_Access_Subprogram_Wrapper):
	Utility that uses signature of the subprogram to determine
	whether it is a generated wrapper for an Access_To_Subprogram
	type.

2020-06-10  Ghjuvan Lacambre  <lacambre@adacore.com>

	* par-ch6.adb (P_Subprogram): Make sure the specification
	belongs to a procedure.

2020-06-10  Piotr Trojanek  <trojanek@adacore.com>

	* sem_ch13.adb (All_Membership_Choices_Static): Assert an AST
	property documented in sinfo.ads and simplify an excessive
	condition.

2020-06-10  Piotr Trojanek  <trojanek@adacore.com>

	* exp_attr.adb (Expand_N_Attribute_Reference): Fix a copy-paste
	mistake in comment.
	* sem_res.adb (Flag_Effectively_Volatile_Objects): Fix a type in
	the SPARK RM rule number.
	* exp_ch4.adb, sem_util.adb: Fix style in single line comments.

2020-06-10  Piotr Trojanek  <trojanek@adacore.com>

	* sem_aux.ads, sem_aux.adb (Get_Low_Bound): Remove.

2020-06-10  Arnaud Charlet  <charlet@adacore.com>

	* scn.adb (Determine_License): Remove.

2020-06-10  Justin Squirek  <squirek@adacore.com>

	* exp_ch3.adb (Expand_N_Object_Declaration): Add condition to
	handle processing of objects initialized by a call to a function
	return an anonymous access type.
	* exp_ch6.adb, exp_ch6.ads
	(Has_Unconstrained_Access_Discriminants): Moved to sem_util.adb
	(Needs_Result_Accessibility_Level): Moved to sem_util.adb
	* sem_util.adb, sem_util.ads
	(Has_Unconstrained_Access_Discriminants): Moved from exp_ch6.adb
	(Needs_Result_Accessibility_Level): Moved from exp_ch6.adb
	* sem_res.adb (Valid_Conversion): Add condition for the special
	case where the operand of a conversion is the result of an
	anonymous access type

2020-06-10  Ghjuvan Lacambre  <lacambre@adacore.com>

	* par-ch6.adb (P_Subprogram): Reject duplicate subprogram
	declarations.

2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_ch6.adb (Insert_Post_Call_Actions): Deal with the context
	of an if-expression and with a call written in prefixed notation.

2020-06-10  Gary Dismukes  <dismukes@adacore.com>

	* einfo.ads: Minor reformatting of a comment.
	* exp_aggr.adb: Minor reformatting and a grammar correction.
	* exp_attr.adb: Minor reformatting and a typo fix in some
	comments.
	* sem_ch12.adb: Fix three typos in comments.

2020-06-09  Javier Miranda  <miranda@adacore.com>

	* sem_ch6.adb (New_Overloaded_Entity): Add missing call to check
	subtype conformance of overriding dispatching primitive.
	* sem_eval.adb (Subtypes_Statically_Match): Handle derivations
	of private subtypes.
	* libgnat/g-exptty.adb, libgnat/g-exptty.ads
	(Set_Up_Communications): Fix the profile since null-exclusion is
	missing in the access type formals.
	* sem_disp.ads (Check_Operation_From_Private_View): Adding
	documentation.

2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>

	* einfo.ads (XEINFO section): Update format description.
	(Is_Subprogram_Or_Entry): Move pragma to regular section.
	(Is_Subprogram_Or_Generic_Subprogram): Likewise.
	* xeinfo.adb (Get_B4): Rename to...
	(Get_B0): ...this.
	(Translate_Expr): New procedure extracted from...
	(XEinfo): ...here.  Try to apply Get_B0 first and then
	call Translate_Expr to translate supported constructs.

2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_ch6.adb (Freeze_Subprogram): Deal with convention C_Family.
	* freeze.adb (Freeze_Profile): Likewise.  Add missing guard.
	* sem_mech.adb (Set_Mechanisms): Likewise.
	* lib-xref.adb (Output_Import_Export_Info): Ditto for C_Variadic.
	* repinfo.adb (List_Subprogram_Info): Likewise.
	* sem_prag.adb (Set_Convention_From_Pragma): Move main checks for
	Stdcall to...
	(Process_Convention): ...here.  Add checks for C_Variadic.
	* snames.ads-tmpl: Add Name_C_Variadic_0 .. Name_C_Variadic_16.
	Use consistent format for subtype declarations.
	(Convention_Id): Add Convention_C_Variadic_0 .. C_Variadic_16
	and move Convention_CPP up.
	(Convention_C_Family): New subtype of Convention_Id.
	(Convention_C_Variadic): Likewise.
	(Foreign_Convention): Use explicit upper bound.
	Add pragma Inline for Is_Configuration_Pragma_Name,
	Is_Function_Attribute_Name, Is_Internal_Attribute_Name
	and Is_Procedure_Attribute_Name.
	* snames.adb-tmpl (Get_Convention_Id): Deal with Name_Variadic_n.
	(Get_Convention_Name): Deal with Convention_Variadic_n.
	* types.h (Convention_Id): New typedef.
	* xsnamest.adb (Name2): New variable.
	(Is_Conv): New pattern.
	(Get_Subt1): Likewise.
	(Get_Subt2): Likewise.
	Output subtypes of Convention_Id into the C header file.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* exp_ch3.adb, exp_ch4.adb, exp_ch6.adb, exp_ch9.adb,
	exp_disp.adb, exp_util.adb: Add comments related to errors that
	should be moved to semantic analysis. Also replace "?" with "??"
	in warning messages.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/a-strunb__shared.ads, libgnat/a-strunb__shared.adb
	(Reference, Unreference): No-op for Empty_Shared_String.
	Remove unneeded calls to Reference.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* exp_ch5.adb (Expand_N_Assignment): Remove kludge for
	AI05-0087.
	* sem_ch12.adb (Validate_Derived_Type_Instance): Implement
	AI05-0087 retroactively since it's a binding interpretation.

2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>

	* einfo.ads (Has_Foreign_Convention): Fix description.
	(Component_Alignment): Move around.
	(Has_DIC): Likewise.
	(Has_Interrupt_Handler): Likewise.
	(Has_Invariants): Likewise.
	(Is_Atomic_Or_VFA): Likewise.
	(Next_Index): Likewise.
	(Scope_Depth): Likewise.
	(Init_Component_Size): Likewise.
	(Init_Component_Location): Likewise.
	(Init_Size): Likewise.
	(Inline Pragmas for functions): Add Corresponding_Function,
	Corresponding_Procedure, Entry_Max_Queue_Lengths_Array,
	Finalize_Storage_Only, Has_DIC, Has_Invariants,
	Initialization_Statements, Is_Anonymous_Access_Type,
	Next_Stored_Discriminant, Address_Clause, Alignment_Clause,
	Float_Rep, Has_Foreign_Convention, Has_Non_Limited_View,
	Is_Constant_Object, Is_Discriminal, Is_Finalizer, Is_Null_State,
	Is_Prival, Is_Protected_Component, Is_Protected_Record_Type,
	Is_Subprogram_Or_Entry, Is_Task_Record_Type, Size_Clause,
	Stream_Size_Clause, Type_High_Bound, Type_Low_Bound, Known_*,
	Unknown_*.
	(Inline Pragmas for procedures): Add Set_Corresponding_Function,
	Set_Corresponding_Procedure, Set_Finalize_Storage_Only,
	Set_Float_Rep, Set_Initialization_Statements,
	Init_Normalized_First_Bit, Init_Normalized_Position,
	Init_Normalized_Position_Max.
	* einfo.adb (Was_Hidden): Move around.
	(Is_Packed_Array): Likewise.
	(Model_Emin_Value): Likewise.
	(Model_Epsilon_Value): Likewise.
	(Model_Mantissa_Value): Likewise.
	(Model_Small_Value): Likewise.

2020-06-09  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch12.adb (Check_Shared_Variable_Control_Aspects): Require
	exact match between formal and actual for aspects Atomic and
	Volatile only for formal derived types.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* exp_util.adb (Side_Effect_Free): Improve handling of
	N_Aggregate.

2020-06-09  Ghjuvan Lacambre  <lacambre@adacore.com>

	* sem_res.adb (Resolve_Qualified_Expression): Use Subtype_Mark
	type.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* exp_aggr.adb (Max_Aggregate_Size): New function to factorize
	code.
	(Convert_To_Positional, Aggr_Size_OK): Use Max_Aggregate_Size.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* sem_util.ads, sem_util.adb (Set_Debug_Info_Defining_Id): New.
	* exp_ch3.adb, exp_ch8.adb: Call Set_Debug_Info_Defining_Id when
	relevant.

2020-06-09  Justin Squirek  <squirek@adacore.com>

	* einfo.ads (Returns_By_Ref): Modify documentation to reflect
	that Returns_By_Ref can be applied to E_Subprogram_Type
	entities.

2020-06-09  Justin Squirek  <squirek@adacore.com>

	* exp_attr.adb (Expand_N_Attribute_Reference): Modify expansion
	of 'Overlaps_Storage to take into account zero sized arrays.

2020-06-09  Bob Duff  <duff@adacore.com>

	* bindo-graphs.adb, bindo-graphs.ads: For each invocation graph,
	record the corresponding library graph.
	* bindo-writers.adb (Write_Invocation_Graph_Vertex): Print the
	lib item name. Remove library graph parameters.
	* bindo-augmentors.adb, bindo-augmentors.ads,
	bindo-builders.adb, bindo-diagnostics.adb,
	bindo-diagnostics.ads, bindo-elaborators.adb: Remove library
	graph parameters.

2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>

	* checks.adb (Apply_Predicate_Check): Extend trick used for
	aggregates to qualified aggregates and object declarations
	* einfo.ads (Has_Own_DIC): Mention the underlying full view.
	(Has_Own_Invariants): Likewise.
	(Has_Predicates): Likewise.
	* exp_util.adb (Build_DIC_Procedure_Declaration): Do not deal
	with base types explicitly but with underlying full views.
	(Build_Invariant_Procedure_Declaration): Likewise.
	* sem_ch13.adb (Build_Predicate_Functions): Do not deal with
	the full view manually but call Propagate_Predicate_Attributes
	to propagate attributes to views.
	(Build_Predicate_Function_Declaration): Likewise.
	* sem_ch3.adb (Build_Assertion_Bodies_For_Type): Build bodies
	for private full views with an underlying full view.
	(Build_Derived_Private_Type): Small comment tweak.
	(Complete_Private_Subtype): Call Propagate_Predicate_Attributes.
	(Process_Full_View): Do not deal with base types explicitly for
	DIC and Invariant attributes.  Deal with underlying full views
	for them.  Call Propagate_Predicate_Attributes and deal with
	underlying full views for them.
	* sem_ch7.adb (Preserve_Full_Attributes): Do not cross propagate
	DIC and Invariant attributes between full type and its base type.
	Propagate Predicate attributes from the full to the private view.
	* sem_ch9.adb (Analyze_Protected_Type_Declaration): Likewise.
	(Analyze_Task_Type_Declaration): Likewise.
	* sem_util.ads (Get_Views): Remove Full_Base parameter and add
	UFull_Typ parameter.
	(Propagate_Predicate_Attributes): New procedure.
	* sem_util.adb (Get_Views): Remove Full_Base parameter and add
	UFull_Typ parameter.  Retrieve the Corresponding_Record_Type
	from the underlying full view, if any.
	(Propagate_DIC_Attributes): Remove useless tests.
	(Propagate_Invariant_Attributes): Likewise.
	(Propagate_Predicate_Attributes): New procedure.

2020-06-09  Justin Squirek  <squirek@adacore.com>

	* exp_ch5.adb (Expand_Predicated_Loop): Perserve the original
	loop identifier within the expansion.

2020-06-09  Bob Duff  <duff@adacore.com>

	* bindo-graphs.ads (Library_Graph_Edge_Kind): Reorder enumerals
	to reflect the order of adding edges. Clarify comments.
	* bindo-graphs.adb (Add_Edge_Kind_Check): Correct the
	assertions.  Reorder the "when"s to match the order of adding
	edges, and therefore the order of enumerals in type
	Library_Graph_Edge_Kind.  Change names to "Old_" and "New_" to
	clarify what's what.  Combine Invocation_Edge into the "<="
	test.  Fix the "raise Program_Error" message, which was
	backwards.

2020-06-09  Bob Duff  <duff@adacore.com>

	* bindo-graphs.adb (Add_Edge_Kind_Check): Add the Image of the
	old and new Kinds to the raise Program_Error message.

2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch3.adb (Is_Visible_Component): Do not special-case
	bodies of instances.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* exp_ch4.adb (Expand_N_In): Fix handling of null exclusion.

2020-06-09  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch12.adb (Check_Shared_Variable_Control_Aspects): Require
	exact match between formal and actual for aspects Atomic,
	Atomic_Component, Volatile, and Volatile_Components.

2020-06-09  Bob Duff  <duff@adacore.com>

	* doc/gnat_ugn/gnat_utility_programs.rst: Add documentation for
	the --no-separate-return switch of gnatpp.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* sem_warn.adb (Warn_On_Constant_Valid_Condition): Add proper
	warning tag.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* sem_type.adb (Covers): Fix implementation of AI05-0149.
	* sem_res.adb: Fix typo.

2020-06-09  Ed Schonberg  <schonberg@adacore.com>

	* exp_ch9.adb (Build_Master_Renaming): Make name in renaming
	declaration unique by adding a numeric suffix, to prevent
	accidental name conflict when several instantiations of a
	package containing an access_to_incomplete type that designate
	tasks appear in the same scope.

2020-06-09  Piotr Trojanek  <trojanek@adacore.com>

	* libgnarl/a-synbar.ads, libgnarl/a-synbar.adb,
	libgnarl/a-synbar__posix.ads, libgnarl/a-synbar__posix.adb
	(Ada.Synchronous_Barriers): Annotate with SPARK_Mode => Off.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* sem_eval.adb (Eval_Relational_Op, Eval_String_Literal,
	Eval_Type_Conversion): Relax rules on relational operators and
	type conversions of static string types.

2020-06-09  Arnaud Charlet  <charlet@adacore.com>

	* sem_util.ads, sem_util.adb (Is_Partially_Initialized_Type):
	Take Default_Value and Default_Component_Value into account.
	* sem_ch3.adb (Analyze_Object_Declaration): Update comment.

2020-06-09  Bob Duff  <duff@adacore.com>

	* bindo-graphs.adb (Add_Edge_Kind_Check): Disable failing part
	of the assertion.

2020-06-08  Steve Baird  <baird@adacore.com>

	* sem_prag.adb (Analyze_Pragma.Set_Ravenscar_Profile): Add
	appropriate call to Set_Restriction_No_Dependence if Ada_Version
	>= Ada2012 and Profile is either Ravenscar or a GNAT-defined
	Ravenscar variant (i.e., not Jorvik).

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* sem_ch5.adb: Fix typo.
	* sem_ch8.adb (Analyze_Renamed_Primitive_Operation): Check that
	the prefix of a prefixed view must be renamable as an object.

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* sem_cat.ads: Fix typo.
	* sem_cat.adb (Validate_Remote_Access_To_Class_Wide_Type): Add
	handling of N_Attribute_Definition_Clause.
	* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Call
	Validate_Remote_Access_To_Class_Wide_Type for Storage_Size and
	Storage_Pool.
	* sem_attr.adb, exp_ch4.adb: Update comments.

2020-06-08  Justin Squirek  <squirek@adacore.com>

	* sem_ch4.adb (Analyze_One_Call): Add extra condition to the
	predicate for deciding when a given controlled call is visible.

2020-06-08  Piotr Trojanek  <trojanek@adacore.com>

	* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Port
	changes in frontend expander.

2020-06-08  Piotr Trojanek  <trojanek@adacore.com>

	* sem_ch13.adb (All_Membership_Choices_Static): Fix style.

2020-06-08  Steve Baird  <baird@adacore.com>

	* libgnat/s-rident.ads: Add Jorvik to the Profile_Name
	enumeration type.  Add an element for Jorvik to the array
	aggregate that is the initial value of the constant
	Profile_Info.
	* targparm.adb (Get_Target_Parameters): Handle "pragma Profile
	(Jorvik);" similarly to "pragma Profile (Ravenscar);".
	* snames.ads-tmpl: Declare Name_Jorvik Name_Id. Unlike
	Ravenscar, Jorvik is not a pragma name and has no corresponding
	element in the Pragma_Id enumeration type; this means that its
	declaration must not occur between those of First_Pragma_Name
	and Last_Pragma_Name.
	* sem_prag.adb (Analyze_Pragma): Add call to
	Set_Ravenscar_Profile for Jorvik, similar to the existing calls
	for Ravenscar and the GNAT Ravenscar variants.

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* sem_ch8.adb (Analyze_Object_Renaming): Update Get_Object_Name
	to go through N_Qualified_Expression and N_Type_Conversion.  Fix
	another case of wrong usage of E_Anonymous_Access_Type instead
	of Anonymous_Access_Kind.
	* sem_util.adb (Is_Dependent_Component_Of_Mutable_Object): Work
	on the original node.
	(Is_Aliased_View): Take into account N_Qualified_Expression.

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* sem_eval.adb (Eval_Type_Conversion): Fix handling of
	enumeration to integer conversions.
	* exp_attr.adb (Expand_N_Attribute_Reference
	[Attribute_Enum_Rep]): Remove special casing for first-level
	renaming, best left to the general folding mechanism via
	Eval_Type_Conversion.

2020-06-08  Eric Botcazou  <ebotcazou@adacore.com>

	* atree.adb (New_Copy): Do not clear Has_Dynamic_Range_Check.
	* checks.ads (Append_Range_Checks): Remove Flag_Node parameter.
	(Insert_Range_Checks): Likewise and remove default value of
	Static_Loc parameter.
	* checks.adb (Append_Range_Checks): Remove Flag_Node parameter.
	Do not test and set Has_Dynamic_Range_Check.
	(Insert_Range_Checks): Likewise and remove default value of
	Static_Loc parameter.
	* csinfo.adb (CSinfo): Remove 'L' from [NEUB]_Fields pattern and
	do not handle Has_Dynamic_Range_Check.
	* exp_ch5.adb (Expand_N_Assignment_Statement): Remove argument
	in call to Insert_Range_Checks.
	* sem_ch3.adb (Analyze_Subtype_Declaration): Do not fiddle
	with Has_Dynamic_Range_Check.
	(Process_Range_Expr_In_Decl): Remove argument in calls to
	Insert_Range_Checks and Append_Range_Checks.
	* sinfo.ads (Has_Dynamic_Range_Check): Delete.
	(Set_Has_Dynamic_Range_Check): Likewise.
	* sinfo.adb (Has_Dynamic_Range_Check): Delete.
	(Set_Has_Dynamic_Range_Check): Likewise.
	* treepr.adb (Print_Node): Do not print Has_Dynamic_Range_Check.

2020-06-08  Steve Baird  <baird@adacore.com>

	* sem_ch13.ads: Export new function
	All_Membership_Choices_Static.
	* sem_ch13.adb: Implement new function
	All_Membership_Choices_Static.  This involves moving the
	functions Is_Static_Choice and All_Membership_Choices_Static,
	which were previously declared within the function
	Is_Predicate_Static, out to library level so that they can be
	called by the new function. The already-exisiting code in
	Is_Predicate_Static which became the body of
	All_Membership_Choices_Static is replaced with a call to the new
	function in order to avoid duplication.
	* exp_ch9.adb (Is_Pure_Barrier): Several changes needed to
	implement rules of AI12-0290 and RM D.7's definition of
	"pure-barrier-eligible". These changes include adding a call to
	the new function Sem_13.All_Membership_Choices_Static, as per
	the "see 4.9" in RM D.7(1.6/5).

2020-06-08  Richard Kenner  <kenner@adacore.com>

	* exp_unst.adb (Visit_Node): When visiting array attribute
	nodes, in addition to checking the type of Get_Referenced_Object
	of the prefix, also check the actual type of the prefix.

2020-06-08  Gary Dismukes  <dismukes@adacore.com>

	* checks.adb (Apply_Predicate_Check): Refine test for being in a
	subprogram body to account for no Corresponding_Body case,
	avoiding blowups arising due to other changes here.
	* exp_ch4.adb (Expand_N_Qualified_Expression): Apply predicate
	checks, if any, after constraint checks are applied.
	* sem_eval.ads (Check_Expression_Against_Static_Predicate): Add
	Check_Failure_Is_Error formal for conditionalizing warning vs.
	error messages.
	* sem_eval.adb (Check_Expression_Against_Static_Predicate):
	Issue an error message rather than a warning when the new
	Check_Failure_Is_Error formal is True. In the nonstatic or
	Dynamic_Predicate case where the predicate is known to fail,
	emit the check to ensure that folded cases get checks applied.
	* sem_res.adb (Resolve_Qualified_Expression): Call
	Check_Expression_Against_Static_Predicate, passing True for
	Check_Failure_Is_Error, to ensure we reject static predicate
	violations. Remove code that was conditionally calling
	Apply_Predicate_Check, which is no longer needed, and that check
	procedure shouldn't be called from a resolution routine in any
	case. Also remove associated comment about preventing infinite
	recursion and consistency with Resolve_Type_Conversion, since
	that handling was already similarly removed from
	Resolve_Type_Convesion at some point.
	(Resolve_Type_Conversion): Add passing of True for
	Check_Failure_Is_Error parameter on call to
	Check_Expression_Against_Static_Predicate, to ensure that static
	conversion cases that violate a predicate are rejected as
	errors.

2020-06-08  Piotr Trojanek  <trojanek@adacore.com>

	* snames.ads-tmpl (Name_SPARK): Restore after being deleted.

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* exp_aggr.adb, exp_ch6.adb, par-ch11.adb, par-ch6.adb,
	par-ch7.adb, par-prag.adb, restrict.adb, restrict.ads,
	scans.ads, scng.adb, sem_aggr.adb, sem_attr.adb, sem_ch11.adb,
	sem_ch12.adb, sem_ch3.adb, sem_ch3.ads, sem_ch4.adb,
	sem_ch5.adb, sem_ch6.adb, sem_ch7.adb, sem_ch8.adb, sem_ch9.adb,
	sem_res.adb, sem_util.adb, sem_util.ads, snames.ads-tmpl,
	gnatbind.adb, libgnat/s-rident.ads,
	doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:
	Remove processing of SPARK_05 restriction.
	* gnat_rm.texi: Regenerate.
	* opt.ads: Remove processing of old checksum which is now
	handled by gprbuild directly.

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* sem_ch12.adb (Instantiate_Object): Relax rules related to null
	exclusions and generic objects. Handle all anonymous types
	consistently and not just E_Anonymous_Access_Type.
	* sem_ch8.adb (Analyze_Object_Renaming): Change wording so that
	it applies to both renamings and instantiations to avoid
	confusion.

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/a-textio.ads (File_Mode): Fix typo in comment.

2020-06-08  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_res.adb (Resolve_Indexed_Component): Do not give a warning
	for a nonatomic component of an atomic array which is subject to
	an address clause in Ada 2020 mode.
	(Resolve_Selected_Component): Likewise for an atomic record.

2020-06-08  Philippe Gil  <gil@adacore.com>

	* doc/gnat_ugn/the_gnat_compilation_model.rst: in "Handling
	Files with Multiple Units" part documents gnatname use for
	unmodified files handling and gnatchop use for files
	refactoring.
	* gnat_ugn.texi: Regenerate.

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* doc/gnat_rm/implementation_defined_attributes.rst:
	Enum_Rep/Enum_Val are standard Ada 202x attributes.
	* gnat_rm.texi: Regenerate.

2020-06-08  Javier Miranda  <miranda@adacore.com>

	* exp_aggr.adb (Safe_Component): Remove code that considers as
	unsafe components that are aggregates; such removal allows the
	frontend to proceed and evaluate if they are safe by means of
	invoking Safe_Aggregate.

2020-06-08  Piotr Trojanek  <trojanek@adacore.com>

	* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Apply
	standard expansion to attributes First and Last.

2020-06-08  Piotr Trojanek  <trojanek@adacore.com>

	* exp_attr.adb, exp_util.ads, exp_util.adb (Get_Index_Subtype):
	Move from the body of Exp_Attr to Exp_Util and expose from the
	spec.
	* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Replace
	duplicated code with a call to Get_Index_Subtype.

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* sem_ch8.adb (Analyze_Object_Renaming): Simplify code by moving
	many special cases to Is_Object_Reference and removing others by
	only checking renamings coming from sources.
	* sem_util.adb (Is_Object_Reference): Update for AI12-0226 and
	add more regular handling of 'Priority. Remove special cases no
	longer needed now that we are only checking renamings coming
	from sources.

2020-06-08  Claire Dross  <dross@adacore.com>

	* libgnat/a-cofove.adb (Insert_Space): The computation of Index
	generates a spurious compiler warning about a value not being in
	range for a statically dead branch.  Silence it using pragma
	Warnings.

2020-06-08  Bob Duff  <duff@adacore.com>

	* bindo-graphs.adb (function Add_Edge): Rename
	Add_Edge_With_Return to Add_Edge; we can tell it returns because
	it's a function, and overloading seems appropriate in this case.
	If Activates_Task=True, and we're not going to add a new edge
	because an existing Pred-->Succ edge already exists, then set
	Activates_Task to True on the preexisting edge.  This ensures
	that the message:
	info: use pragma Restrictions (No_Entry_Calls_In_Elaboration_Code)
	appears when appropriate, no matter in what order the edges
	happened to be processed.
	(procedure Add_Edge): Remove redundant assertions.
	(Activates_Task): Other kinds of edges can have
	Activates_Task=True.  For example, if we had a With_Edge and
	then an Invocation_Edge with Activates_Task=True, then the
	With_Edge has Activates_Task set to True.
	(Add_Edge_Kind_Check): New procedure to prevent other bugs of
	this nature. For example, if we were to sometimes call Add_Edge
	for a Spec_Before_Body_Edge followed by Add_Edge for a
	With_Edge, and sometimes in the other order, that would cause a
	similar bug to what we're fixing here.
	(Set_Is_Recorded_Edge): Val parameter is not used. Get rid of
	it.
	(Set_Activates_Task): New procedure to set the Activates_Task flag.
	* bindo-graphs.ads (Library_Graph_Edge_Kind): Reorder the
	enumeration literals to facilitate Add_Edge_Kind_Check.
	* ali.adb (Known_ALI_Lines): The comment about "still available"
	was wrong. Fix that by erasing the comment, and encoding the
	relevant information in real code. Take advantage of Ada's full
	coverage rules by removing "others =>".  Also DRY.

2020-06-08  Ed Schonberg  <schonberg@adacore.com>

	* par-ch12.adb (P_Formal_Derived_Type_Definition): Handle
	properly formal derived types that include aspect
	specifications, so that the "with" keyword appears twice in the
	formal type declaration.
	* sem_ch13.adb (Has_Generic_Parent): Return true if the type
	itself is a generic formal.

2020-06-08  Dmitriy Anisimkov  <anisimko@adacore.com>

	* socket.c (__gnat_minus_500ms): Remove
	IsWindowsVersionOrGreater from condition.

2020-06-08  Claire Dross  <dross@adacore.com>

	* libgnat/a-cfdlli.ads, libgnat/a-cfhama.ads,
	libgnat/a-cfhase.ads, libgnat/a-cforma.ads, libgnat/a-cforse.ads
	(Delete): Add Depends contract.

2020-06-08  Arnaud Charlet  <charlet@adacore.com>

	* snames.ads-tmpl (Name_Program_Error_Check,
	Name_Tasking_Check): New constants.
	* types.ads (Program_Error_Check, Tasking_Check): New constants.
	(All_Checks): Update accordingly.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* sem_prag.adb (Validate_Compile_Time_Warning_Or_Error): Use ??.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* cstand.adb (Create_Standard): Update comments.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* scng.adb (Scan): Fix typo to take into account all future
	versions of Ada.
	* sem_attr.ads (Attribute_Impl_Def): Add Attribute_Reduce for
	now.
	* sem_attr.adb (Analyze_Attribute): Only allow 'Reduce under
	-gnatX.
	* snames.ads-tmpl (Name_Reduce): Update comment.

2020-06-05  Thomas Quinot  <quinot@adacore.com>

	* exp_disp.adb (Expand_Interface_Thunk): Add comment about
	gnatcov reliance on specific name used for thunks.

2020-06-05  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch3.adb (Analyze_Subtype_Declaration): For scalar types,
	and for subtype declarations without a constraint, subtype
	inherits Atomic flag from base type.

2020-06-05  Piotr Trojanek  <trojanek@adacore.com>

	* doc/gnat_rm/implementation_defined_attributes.rst (Enum_Rep):
	Remove extra colon.
	* gnat_rm.texi: Regenerate.

2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>

	* atree.adb (New_Copy): Clear Has_Dynamic_Range_Check on
	subexpression nodes.
	* checks.adb (Append_Range_Checks): Assert that the node
	doesn't have the Has_Dynamic_Range_Check flag set.
	(Insert_Range_Checks): Likewise.
	* exp_ch3.adb (Expand_N_Subtype_Indication): Do not apply
	range checks for a full type or object declaration.
	* sem_ch3.ads: Move with and use clauses for Nlists to...
	(Process_Range_Expr_In_Decl): Change default to No_List for
	the Check_List parameter.
	* sem_ch3.adb: ...here.
	(Process_Range_Expr_In_Decl): Likewise.  When the insertion
	node is a declaration, only insert on the list if is present
	when the declaration involves discriminants, and only insert
	on the node when there is no list otherwise.

2020-06-05  Piotr Trojanek  <trojanek@adacore.com>

	* sem_aggr.adb (Resolve_Record_Aggregate): Create the
	N_Aggregate node with its Expressions field set to No_List and
	not to an empty list.

2020-06-05  Dmitriy Anisimkov  <anisimko@adacore.com>

	* libgnat/s-os_lib.adb (Is_Dirsep): Moved from Build_Path to
	package level to reuse.
	(Normalize_Pathname.Final_Value): Reduce 2 'if' statements to
	one.
	(Normalize_Pathname.Fill_Directory): New procedure instead of
	function Get_Directory. Remove slash to backslash conversion and
	drive letter uppercasing on Windows.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* sem.adb (Assert_Done): Relax check for main unit, as it was
	overzealous in the case of the main unit itself.

2020-06-05  Piotr Trojanek  <trojanek@adacore.com>

	* exp_ch3.adb, sem_ch8.adb, sem_util.adb: Use Is_Incomplete_Type
	to make the code easier to read.

2020-06-05  Piotr Trojanek  <trojanek@adacore.com>

	* einfo.adb: Minor reformatting.
	* sem_util.adb (Has_Full_Default_Initialization,
	Is_Partially_Initialized_Type, Caller_Known_Size_Record,
	Large_Max_Size_Mutable): Iterate with
	First_Component/Next_Component; rename Ent to Comp.

2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Use
	Expr_Rep_Value instead of Expr_Value to obtain the equivalent
	integer value.
	* sem_eval.ads (Expr_Value): Document more supported cases.
	* sem_eval.adb (Expr_Rep_Value): Copy missing cases from
	Exp_Value.

2020-06-05  Bob Duff  <duff@adacore.com>

	* rtsfind.adb, rtsfind.ads: Move subtypes of RTU_Id into package
	body, because they are not needed by clients. Change "Child_" to
	"Descendant", because grandchildren and great grandchildren are
	involved.  Replace all the repetitive comments with a single
	concise one.  Change the parent subtypes to be more consistent;
	use the most specific parent.

2020-06-05  Piotr Trojanek  <trojanek@adacore.com>

	* rtsfind.ads, rtsfind.adb (Is_Text_IO_Special_Package): Moved
	from the GNATprove backend to the frontend.

2020-06-05  Yannick Moy  <moy@adacore.com>

	* sem_util.ads: Add comment about function only used in
	CodePeer.

2020-06-05  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch9.adb, (Analyze_Task_Body): After analying the task
	body, indicate that all local variables have no delayed aspects.
	This prevents improper later calls to
	Check_Aspect_At_End_Of_Declarations, that would happen when the
	constructed task_procedure body (generated during expansion) is
	analyzed. The legality of aspect specifications that may appear
	on local declarations has already been established, and it is in
	general not possible to recheck them properly during expansion,
	when visibility may not be fully established.

2020-06-05  Piotr Trojanek  <trojanek@adacore.com>

	* libgnat/a-cofuve.ads (First): Add Global contract.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* sem_prag.adb (Set_Convention_From_Pragma): Set the convention
	of anonymous access array components.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/a-calfor.ads, libgnat/a-catizo.ads,
	libgnat/a-catizo.adb (Local_Time_Offset, Local_Image): New.
	(UTC_Time_Offset): Now a renaming of Local_Time_Offset.

2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch3.adb (Available_Full_View): New function returning
	either the full or the underlying full view.
	(Build_Full_Derivation): Add guard for the full view.
	(Copy_And_Build): Retrieve the underlying full view, if any,
	also if deriving a completion.
	(Build_Derived_Private_Type): Use Available_Full_View throughout
	to decide whether a full derivation must be done.

2020-06-05  Bob Duff  <duff@adacore.com>

	* exp_attr.adb, exp_ch11.adb, exp_imgv.adb, exp_tss.ads,
	par-ch4.adb, sem_attr.adb, sem_util.ads: Misc cleanup.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/a-nudira.ads, libgnat/a-nudira.adb (Random): New
	function.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* sem_attr.ads (Attribute_Impl_Def): Remove Enum_Rep/Val.
	* sem_attr.adb (Attribute_20): New, move Enum_Rep/Val here.
	(Analyze_Attribute): Take Attribute_20 into account.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* restrict.ads (Unit_Array): Add a-direct.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/s-stopoo.ads: Mark package Pure and leave room for
	Nonblocking once this aspect is supported.

2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_attr.adb (Expand_N_Attribute_Reference) <Valid_Scalars>:
	Set the No_Truncation flag on the unchecked conversion built for
	scalar types.

2020-06-05  Bob Duff  <duff@adacore.com>

	* einfo.adb, einfo.ads, exp_util.adb: Remove Invariants_Ignored
	flag.
	* sem_prag.adb (Invariant): Instead of setting a flag to be
	checked elsewhere, remove the pragma as soon as it is analyzed
	and checked for legality.

2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>

	* checks.ads (Apply_Length_Check): Rename Ck_Node parameter to
	Expr.
	(Apply_Range_Check): Likewise.
	(Get_Range_Checks): Likewise.
	* checks.adb (Apply_Float_Conversion_Check): Likewise.
	(Apply_Selected_Length_Checks): Likewise.
	(Apply_Selected_Range_Checks): Likewise.
	(Guard_Access): Likewise.
	(Selected_Length_Checks): Likewise.  Also avoid shadowing in
	child procedures.
	(Selected_Range_Checks): Likewise.

2020-06-05  Arnaud Charlet  <charlet@adacore.com>

	* par-ch3.adb, par-ch4.adb, scng.adb, sem_aggr.adb,
	sem_ch10.adb, sem_ch12.adb, sem_prag.adb: Update wording: change
	Ada_2020 to Ada 2020 in comments and mention -gnat2020 instead
	of -gnatX switch.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/i-c.ads (long_long, unsigned_long_long): New
	definitions.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* Makefile.rtl: add a-tasini object
	* impunit.adb (Non_Imp_File_Names_95): Add s-tasini.
	* libgnarl/a-tasini.ads, libgnarl/a-tasini.adb: New files.
	* libgnarl/s-taskin.ads (Global_Initialization_Handler): New.
	* libgnarl/s-tassta.adb (Task_Wrapper): Call
	Global_Initialization_Handler if non null.

2020-06-04  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch12.adb (Build_Suprogram_Body_Wrapper,
	Build_Subprogram_Decl_Wrapper): New suprograms, to create the
	wrappers needed to implement contracts on formsl subprograms at
	the point of instantiation.
	(Build_Subprogram_Wrappers): New subprogram within
	Analyze_Associations, calls the above when the formal subprogram
	has contracts, and expansion is enabled.
	(Instantiate_Formal_Subprogram): If the actual is not an entity,
	such as a function attribute, or a synchronized operation,
	create a function with an internal name and call it within the
	wrapper.
	(Analyze_Generic_Formal_Part): Analyze contracts at the end of
	the list of formal declarations.
	* sem_prag.adb (Analyze_Pre_Post_Condtion): In Ada_2020 the
	aspect and corresponding pragma can appear on a formal
	subprogram declaration.
	(Find_Related_Declaration_Or_Body): Ditto.

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_ch7.adb (Make_Final_Call): Set the type of the object, if
	it is unanalyzed, before calling Convert_View on it.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* adabkend.adb, back_end.ads, opt.ads, sem_ch6.adb: Get rid of
	Disable_FE_Inline_Always.

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_ch7.adb (Make_Final_Call): Add missing guard.
	* sem_ch3.adb (Copy_And_Build): Adjust recursive call for
	private types.
	(Build_Derived_Private_Type): Deal with underlying full views.

2020-06-04  Bob Duff  <duff@adacore.com>

	* libgnat/a-stobbu.adb, libgnat/a-stobbu.ads,
	libgnat/a-stobfi.adb, libgnat/a-stobfi.ads,
	libgnat/a-stoubu.adb, libgnat/a-stoubu.ads,
	libgnat/a-stoufi.adb, libgnat/a-stoufi.ads,
	libgnat/a-stoufo.adb, libgnat/a-stoufo.ads,
	libgnat/a-stouut.adb, libgnat/a-stouut.ads,
	libgnat/a-stteou.ads, libgnat/s-putaim.adb,
	libgnat/s-putaim.ads, libgnat/s-putima.adb, libgnat/s-putima.ads
	(Ada.Strings.Text_Output and children, System.Put_Images): New
	runtime support for Put_Image.
	* gcc-interface/Make-lang.in (GNAT_ADA_OBJS): Add
	exp_put_image.o.
	* exp_put_image.adb, exp_put_image.ads: New compiler package
	that generates calls to runtime routines that implement
	Put_Image.
	* Makefile.rtl: Add object files for Ada.Strings.Text_Output and
	children and System.Put_Images.
	* aspects.adb: Simplify initialization of Canonical_Aspect.
	* aspects.ads: Improve documentation. Add Aspect_Put_Image.
	* exp_attr.adb: Add support for Put_Image, by calling routines
	in Exp_Put_Image.
	* sem_util.adb (Is_Predefined_Dispatching_Operation): Return
	True for new TSS_Put_Image operation.
	* exp_ch3.adb: For tagged types, build a dispatching
	TSS_Put_Image operation by calling routines in Exp_Put_Image.
	* exp_disp.adb, exp_disp.ads: Make TSS_Put_Image be number 10,
	adjusting other operations' numbers after 10. We choose 10
	because that's the last number shared by all runtimes.
	* exp_strm.adb: Use named notation as appropriate.
	* exp_cg.adb, exp_tss.ads: Add TSS_Put_Image.
	* libgnat/a-tags.ads: Modify Max_Predef_Prims for the new
	TSS_Put_Image.
	* impunit.adb: Add new runtime packages.
	* rtsfind.adb, rtsfind.ads: Add support for
	Ada.Strings.Text_Output, Ada.Strings.Text_Output.Utils, and
	System.Put_Images.
	* sem_attr.adb: Error checking for Put_Image calls.
	* sem_ch12.adb (Valid_Default_Attribute): Support for passing
	Put_Image as a generic formal parameter.
	* sem_ch13.adb: Analysis of Put_Image aspect. Turn it into a
	Put_Image attribute definition clause.
	* sem_ch8.adb (Analyze_Subprogram_Renaming): Support for
	renaming of the Put_Image attribute.
	* snames.adb-tmpl: Fix comments.
	* snames.ads-tmpl (Name_Put_Image): New Name_Id.
	(Attribute_Put_Image): New Attribute_Id.
	* tbuild.adb, tbuild.ads (Make_Increment): New utility.

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_attr.adb (xpand_N_Attribute_Reference) <Input>: Call
	Find_Inherited_TSS to look up the Stream_Read TSS.
	<Output>: Likewise for the Stream_Write TSS.
	* exp_ch7.adb (Make_Final_Call): Call Underlying_Type on
	private types to account for underlying full views.
	* exp_strm.ads  (Build_Record_Or_Elementary_Input_Function):
	Remove Use_Underlying parameter.
	* exp_strm.adb (Build_Record_Or_Elementary_Input_Function):
	Likewise and adjust accordingly.
	* exp_tss.adb (Find_Inherited_TSS): Deal with full views.
	Call Find_Inherited_TSS recursively on the parent type if
	the base type is a derived type.
	* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Take
	into account underlying full views for derived types.
	* sem_ch3.adb (Copy_And_Build): Look up the underlying full
	view only for a completion.  Be prepared for private types.
	(Build_Derived_Private_Type): Build an underlying full view
	for a completion in the general case too.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* back_end.adb, opt.ads, par-prag.adb, sem_ch5.adb,
	sem_prag.adb, sinfo.adb, sinfo.ads, snames.ads-tmpl,
	doc/gnat_rm/implementation_defined_pragmas.rst: Remove
	experimental support for OpenACC.
	* gcc-interface/misc.c, gcc-interface/trans.c,
	gcc-interface/lang.opt: Ditto.
	* gnat_rm.texi: Regenerate.

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* checks.adb (Generate_Discriminant_Check): Remove obsolete
	comment.

2020-06-04  Gary Dismukes  <dismukes@adacore.com>

	* par-ch3.adb (P_Identifier_Declarations): Add parsing of object
	renamings that have neither a subtype_mark nor an
	access_definition. Issue an error if the version is earlier than
	Ada_2020, and suggest using -gnatX.
	* sem_ch8.adb (Analyze_Object_Renaming): Handle
	object_renaming_declarations that don't have an explicit
	subtype. Errors are issued when the name is inappropriate or
	ambiguous, and otherwise the Etype of the renaming entity is set
	from the Etype of the renamed object.
	* sem_util.adb (Has_Null_Exclusion): Allow for the case of no
	subtype given in an N_Object_Renaming_Declaration.
	* sprint.adb (Sprint_Node_Actual): Handle printing of
	N_Object_Renaming_Declarations that are specified without an
	explicit subtype.

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* sinfo.ads (N_Delta_Aggregate): Document Etype field.
	(N_Case_Expression): Likewise.
	(Is_Syntactic_Field) <N_Quantified_Expression>: Adjust.
	<N_Case_Expression>: Likewise.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* adaint.c: Avoid redefining IS_DIR_SEPARATOR macro.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* sem.adb (Walk_Library_Items): Defer processing of main spec
	after all other specs and before processing bodies.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* bindgen.adb (Gen_Adafinal): Adafinal is convention Ada, not C.

2020-06-04  Ed Schonberg  <schonberg@adacore.com>

	* sinput.adb (Sloc_Range): Ignore node in the tree if it appears
	in a unit different from that of the node whose Sloc range we
	are computing. This is necessary when computing the source range
	of a subprogram body whose declaration includes a pre- or
	postcondition, because declaration and body may appear in
	different units, and the expanded code for the body includes
	copies of the contract code.

2020-06-04  Alexandre Oliva  <oliva@adacore.com>

	* switch.adb (Is_Internal_GCC_Switch): Recognize dumpdir and
	dumpbase-ext.  Mark auxbase and auxbase-strip for removal.

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_attr.adb (Resolve_Attribute) <Access>: Do not generate
	the secondary message about a missing pragma if the convention
	of the prefix is Intrinsic.
	* sem_ch12.adb (Instantiate_Formal_Subprogram): Only set the
	Convention and the Is_Inlined flag on a null procedure.

2020-06-04  Justin Squirek  <squirek@adacore.com>

	* sem_ch6.adb (Check_Return_Obj_Accessibility): Change to
	Check_Return_Construct_Accessibility to better reflect its
	purpose.  Add loop to properly obtain the object declaration
	from an expanded extended return statement and add calls to get
	the original node for associated values. Also, avoid checks when
	the return statement being examined comes from an internally
	generated function.

2020-06-04  Dmitriy Anisimkov  <anisimko@adacore.com>

	* adaint.c (__gnat_is_absolute_path): Check for directory
	separator after drive and colon.
	(IS_DIR_SEPARATOR): Define new inline substitution.

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* checks.ads: Update documentation about range checks and fix
	minor other things.

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch3.adb (Array_Type_Declaration): Apply special handling
	of private index types to generic packages and restrict it to
	index types defined in the current scope.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/a-exextr.adb (Global_Unhandled_Action): New global
	variable.
	(Notify_Exception): Take into account Global_Unhandled_Action
	and fix latent race condition.
	(Exception_Action): Mark Favor_Top_Level so that variables can
	be atomic.
	(Global_Action): Mark atomic to remove the need for a lock.
	* libgnat/g-excact.ads, libgnat/g-excact.adb
	(Register_Global_Unhandled_Action): New procedure.
	(Register_Global_Action): Remove lock.
	* libgnat/s-stalib.ads (Raise_Action): Mark Favor_Top_Level to
	be compatible with Exception_Action.
	* sem_warn.adb (Warn_On_Unreferenced_Entity): Fix logic wrt
	Volatile entities and entities with an address clause: the code
	did not match the comment/intent.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* comperr.adb (Compiler_Abort): Update URL and bug report
	instructions.

2020-06-04  Steve Baird  <baird@adacore.com>

	* libgnat/s-imgrea.ads: Declare a named number
	Max_Real_Image_Length with value 5200.  Provide a comment
	explaining why this value was chosen.
	* libgnat/s-imgrea.adb (Set_Image_Real): Increase the upper
	bound of the local String variable Digs to
	Max_Real_Image_Length.
	* libgnat/a-tiflau.adb (Put): Increase the upper bound of the
	local String variable Buf to Max_Real_Image_Length.
	(Puts): Increase the upper bound of the local String variable
	Buf to Max_Real_Image_Length.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* libgnarl/a-dynpri.adb, libgnarl/a-taside.adb,
	libgnarl/a-taster.adb, libgnarl/s-interr.adb,
	libgnarl/s-interr__sigaction.adb, libgnarl/s-taasde.adb,
	libgnarl/s-taenca.adb, libgnarl/s-taenca.ads,
	libgnarl/s-taprop.ads, libgnarl/s-taprop__hpux-dce.adb,
	libgnarl/s-taprop__linux.adb, libgnarl/s-taprop__mingw.adb,
	libgnarl/s-taprop__posix.adb, libgnarl/s-taprop__qnx.adb,
	libgnarl/s-taprop__solaris.adb, libgnarl/s-taprop__vxworks.adb,
	libgnarl/s-tarest.adb, libgnarl/s-tasini.adb,
	libgnarl/s-tasque.adb, libgnarl/s-tasque.ads,
	libgnarl/s-tasren.adb, libgnarl/s-tasren.ads,
	libgnarl/s-tassta.adb, libgnarl/s-tasuti.adb,
	libgnarl/s-tasuti.ads, libgnarl/s-tpoben.adb,
	libgnarl/s-tpobop.adb, libgnarl/s-tpopmo.adb,
	libgnarl/s-tposen.adb, libgnat/s-parame.ads,
	libgnat/s-parame__ae653.ads, libgnat/s-parame__hpux.ads,
	libgnat/s-parame__vxworks.ads: Remove references to Single_Lock
	and Global_Lock.

2020-06-04  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/s-atopar.adb, libgnat/s-atopex.adb: Use Object_Size
	instead of Size, otherwise many derived types will be rejected
	(e.g. a type with a 14 bits 'Size and a 16 bits 'Object_Size).

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch12.adb (Copy_Generic_Node): Add special handling for a
	conversion between access types.

2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch12.adb (Check_Generic_Actuals): Also restore the proper
	views of the actuals of the parent instances if the formals are
	used as actuals of the children.
	(Instantiate_Type): Add comment.

2020-06-04  Gary Dismukes  <dismukes@adacore.com>

	* sem_ch12.adb: Minor editorial fixes.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch12.adb (Denotes_Previous_Actual): Delete.
	(Check_Generic_Actuals): Do not special case array types whose
	component type denotes a previous actual.  Do not special case
	access types whose base type is private.
	(Check_Private_View): Remove code dealing with secondary types.
	Do not switch the views of an array because of its component.
	(Copy_Generic_Node): Add special handling for a comparison
	operator on array types.
	(Instantiate_Type): Do not special case access types whose
	designated type is private.
	(Set_Global_Type): Do not special case array types whose
	component type is private.

2020-06-03  Justin Squirek  <squirek@adacore.com>

	* sem_ch10.adb (Process_Body_Clauses): Add loop to interate
	through all prefixes in a use_type clause so that all packages
	in the expanded name get examined for effectiveness.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch12.adb (Check_Private_View): Clean up implementation of
	second main case, when the generic sees the private declaration.

2020-06-03  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/a-nbnbin.ads: Minor reformatting.
	* libgnat/a-nbnbre.ads, libgnat/a-nbnbre.adb (Is_Valid): Add
	convention Intrinsic. Add detection of uninitialized big reals.

2020-06-03  Arnaud Charlet  <charlet@adacore.com>

	* sem_util.ads, sem_util.adb (Side_Effect_Free_Statements,
	Side_Effect_Free_Loop): New functions.
	(Has_Non_Null_Statements): Consider N_Call_Marker as a null
	statement.
	* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Call
	Set_Is_Null_Loop even inside a generic instantiation.
	(Analyze_Loop_Statement): Mark for removal loops with no side
	effects.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* opt.ads (Allow_Integer_Address): Fix typo in comment.
	* stand.ads (Standard_Address): New entity.
	* cstand.adb (Create_Standard): Create it.
	* sem_ch4.adb (Operator_Check): Convert the operands of an
	operation with addresses and integers to Standard_Address
	if pragma Allow_Integer_Address is in effect.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* libgnat/s-atopar.adb (Atomic_Fetch_And_Add): Make use of an
	equivalent static expression.
	(Atomic_Fetch_And_Subtract): Likewise.
	(Is_Lock_Free): Likewise.
	* libgnat/s-atopex.adb (Atomic_Exchange): Likewise.
	(Atomic_Compare_And_Exchange): Likewise.
	(Is_Lock_Free): Likewise.

2020-06-03  Vadim Godunko  <godunko@adacore.com>

	* libgnat/s-parame.ads, libgnat/s-parame__ae653.ads,
	libgnat/s-parame__hpux.ads: Fix typos.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_util.adb (Remove_Side_Effects): For a type conversion, do
	not remove the side effects of the expression only if it is of
	universal integer type.

2020-06-03  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/s-aotase.ads, libgnat/s-atoope.ads,
	libgnat/s-atopar.ads, libgnat/s-atopex.ads: Update header.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_ch4.adb (Expand_N_Unchecked_Type_Conversion): Also fold the
	conversion for literals of enumeration types.

2020-06-03  Yannick Moy  <moy@adacore.com>

	* rtsfind.adb (Load_RTU): Correctly set/reset global variable to
	ignore SPARK_Mode in instances around loading.
	* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Accept Off
	without prior On.
	* sem_ch7.adb (Analyze_Package_Body_Helper): Likewise.
	* sem_prag.adb (Analyze_Pragma): Always take into account
	SPARK_Mode Off.

2020-06-03  Arnaud Charlet  <charlet@adacore.com>

	* frontend.adb (Frontend): Call (dummy for now) tree checker.
	* debug.adb: Reserve -gnatd_V for the tree checker.
	* vast.ads, vast.adb: New files.
	* gcc-interface/Make-lang.in: Add vast.o.

2020-06-03  Justin Squirek  <squirek@adacore.com>

	* libgnat/a-cborse.adb, libgnat/a-cihase.adb,
	libgnat/a-ciorse.adb, libgnat/a-coorse.adb: Modified to use
	'Unrestricted_Access in certain cases where static accessibility
	errors were triggered.
	* exp_ch6.adb (Expand_Simple_Return_Statement): Add generation
	of dynamic accessibility checks as determined by
	Is_Special_Aliased_Formal_Access.
	* sem_attr.adb (Resolve_Attribute): Add call to
	Is_Special_Aliased_Formal_Access to avoid performing static
	checks where dynamic ones are required.
	* sem_ch6.adb (Check_Return_Obj_Accessibility): Handle renamed
	objects within component associations requiring special
	accessibility checks.
	* sem_util.adb, sem_util.ads (Is_Special_Aliased_Formal_Access):
	Created to detect the special case where an aliased formal is
	being compared against the level of an anonymous access return
	object.
	(Object_Access_Level): Remove incorrect condition leading to
	overly permissive accessibility levels being returned on
	explicitly aliased parameters.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* einfo.ads (Enum_Pos_To_Rep): Adjust description.
	* exp_attr.adb (Expand_N_Attribute_Reference) <Pred>:
	Reimplement in the case of an enumeration type with non-standard
	but contiguous representation.
	<Succ>: Likewise.
	<Val>: Likewise.
	* exp_ch3.adb (Expand_Freeze_Enumeration_Type): Count the
	literals in the first loop.  If the representation is
	contiguous, just build the index type of the array type and set
	Enum_Pos_To_Rep to it.

2020-06-03  Gary Dismukes  <dismukes@adacore.com>

	* exp_attr.adb (Expand_Loop_Entry_Attribute): Revise loop that
	resets the scopes of entities associated with Loop_Id to the
	scope of the new function, so the resetting is not restricted to
	itypes, but excludes loop parameters and the function entity
	itself. However, this fix is believed to be incomplete and a ???
	comment is added to indicate that.

2020-06-03  Bob Duff  <duff@adacore.com>

	* libgnat/s-regexp.ads: Fix comment

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_attr.adb (Expand_N_Attribute_Reference) <Enum_Rep>:
	In the case of an enumeration type, do an intermediate
	conversion to a small integer type.  Remove useless stuff.
	<Finalization_Size>: Do not hardcode Universal_Integer and
	fix a type mismatch in the assignment to the variable.
	<Max_Size_In_Storage_Elements>: Likewise.
	<From_Any>: Do not redefine the Ptyp local variable.
	<To_Any>: Likewise.
	<TypeCode>: Likewise.
	<Pos>: Small tweaks.
	<Val>: For an enumeration type with standard representation,
	apply the range check to the expression of a convertion to
	Universal_Integer, if any.  For an integer type, expand to
	a mere conversion.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* libgnat/s-rannum.adb (Random_Discrete): In the 32-bit case,
	use the same linear implementation as in the 64-bit case when
	the type has a contiguous representation.

2020-06-03  Gary Dismukes  <dismukes@adacore.com>

	* sem_util.adb (Build_Class_Wide_Clone_Decl): Call
	Set_Debug_Info_Needed to set the Needs_Debug_Info flag on
	Clone_Id if the flag is set on Spec_Id.

2020-06-03  Yannick Moy  <moy@adacore.com>

	* inline.adb (Expand_Inlined_Call): Do not suppress checks on
	inlined code in GNATprove mode.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* einfo.ads (Has_Contiguous_Rep): Fix typo in comment.

2020-06-03  Piotr Trojanek  <trojanek@adacore.com>

	* checks.adb, einfo.adb, exp_aggr.adb, exp_ch4.adb, exp_ch6.adb,
	exp_unst.adb, exp_util.adb, freeze.adb, inline.adb, repinfo.adb,
	sem_aggr.adb, sem_attr.adb, sem_aux.adb, sem_ch13.adb,
	sem_ch3.adb, sem_ch4.adb, sem_ch8.adb, sem_elab.adb,
	sem_eval.adb, sem_prag.adb, sem_res.adb, sem_smem.adb,
	sem_util.adb, treepr.adb: Replace uses of Next_ functions with
	corresponding procedures.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_attr.adb (Attribute_Valid): Use Standard_Long_Long_Integer
	in lieu of Universal_Integer as large integer type.
	* exp_ch3.adb (Expand_Freeze_Enumeration_Type): Likewise.

2020-06-03  Arnaud Charlet  <charlet@adacore.com>

	* libgnat/s-auxdec.ads (Address_Int): New.

2020-06-03  Arnaud Charlet  <charlet@adacore.com>

	* aspects.adb, aspects.ads, atree.adb, atree.ads, elists.adb,
	elists.ads, fname.adb, fname.ads, gnat1drv.adb, lib.adb,
	lib.ads, namet.adb, namet.ads, nlists.adb, nlists.ads, opt.adb,
	opt.ads, osint-c.adb, osint-c.ads, repinfo.adb, repinfo.ads,
	sem_aux.adb, sem_aux.ads, sinput.adb, sinput.ads, stand.ads,
	stringt.adb, stringt.ads, switch-c.adb, table.adb, table.ads,
	uintp.adb, uintp.ads, urealp.adb, urealp.ads (Tree_Read,
	Tree_Write): Remove generation of ASIS trees.
	* doc/gnat_ugn/building_executable_programs_with_gnat.rst:
	Remove -gnatt and -gnatct documentation.
	* gnat_ugn.texi: Regenerate.
	* tree_in.ads, tree_in.adb, tree_io.ads, tree_io.adb,
	tree_gen.ads, tree_gen.adb, stand.adb: Remove.
	* gcc-interface/Makefile.in, gcc-interface/Make-lang.in: Remove
	references to tree_gen.o tree_in.o tree_io.o.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* opt.ads (Disable_FE_Inline): Move around.
	(Disable_FE_Inline_Always): Likewise.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* checks.adb (Is_Single_Attribute_Reference): New predicate.
	(Generate_Range_Check): Do not force the evaluation if the
	node is a single attribute reference.
	* exp_util.adb (Side_Effect_Free_Attribute): New predicate.
	(Side_Effect_Free) <N_Attribute_Reference>: Call it.
	(Remove_Side_Effects): Remove the side effects of the prefix
	for an attribute reference whose prefix is not a name.

2020-06-03  Arnaud Charlet  <charlet@adacore.com>

	* switch-c.adb (Scan_Front_End_Switches): Remove processing of
	-gnatt.
	* usage.adb (Usage): Remove mention of -gnatt.

2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>

	* sinfo.ads: Minor tweaks in commentary.

2020-06-02  Alexandre Oliva  <oliva@adacore.com>

	* lib.ads (Compilation_Switches): Remove -auxbase from
	comments.
	* switch.ads (Is_Internal_GCC_Switch): Likewise.

2020-06-02  Arnaud Charlet  <charlet@adacore.com>

	* atree.ads, checks.adb, contracts.adb, debug.adb, einfo.ads,
	exp_ch3.adb, exp_util.adb, expander.ads, expander.adb,
	frontend.adb, gnat1drv.adb, itypes.adb, lib.ads, namet.ads,
	opt.adb, opt.ads, par-prag.adb, repinfo.ads, sem_aggr.adb,
	sem_aux.ads, sem_case.ads, sem_ch10.adb, sem_ch12.adb,
	sem_ch13.adb, sem_ch3.adb, sem_ch4.adb, sem_ch6.adb,
	sem_dim.adb, sem_elab.adb, sem_prag.adb, sem_prag.ads,
	sem_res.adb, sem_type.adb, sem_util.adb, sinfo.ads, stand.ads,
	tree_io.ads: Remove references to ASIS_Mode.

2020-06-02  Javier Miranda  <miranda@adacore.com>

	* exp_ch4.adb (Generate_Temporary): New subprogram of
	Discrete_Range_Check that generates a temporary to facilitate
	the C backend the code generation of the unchecked conversion
	since the size of the source type may differ from the size of
	the target type.

2020-06-02  Arnaud Charlet  <charlet@adacore.com>

	* ada_get_targ.adb: Bump copyright year.
	* adabkend.adb: Likewise.
	* adabkend.ads: Likewise.
	* adadecode.c: Likewise.
	* adadecode.h: Likewise.
	* adaint.c: Likewise.
	* adaint.h: Likewise.
	* affinity.c: Likewise.
	* ali-util.adb: Likewise.
	* ali-util.ads: Likewise.
	* ali.adb: Likewise.
	* ali.ads: Likewise.
	* alloc.ads: Likewise.
	* argv-lynxos178-raven-cert.c: Likewise.
	* argv.c: Likewise.
	* aspects.adb: Likewise.
	* aspects.ads: Likewise.
	* atree.adb: Likewise.
	* atree.ads: Likewise.
	* atree.h: Likewise.
	* aux-io.c: Likewise.
	* back_end.adb: Likewise.
	* back_end.ads: Likewise.
	* bcheck.adb: Likewise.
	* bcheck.ads: Likewise.
	* binde.adb: Likewise.
	* binde.ads: Likewise.
	* binderr.adb: Likewise.
	* binderr.ads: Likewise.
	* bindgen.adb: Likewise.
	* bindgen.ads: Likewise.
	* bindo-augmentors.adb: Likewise.
	* bindo-augmentors.ads: Likewise.
	* bindo-builders.adb: Likewise.
	* bindo-builders.ads: Likewise.
	* bindo-diagnostics.adb: Likewise.
	* bindo-diagnostics.ads: Likewise.
	* bindo-elaborators.adb: Likewise.
	* bindo-elaborators.ads: Likewise.
	* bindo-graphs.adb: Likewise.
	* bindo-graphs.ads: Likewise.
	* bindo-units.adb: Likewise.
	* bindo-units.ads: Likewise.
	* bindo-validators.adb: Likewise.
	* bindo-validators.ads: Likewise.
	* bindo-writers.adb: Likewise.
	* bindo-writers.ads: Likewise.
	* bindo.adb: Likewise.
	* bindo.ads: Likewise.
	* bindusg.adb: Likewise.
	* bindusg.ads: Likewise.
	* butil.adb: Likewise.
	* butil.ads: Likewise.
	* cal.c: Likewise.
	* casing.adb: Likewise.
	* casing.ads: Likewise.
	* ceinfo.adb: Likewise.
	* checks.adb: Likewise.
	* checks.ads: Likewise.
	* cio.c: Likewise.
	* clean.adb: Likewise.
	* clean.ads: Likewise.
	* comperr.adb: Likewise.
	* comperr.ads: Likewise.
	* contracts.adb: Likewise.
	* contracts.ads: Likewise.
	* csets.adb: Likewise.
	* csets.ads: Likewise.
	* csinfo.adb: Likewise.
	* cstand.adb: Likewise.
	* cstand.ads: Likewise.
	* cstreams.c: Likewise.
	* ctrl_c.c: Likewise.
	* debug.adb: Likewise.
	* debug.ads: Likewise.
	* debug_a.adb: Likewise.
	* debug_a.ads: Likewise.
	* einfo.adb: Likewise.
	* einfo.ads: Likewise.
	* elists.adb: Likewise.
	* elists.ads: Likewise.
	* elists.h: Likewise.
	* env.c: Likewise.
	* env.h: Likewise.
	* err_vars.ads: Likewise.
	* errno.c: Likewise.
	* errout.adb: Likewise.
	* errout.ads: Likewise.
	* erroutc.adb: Likewise.
	* erroutc.ads: Likewise.
	* errutil.adb: Likewise.
	* errutil.ads: Likewise.
	* eval_fat.adb: Likewise.
	* eval_fat.ads: Likewise.
	* exit.c: Likewise.
	* exp_aggr.adb: Likewise.
	* exp_aggr.ads: Likewise.
	* exp_atag.adb: Likewise.
	* exp_atag.ads: Likewise.
	* exp_attr.adb: Likewise.
	* exp_attr.ads: Likewise.
	* exp_cg.adb: Likewise.
	* exp_cg.ads: Likewise.
	* exp_ch10.ads: Likewise.
	* exp_ch11.adb: Likewise.
	* exp_ch11.ads: Likewise.
	* exp_ch12.adb: Likewise.
	* exp_ch12.ads: Likewise.
	* exp_ch13.adb: Likewise.
	* exp_ch13.ads: Likewise.
	* exp_ch2.adb: Likewise.
	* exp_ch2.ads: Likewise.
	* exp_ch3.adb: Likewise.
	* exp_ch3.ads: Likewise.
	* exp_ch4.adb: Likewise.
	* exp_ch4.ads: Likewise.
	* exp_ch5.adb: Likewise.
	* exp_ch5.ads: Likewise.
	* exp_ch6.adb: Likewise.
	* exp_ch6.ads: Likewise.
	* exp_ch7.adb: Likewise.
	* exp_ch7.ads: Likewise.
	* exp_ch8.adb: Likewise.
	* exp_ch8.ads: Likewise.
	* exp_ch9.adb: Likewise.
	* exp_ch9.ads: Likewise.
	* exp_code.adb: Likewise.
	* exp_code.ads: Likewise.
	* exp_dbug.adb: Likewise.
	* exp_dbug.ads: Likewise.
	* exp_disp.adb: Likewise.
	* exp_disp.ads: Likewise.
	* exp_dist.adb: Likewise.
	* exp_dist.ads: Likewise.
	* exp_fixd.adb: Likewise.
	* exp_fixd.ads: Likewise.
	* exp_imgv.adb: Likewise.
	* exp_imgv.ads: Likewise.
	* exp_intr.adb: Likewise.
	* exp_intr.ads: Likewise.
	* exp_pakd.adb: Likewise.
	* exp_pakd.ads: Likewise.
	* exp_prag.adb: Likewise.
	* exp_prag.ads: Likewise.
	* exp_sel.adb: Likewise.
	* exp_sel.ads: Likewise.
	* exp_smem.adb: Likewise.
	* exp_smem.ads: Likewise.
	* exp_spark.adb: Likewise.
	* exp_spark.ads: Likewise.
	* exp_strm.adb: Likewise.
	* exp_strm.ads: Likewise.
	* exp_tss.adb: Likewise.
	* exp_tss.ads: Likewise.
	* exp_unst.adb: Likewise.
	* exp_unst.ads: Likewise.
	* exp_util.adb: Likewise.
	* exp_util.ads: Likewise.
	* expander.adb: Likewise.
	* expander.ads: Likewise.
	* expect.c: Likewise.
	* fe.h: Likewise.
	* final.c: Likewise.
	* fmap.adb: Likewise.
	* fmap.ads: Likewise.
	* fname-sf.adb: Likewise.
	* fname-sf.ads: Likewise.
	* fname-uf.adb: Likewise.
	* fname-uf.ads: Likewise.
	* fname.adb: Likewise.
	* fname.ads: Likewise.
	* freeze.adb: Likewise.
	* freeze.ads: Likewise.
	* frontend.adb: Likewise.
	* frontend.ads: Likewise.
	* get_scos.adb: Likewise.
	* get_scos.ads: Likewise.
	* get_targ.adb: Likewise.
	* get_targ.ads: Likewise.
	* ghost.adb: Likewise.
	* ghost.ads: Likewise.
	* gnat1drv.adb: Likewise.
	* gnat1drv.ads: Likewise.
	* gnatbind.adb: Likewise.
	* gnatbind.ads: Likewise.
	* gnatchop.adb: Likewise.
	* gnatclean.adb: Likewise.
	* gnatcmd.adb: Likewise.
	* gnatcmd.ads: Likewise.
	* gnatdll.adb: Likewise.
	* gnatfind.adb: Likewise.
	* gnatkr.adb: Likewise.
	* gnatkr.ads: Likewise.
	* gnatlink.adb: Likewise.
	* gnatlink.ads: Likewise.
	* gnatls.adb: Likewise.
	* gnatls.ads: Likewise.
	* gnatmake.adb: Likewise.
	* gnatmake.ads: Likewise.
	* gnatname.adb: Likewise.
	* gnatname.ads: Likewise.
	* gnatprep.adb: Likewise.
	* gnatprep.ads: Likewise.
	* gnatvsn.adb: Likewise.
	* gnatxref.adb: Likewise.
	* gprep.adb: Likewise.
	* gprep.ads: Likewise.
	* gsocket.h: Likewise.
	* hostparm.ads: Likewise.
	* impunit.adb: Likewise.
	* impunit.ads: Likewise.
	* indepsw-aix.adb: Likewise.
	* indepsw-darwin.adb: Likewise.
	* indepsw-gnu.adb: Likewise.
	* indepsw.adb: Likewise.
	* indepsw.ads: Likewise.
	* init.c: Likewise.
	* initialize.c: Likewise.
	* inline.adb: Likewise.
	* inline.ads: Likewise.
	* itypes.adb: Likewise.
	* itypes.ads: Likewise.
	* krunch.adb: Likewise.
	* krunch.ads: Likewise.
	* layout.adb: Likewise.
	* layout.ads: Likewise.
	* lib-list.adb: Likewise.
	* lib-load.adb: Likewise.
	* lib-load.ads: Likewise.
	* lib-sort.adb: Likewise.
	* lib-util.adb: Likewise.
	* lib-util.ads: Likewise.
	* lib-writ.adb: Likewise.
	* lib-writ.ads: Likewise.
	* lib-xref-spark_specific.adb: Likewise.
	* lib-xref.adb: Likewise.
	* lib-xref.ads: Likewise.
	* lib.adb: Likewise.
	* lib.ads: Likewise.
	* libgnarl/a-astaco.adb: Likewise.
	* libgnarl/a-dispat.adb: Likewise.
	* libgnarl/a-dynpri.adb: Likewise.
	* libgnarl/a-etgrbu.ads: Likewise.
	* libgnarl/a-exetim__darwin.adb: Likewise.
	* libgnarl/a-exetim__default.ads: Likewise.
	* libgnarl/a-exetim__mingw.adb: Likewise.
	* libgnarl/a-exetim__mingw.ads: Likewise.
	* libgnarl/a-exetim__posix.adb: Likewise.
	* libgnarl/a-interr.adb: Likewise.
	* libgnarl/a-interr.ads: Likewise.
	* libgnarl/a-intnam.ads: Likewise.
	* libgnarl/a-intnam__aix.ads: Likewise.
	* libgnarl/a-intnam__darwin.ads: Likewise.
	* libgnarl/a-intnam__dragonfly.ads: Likewise.
	* libgnarl/a-intnam__dummy.ads: Likewise.
	* libgnarl/a-intnam__freebsd.ads: Likewise.
	* libgnarl/a-intnam__hpux.ads: Likewise.
	* libgnarl/a-intnam__linux.ads: Likewise.
	* libgnarl/a-intnam__lynxos.ads: Likewise.
	* libgnarl/a-intnam__mingw.ads: Likewise.
	* libgnarl/a-intnam__qnx.ads: Likewise.
	* libgnarl/a-intnam__rtems.ads: Likewise.
	* libgnarl/a-intnam__solaris.ads: Likewise.
	* libgnarl/a-intnam__vxworks.ads: Likewise.
	* libgnarl/a-reatim.adb: Likewise.
	* libgnarl/a-reatim.ads: Likewise.
	* libgnarl/a-retide.adb: Likewise.
	* libgnarl/a-retide.ads: Likewise.
	* libgnarl/a-rttiev.adb: Likewise.
	* libgnarl/a-rttiev.ads: Likewise.
	* libgnarl/a-synbar.adb: Likewise.
	* libgnarl/a-synbar.ads: Likewise.
	* libgnarl/a-synbar__posix.adb: Likewise.
	* libgnarl/a-synbar__posix.ads: Likewise.
	* libgnarl/a-sytaco.adb: Likewise.
	* libgnarl/a-sytaco.ads: Likewise.
	* libgnarl/a-tasatt.adb: Likewise.
	* libgnarl/a-tasatt.ads: Likewise.
	* libgnarl/a-taside.adb: Likewise.
	* libgnarl/a-taside.ads: Likewise.
	* libgnarl/a-taster.adb: Likewise.
	* libgnarl/g-boubuf.adb: Likewise.
	* libgnarl/g-boubuf.ads: Likewise.
	* libgnarl/g-boumai.ads: Likewise.
	* libgnarl/g-semaph.adb: Likewise.
	* libgnarl/g-semaph.ads: Likewise.
	* libgnarl/g-signal.adb: Likewise.
	* libgnarl/g-signal.ads: Likewise.
	* libgnarl/g-tastus.ads: Likewise.
	* libgnarl/g-thread.adb: Likewise.
	* libgnarl/g-thread.ads: Likewise.
	* libgnarl/i-vxinco.adb: Likewise.
	* libgnarl/i-vxinco.ads: Likewise.
	* libgnarl/s-inmaop.ads: Likewise.
	* libgnarl/s-inmaop__dummy.adb: Likewise.
	* libgnarl/s-inmaop__posix.adb: Likewise.
	* libgnarl/s-inmaop__vxworks.adb: Likewise.
	* libgnarl/s-interr.adb: Likewise.
	* libgnarl/s-interr.ads: Likewise.
	* libgnarl/s-interr__dummy.adb: Likewise.
	* libgnarl/s-interr__hwint.adb: Likewise.
	* libgnarl/s-interr__sigaction.adb: Likewise.
	* libgnarl/s-interr__vxworks.adb: Likewise.
	* libgnarl/s-intman.ads: Likewise.
	* libgnarl/s-intman__android.adb: Likewise.
	* libgnarl/s-intman__dummy.adb: Likewise.
	* libgnarl/s-intman__lynxos.adb: Likewise.
	* libgnarl/s-intman__mingw.adb: Likewise.
	* libgnarl/s-intman__posix.adb: Likewise.
	* libgnarl/s-intman__qnx.adb: Likewise.
	* libgnarl/s-intman__solaris.adb: Likewise.
	* libgnarl/s-intman__susv3.adb: Likewise.
	* libgnarl/s-intman__vxworks.adb: Likewise.
	* libgnarl/s-intman__vxworks.ads: Likewise.
	* libgnarl/s-linux.ads: Likewise.
	* libgnarl/s-linux__alpha.ads: Likewise.
	* libgnarl/s-linux__android.ads: Likewise.
	* libgnarl/s-linux__hppa.ads: Likewise.
	* libgnarl/s-linux__mips.ads: Likewise.
	* libgnarl/s-linux__riscv.ads: Likewise.
	* libgnarl/s-linux__sparc.ads: Likewise.
	* libgnarl/s-linux__x32.ads: Likewise.
	* libgnarl/s-mudido.adb: Likewise.
	* libgnarl/s-mudido__affinity.adb: Likewise.
	* libgnarl/s-osinte__aix.adb: Likewise.
	* libgnarl/s-osinte__aix.ads: Likewise.
	* libgnarl/s-osinte__android.adb: Likewise.
	* libgnarl/s-osinte__android.ads: Likewise.
	* libgnarl/s-osinte__darwin.adb: Likewise.
	* libgnarl/s-osinte__darwin.ads: Likewise.
	* libgnarl/s-osinte__dragonfly.adb: Likewise.
	* libgnarl/s-osinte__dragonfly.ads: Likewise.
	* libgnarl/s-osinte__dummy.ads: Likewise.
	* libgnarl/s-osinte__freebsd.adb: Likewise.
	* libgnarl/s-osinte__freebsd.ads: Likewise.
	* libgnarl/s-osinte__gnu.adb: Likewise.
	* libgnarl/s-osinte__gnu.ads: Likewise.
	* libgnarl/s-osinte__hpux-dce.adb: Likewise.
	* libgnarl/s-osinte__hpux-dce.ads: Likewise.
	* libgnarl/s-osinte__hpux.ads: Likewise.
	* libgnarl/s-osinte__kfreebsd-gnu.ads: Likewise.
	* libgnarl/s-osinte__linux.ads: Likewise.
	* libgnarl/s-osinte__lynxos178.adb: Likewise.
	* libgnarl/s-osinte__lynxos178e.ads: Likewise.
	* libgnarl/s-osinte__mingw.ads: Likewise.
	* libgnarl/s-osinte__posix.adb: Likewise.
	* libgnarl/s-osinte__qnx.adb: Likewise.
	* libgnarl/s-osinte__qnx.ads: Likewise.
	* libgnarl/s-osinte__rtems.adb: Likewise.
	* libgnarl/s-osinte__rtems.ads: Likewise.
	* libgnarl/s-osinte__solaris.adb: Likewise.
	* libgnarl/s-osinte__solaris.ads: Likewise.
	* libgnarl/s-osinte__vxworks.adb: Likewise.
	* libgnarl/s-osinte__vxworks.ads: Likewise.
	* libgnarl/s-osinte__x32.adb: Likewise.
	* libgnarl/s-proinf.adb: Likewise.
	* libgnarl/s-proinf.ads: Likewise.
	* libgnarl/s-qnx.ads: Likewise.
	* libgnarl/s-solita.adb: Likewise.
	* libgnarl/s-solita.ads: Likewise.
	* libgnarl/s-stusta.adb: Likewise.
	* libgnarl/s-stusta.ads: Likewise.
	* libgnarl/s-taasde.adb: Likewise.
	* libgnarl/s-taasde.ads: Likewise.
	* libgnarl/s-tadeca.adb: Likewise.
	* libgnarl/s-tadeca.ads: Likewise.
	* libgnarl/s-tadert.adb: Likewise.
	* libgnarl/s-tadert.ads: Likewise.
	* libgnarl/s-taenca.adb: Likewise.
	* libgnarl/s-taenca.ads: Likewise.
	* libgnarl/s-taprob.adb: Likewise.
	* libgnarl/s-taprob.ads: Likewise.
	* libgnarl/s-taprop.ads: Likewise.
	* libgnarl/s-taprop__dummy.adb: Likewise.
	* libgnarl/s-taprop__hpux-dce.adb: Likewise.
	* libgnarl/s-taprop__linux.adb: Likewise.
	* libgnarl/s-taprop__mingw.adb: Likewise.
	* libgnarl/s-taprop__posix.adb: Likewise.
	* libgnarl/s-taprop__qnx.adb: Likewise.
	* libgnarl/s-taprop__solaris.adb: Likewise.
	* libgnarl/s-taprop__vxworks.adb: Likewise.
	* libgnarl/s-tarest.adb: Likewise.
	* libgnarl/s-tarest.ads: Likewise.
	* libgnarl/s-tasdeb.adb: Likewise.
	* libgnarl/s-tasdeb.ads: Likewise.
	* libgnarl/s-tasinf.adb: Likewise.
	* libgnarl/s-tasinf.ads: Likewise.
	* libgnarl/s-tasinf__linux.adb: Likewise.
	* libgnarl/s-tasinf__linux.ads: Likewise.
	* libgnarl/s-tasinf__mingw.adb: Likewise.
	* libgnarl/s-tasinf__mingw.ads: Likewise.
	* libgnarl/s-tasinf__solaris.adb: Likewise.
	* libgnarl/s-tasinf__solaris.ads: Likewise.
	* libgnarl/s-tasinf__vxworks.ads: Likewise.
	* libgnarl/s-tasini.adb: Likewise.
	* libgnarl/s-tasini.ads: Likewise.
	* libgnarl/s-taskin.adb: Likewise.
	* libgnarl/s-taskin.ads: Likewise.
	* libgnarl/s-taspri__dummy.ads: Likewise.
	* libgnarl/s-taspri__hpux-dce.ads: Likewise.
	* libgnarl/s-taspri__lynxos.ads: Likewise.
	* libgnarl/s-taspri__mingw.ads: Likewise.
	* libgnarl/s-taspri__posix-noaltstack.ads: Likewise.
	* libgnarl/s-taspri__posix.ads: Likewise.
	* libgnarl/s-taspri__solaris.ads: Likewise.
	* libgnarl/s-taspri__vxworks.ads: Likewise.
	* libgnarl/s-tasque.adb: Likewise.
	* libgnarl/s-tasque.ads: Likewise.
	* libgnarl/s-tasren.adb: Likewise.
	* libgnarl/s-tasren.ads: Likewise.
	* libgnarl/s-tasres.ads: Likewise.
	* libgnarl/s-tassta.adb: Likewise.
	* libgnarl/s-tassta.ads: Likewise.
	* libgnarl/s-tasuti.adb: Likewise.
	* libgnarl/s-tasuti.ads: Likewise.
	* libgnarl/s-tataat.adb: Likewise.
	* libgnarl/s-tataat.ads: Likewise.
	* libgnarl/s-tpinop.adb: Likewise.
	* libgnarl/s-tpinop.ads: Likewise.
	* libgnarl/s-tpoaal.adb: Likewise.
	* libgnarl/s-tpoben.adb: Likewise.
	* libgnarl/s-tpoben.ads: Likewise.
	* libgnarl/s-tpobmu.adb: Likewise.
	* libgnarl/s-tpobmu.ads: Likewise.
	* libgnarl/s-tpobop.adb: Likewise.
	* libgnarl/s-tpobop.ads: Likewise.
	* libgnarl/s-tpopmo.adb: Likewise.
	* libgnarl/s-tpopsp__posix-foreign.adb: Likewise.
	* libgnarl/s-tpopsp__posix.adb: Likewise.
	* libgnarl/s-tpopsp__solaris.adb: Likewise.
	* libgnarl/s-tpopsp__tls.adb: Likewise.
	* libgnarl/s-tpopsp__vxworks-rtp.adb: Likewise.
	* libgnarl/s-tpopsp__vxworks-tls.adb: Likewise.
	* libgnarl/s-tpopsp__vxworks.adb: Likewise.
	* libgnarl/s-tporft.adb: Likewise.
	* libgnarl/s-tposen.adb: Likewise.
	* libgnarl/s-tposen.ads: Likewise.
	* libgnarl/s-vxwext.adb: Likewise.
	* libgnarl/s-vxwext.ads: Likewise.
	* libgnarl/s-vxwext__kernel-smp.adb: Likewise.
	* libgnarl/s-vxwext__kernel.adb: Likewise.
	* libgnarl/s-vxwext__kernel.ads: Likewise.
	* libgnarl/s-vxwext__noints.adb: Likewise.
	* libgnarl/s-vxwext__rtp-smp.adb: Likewise.
	* libgnarl/s-vxwext__rtp.adb: Likewise.
	* libgnarl/s-vxwext__rtp.ads: Likewise.
	* libgnarl/s-vxwext__vthreads.ads: Likewise.
	* libgnarl/s-vxwork__aarch64.ads: Likewise.
	* libgnarl/s-vxwork__arm.ads: Likewise.
	* libgnarl/s-vxwork__ppc.ads: Likewise.
	* libgnarl/s-vxwork__x86.ads: Likewise.
	* libgnarl/thread.c: Likewise.
	* libgnat/a-assert.adb: Likewise.
	* libgnat/a-assert.ads: Likewise.
	* libgnat/a-btgbso.adb: Likewise.
	* libgnat/a-btgbso.ads: Likewise.
	* libgnat/a-calari.adb: Likewise.
	* libgnat/a-calari.ads: Likewise.
	* libgnat/a-calcon.adb: Likewise.
	* libgnat/a-calcon.ads: Likewise.
	* libgnat/a-caldel.adb: Likewise.
	* libgnat/a-caldel.ads: Likewise.
	* libgnat/a-calend.adb: Likewise.
	* libgnat/a-calend.ads: Likewise.
	* libgnat/a-calfor.adb: Likewise.
	* libgnat/a-calfor.ads: Likewise.
	* libgnat/a-catizo.adb: Likewise.
	* libgnat/a-cbdlli.adb: Likewise.
	* libgnat/a-cbdlli.ads: Likewise.
	* libgnat/a-cbhama.adb: Likewise.
	* libgnat/a-cbhama.ads: Likewise.
	* libgnat/a-cbhase.adb: Likewise.
	* libgnat/a-cbhase.ads: Likewise.
	* libgnat/a-cbmutr.adb: Likewise.
	* libgnat/a-cbmutr.ads: Likewise.
	* libgnat/a-cborma.adb: Likewise.
	* libgnat/a-cborma.ads: Likewise.
	* libgnat/a-cborse.adb: Likewise.
	* libgnat/a-cborse.ads: Likewise.
	* libgnat/a-cbprqu.adb: Likewise.
	* libgnat/a-cbprqu.ads: Likewise.
	* libgnat/a-cbsyqu.adb: Likewise.
	* libgnat/a-cbsyqu.ads: Likewise.
	* libgnat/a-cdlili.adb: Likewise.
	* libgnat/a-cdlili.ads: Likewise.
	* libgnat/a-cfdlli.adb: Likewise.
	* libgnat/a-cfdlli.ads: Likewise.
	* libgnat/a-cfhama.adb: Likewise.
	* libgnat/a-cfhama.ads: Likewise.
	* libgnat/a-cfhase.adb: Likewise.
	* libgnat/a-cfhase.ads: Likewise.
	* libgnat/a-cfinve.adb: Likewise.
	* libgnat/a-cfinve.ads: Likewise.
	* libgnat/a-cforma.adb: Likewise.
	* libgnat/a-cforma.ads: Likewise.
	* libgnat/a-cforse.adb: Likewise.
	* libgnat/a-cforse.ads: Likewise.
	* libgnat/a-cgaaso.adb: Likewise.
	* libgnat/a-cgaaso.ads: Likewise.
	* libgnat/a-cgarso.adb: Likewise.
	* libgnat/a-cgcaso.adb: Likewise.
	* libgnat/a-chacon.adb: Likewise.
	* libgnat/a-chacon.ads: Likewise.
	* libgnat/a-chahan.adb: Likewise.
	* libgnat/a-chahan.ads: Likewise.
	* libgnat/a-chlat9.ads: Likewise.
	* libgnat/a-chtgbk.adb: Likewise.
	* libgnat/a-chtgbk.ads: Likewise.
	* libgnat/a-chtgbo.adb: Likewise.
	* libgnat/a-chtgbo.ads: Likewise.
	* libgnat/a-chtgke.adb: Likewise.
	* libgnat/a-chtgke.ads: Likewise.
	* libgnat/a-chtgop.adb: Likewise.
	* libgnat/a-chtgop.ads: Likewise.
	* libgnat/a-chzla1.ads: Likewise.
	* libgnat/a-chzla9.ads: Likewise.
	* libgnat/a-cidlli.adb: Likewise.
	* libgnat/a-cidlli.ads: Likewise.
	* libgnat/a-cihama.adb: Likewise.
	* libgnat/a-cihama.ads: Likewise.
	* libgnat/a-cihase.adb: Likewise.
	* libgnat/a-cihase.ads: Likewise.
	* libgnat/a-cimutr.adb: Likewise.
	* libgnat/a-cimutr.ads: Likewise.
	* libgnat/a-ciorma.adb: Likewise.
	* libgnat/a-ciorma.ads: Likewise.
	* libgnat/a-ciormu.adb: Likewise.
	* libgnat/a-ciormu.ads: Likewise.
	* libgnat/a-ciorse.adb: Likewise.
	* libgnat/a-ciorse.ads: Likewise.
	* libgnat/a-clrefi.adb: Likewise.
	* libgnat/a-clrefi.ads: Likewise.
	* libgnat/a-coboho.adb: Likewise.
	* libgnat/a-coboho.ads: Likewise.
	* libgnat/a-cobove.adb: Likewise.
	* libgnat/a-cobove.ads: Likewise.
	* libgnat/a-cofove.adb: Likewise.
	* libgnat/a-cofove.ads: Likewise.
	* libgnat/a-cofuba.adb: Likewise.
	* libgnat/a-cofuba.ads: Likewise.
	* libgnat/a-cofuma.adb: Likewise.
	* libgnat/a-cofuma.ads: Likewise.
	* libgnat/a-cofuse.adb: Likewise.
	* libgnat/a-cofuse.ads: Likewise.
	* libgnat/a-cofuve.adb: Likewise.
	* libgnat/a-cofuve.ads: Likewise.
	* libgnat/a-cogeso.adb: Likewise.
	* libgnat/a-cogeso.ads: Likewise.
	* libgnat/a-cohama.adb: Likewise.
	* libgnat/a-cohama.ads: Likewise.
	* libgnat/a-cohase.adb: Likewise.
	* libgnat/a-cohase.ads: Likewise.
	* libgnat/a-cohata.ads: Likewise.
	* libgnat/a-coinho.adb: Likewise.
	* libgnat/a-coinho.ads: Likewise.
	* libgnat/a-coinho__shared.adb: Likewise.
	* libgnat/a-coinho__shared.ads: Likewise.
	* libgnat/a-coinve.adb: Likewise.
	* libgnat/a-coinve.ads: Likewise.
	* libgnat/a-colien.adb: Likewise.
	* libgnat/a-colien.ads: Likewise.
	* libgnat/a-colire.adb: Likewise.
	* libgnat/a-colire.ads: Likewise.
	* libgnat/a-comlin.adb: Likewise.
	* libgnat/a-comlin.ads: Likewise.
	* libgnat/a-comutr.adb: Likewise.
	* libgnat/a-comutr.ads: Likewise.
	* libgnat/a-conhel.adb: Likewise.
	* libgnat/a-conhel.ads: Likewise.
	* libgnat/a-convec.adb: Likewise.
	* libgnat/a-convec.ads: Likewise.
	* libgnat/a-coorma.adb: Likewise.
	* libgnat/a-coorma.ads: Likewise.
	* libgnat/a-coormu.adb: Likewise.
	* libgnat/a-coormu.ads: Likewise.
	* libgnat/a-coorse.adb: Likewise.
	* libgnat/a-coorse.ads: Likewise.
	* libgnat/a-coprnu.adb: Likewise.
	* libgnat/a-coprnu.ads: Likewise.
	* libgnat/a-crbltr.ads: Likewise.
	* libgnat/a-crbtgk.adb: Likewise.
	* libgnat/a-crbtgk.ads: Likewise.
	* libgnat/a-crbtgo.adb: Likewise.
	* libgnat/a-crbtgo.ads: Likewise.
	* libgnat/a-crdlli.adb: Likewise.
	* libgnat/a-crdlli.ads: Likewise.
	* libgnat/a-csquin.ads: Likewise.
	* libgnat/a-cuprqu.adb: Likewise.
	* libgnat/a-cuprqu.ads: Likewise.
	* libgnat/a-cusyqu.adb: Likewise.
	* libgnat/a-cusyqu.ads: Likewise.
	* libgnat/a-cwila1.ads: Likewise.
	* libgnat/a-cwila9.ads: Likewise.
	* libgnat/a-decima.adb: Likewise.
	* libgnat/a-decima.ads: Likewise.
	* libgnat/a-dhfina.adb: Likewise.
	* libgnat/a-dhfina.ads: Likewise.
	* libgnat/a-diocst.adb: Likewise.
	* libgnat/a-diocst.ads: Likewise.
	* libgnat/a-direct.adb: Likewise.
	* libgnat/a-direct.ads: Likewise.
	* libgnat/a-direio.adb: Likewise.
	* libgnat/a-direio.ads: Likewise.
	* libgnat/a-dirval.adb: Likewise.
	* libgnat/a-dirval.ads: Likewise.
	* libgnat/a-dirval__mingw.adb: Likewise.
	* libgnat/a-einuoc.adb: Likewise.
	* libgnat/a-einuoc.ads: Likewise.
	* libgnat/a-elchha.adb: Likewise.
	* libgnat/a-elchha.ads: Likewise.
	* libgnat/a-elchha__vxworks-ppc-full.adb: Likewise.
	* libgnat/a-envvar.adb: Likewise.
	* libgnat/a-excach.adb: Likewise.
	* libgnat/a-except.adb: Likewise.
	* libgnat/a-except.ads: Likewise.
	* libgnat/a-excpol.adb: Likewise.
	* libgnat/a-excpol__abort.adb: Likewise.
	* libgnat/a-exctra.adb: Likewise.
	* libgnat/a-exctra.ads: Likewise.
	* libgnat/a-exexda.adb: Likewise.
	* libgnat/a-exexpr.adb: Likewise.
	* libgnat/a-exextr.adb: Likewise.
	* libgnat/a-exstat.adb: Likewise.
	* libgnat/a-finali.adb: Likewise.
	* libgnat/a-finali.ads: Likewise.
	* libgnat/a-locale.adb: Likewise.
	* libgnat/a-locale.ads: Likewise.
	* libgnat/a-nbnbin.adb: Likewise.
	* libgnat/a-nbnbin__gmp.adb: Likewise.
	* libgnat/a-nbnbre.adb: Likewise.
	* libgnat/a-ngcefu.adb: Likewise.
	* libgnat/a-ngcoar.adb: Likewise.
	* libgnat/a-ngcoty.adb: Likewise.
	* libgnat/a-ngcoty.ads: Likewise.
	* libgnat/a-ngelfu.adb: Likewise.
	* libgnat/a-ngelfu.ads: Likewise.
	* libgnat/a-ngrear.adb: Likewise.
	* libgnat/a-ngrear.ads: Likewise.
	* libgnat/a-nudira.adb: Likewise.
	* libgnat/a-nudira.ads: Likewise.
	* libgnat/a-nuflra.adb: Likewise.
	* libgnat/a-nuflra.ads: Likewise.
	* libgnat/a-numaux.ads: Likewise.
	* libgnat/a-numaux__darwin.adb: Likewise.
	* libgnat/a-numaux__darwin.ads: Likewise.
	* libgnat/a-numaux__libc-x86.ads: Likewise.
	* libgnat/a-numaux__vxworks.ads: Likewise.
	* libgnat/a-numaux__x86.adb: Likewise.
	* libgnat/a-numaux__x86.ads: Likewise.
	* libgnat/a-rbtgbk.adb: Likewise.
	* libgnat/a-rbtgbk.ads: Likewise.
	* libgnat/a-rbtgbo.adb: Likewise.
	* libgnat/a-rbtgbo.ads: Likewise.
	* libgnat/a-rbtgso.adb: Likewise.
	* libgnat/a-rbtgso.ads: Likewise.
	* libgnat/a-sbecin.adb: Likewise.
	* libgnat/a-sbecin.ads: Likewise.
	* libgnat/a-sbhcin.adb: Likewise.
	* libgnat/a-sbhcin.ads: Likewise.
	* libgnat/a-sblcin.adb: Likewise.
	* libgnat/a-sblcin.ads: Likewise.
	* libgnat/a-secain.adb: Likewise.
	* libgnat/a-secain.ads: Likewise.
	* libgnat/a-sequio.adb: Likewise.
	* libgnat/a-sequio.ads: Likewise.
	* libgnat/a-sfecin.ads: Likewise.
	* libgnat/a-sfhcin.ads: Likewise.
	* libgnat/a-sflcin.ads: Likewise.
	* libgnat/a-shcain.adb: Likewise.
	* libgnat/a-shcain.ads: Likewise.
	* libgnat/a-siocst.adb: Likewise.
	* libgnat/a-siocst.ads: Likewise.
	* libgnat/a-slcain.adb: Likewise.
	* libgnat/a-slcain.ads: Likewise.
	* libgnat/a-ssicst.adb: Likewise.
	* libgnat/a-ssicst.ads: Likewise.
	* libgnat/a-stboha.adb: Likewise.
	* libgnat/a-stmaco.ads: Likewise.
	* libgnat/a-storio.adb: Likewise.
	* libgnat/a-strbou.adb: Likewise.
	* libgnat/a-strbou.ads: Likewise.
	* libgnat/a-stream.adb: Likewise.
	* libgnat/a-stream.ads: Likewise.
	* libgnat/a-strfix.adb: Likewise.
	* libgnat/a-strhas.adb: Likewise.
	* libgnat/a-strmap.adb: Likewise.
	* libgnat/a-strmap.ads: Likewise.
	* libgnat/a-strsea.adb: Likewise.
	* libgnat/a-strsea.ads: Likewise.
	* libgnat/a-strsup.adb: Likewise.
	* libgnat/a-strsup.ads: Likewise.
	* libgnat/a-strunb.adb: Likewise.
	* libgnat/a-strunb.ads: Likewise.
	* libgnat/a-strunb__shared.adb: Likewise.
	* libgnat/a-strunb__shared.ads: Likewise.
	* libgnat/a-ststio.adb: Likewise.
	* libgnat/a-ststio.ads: Likewise.
	* libgnat/a-stunau.adb: Likewise.
	* libgnat/a-stunau.ads: Likewise.
	* libgnat/a-stunau__shared.adb: Likewise.
	* libgnat/a-stunha.adb: Likewise.
	* libgnat/a-stuten.adb: Likewise.
	* libgnat/a-stwibo.adb: Likewise.
	* libgnat/a-stwibo.ads: Likewise.
	* libgnat/a-stwifi.adb: Likewise.
	* libgnat/a-stwiha.adb: Likewise.
	* libgnat/a-stwima.adb: Likewise.
	* libgnat/a-stwima.ads: Likewise.
	* libgnat/a-stwise.adb: Likewise.
	* libgnat/a-stwise.ads: Likewise.
	* libgnat/a-stwisu.adb: Likewise.
	* libgnat/a-stwisu.ads: Likewise.
	* libgnat/a-stwiun.adb: Likewise.
	* libgnat/a-stwiun.ads: Likewise.
	* libgnat/a-stwiun__shared.adb: Likewise.
	* libgnat/a-stwiun__shared.ads: Likewise.
	* libgnat/a-stzbou.adb: Likewise.
	* libgnat/a-stzbou.ads: Likewise.
	* libgnat/a-stzfix.adb: Likewise.
	* libgnat/a-stzhas.adb: Likewise.
	* libgnat/a-stzmap.adb: Likewise.
	* libgnat/a-stzmap.ads: Likewise.
	* libgnat/a-stzsea.adb: Likewise.
	* libgnat/a-stzsea.ads: Likewise.
	* libgnat/a-stzsup.adb: Likewise.
	* libgnat/a-stzsup.ads: Likewise.
	* libgnat/a-stzunb.adb: Likewise.
	* libgnat/a-stzunb.ads: Likewise.
	* libgnat/a-stzunb__shared.adb: Likewise.
	* libgnat/a-stzunb__shared.ads: Likewise.
	* libgnat/a-suecin.adb: Likewise.
	* libgnat/a-suecin.ads: Likewise.
	* libgnat/a-suenco.adb: Likewise.
	* libgnat/a-suenst.adb: Likewise.
	* libgnat/a-suewst.adb: Likewise.
	* libgnat/a-suezst.adb: Likewise.
	* libgnat/a-suhcin.adb: Likewise.
	* libgnat/a-suhcin.ads: Likewise.
	* libgnat/a-sulcin.adb: Likewise.
	* libgnat/a-sulcin.ads: Likewise.
	* libgnat/a-suteio.adb: Likewise.
	* libgnat/a-suteio.ads: Likewise.
	* libgnat/a-suteio__shared.adb: Likewise.
	* libgnat/a-swbwha.adb: Likewise.
	* libgnat/a-swmwco.ads: Likewise.
	* libgnat/a-swunau.adb: Likewise.
	* libgnat/a-swunau.ads: Likewise.
	* libgnat/a-swunau__shared.adb: Likewise.
	* libgnat/a-swuwha.adb: Likewise.
	* libgnat/a-swuwti.adb: Likewise.
	* libgnat/a-swuwti.ads: Likewise.
	* libgnat/a-swuwti__shared.adb: Likewise.
	* libgnat/a-szbzha.adb: Likewise.
	* libgnat/a-szmzco.ads: Likewise.
	* libgnat/a-szunau.adb: Likewise.
	* libgnat/a-szunau.ads: Likewise.
	* libgnat/a-szunau__shared.adb: Likewise.
	* libgnat/a-szuzha.adb: Likewise.
	* libgnat/a-szuzti.adb: Likewise.
	* libgnat/a-szuzti.ads: Likewise.
	* libgnat/a-szuzti__shared.adb: Likewise.
	* libgnat/a-tags.adb: Likewise.
	* libgnat/a-tags.ads: Likewise.
	* libgnat/a-teioed.adb: Likewise.
	* libgnat/a-teioed.ads: Likewise.
	* libgnat/a-textio.adb: Likewise.
	* libgnat/a-textio.ads: Likewise.
	* libgnat/a-tiboio.adb: Likewise.
	* libgnat/a-ticoau.adb: Likewise.
	* libgnat/a-ticoau.ads: Likewise.
	* libgnat/a-ticoio.adb: Likewise.
	* libgnat/a-ticoio.ads: Likewise.
	* libgnat/a-tideau.adb: Likewise.
	* libgnat/a-tideau.ads: Likewise.
	* libgnat/a-tideio.adb: Likewise.
	* libgnat/a-tideio.ads: Likewise.
	* libgnat/a-tienau.adb: Likewise.
	* libgnat/a-tienau.ads: Likewise.
	* libgnat/a-tienio.adb: Likewise.
	* libgnat/a-tifiio.adb: Likewise.
	* libgnat/a-tiflau.adb: Likewise.
	* libgnat/a-tiflau.ads: Likewise.
	* libgnat/a-tiflio.adb: Likewise.
	* libgnat/a-tiflio.ads: Likewise.
	* libgnat/a-tigeau.adb: Likewise.
	* libgnat/a-tigeau.ads: Likewise.
	* libgnat/a-tigeli.adb: Likewise.
	* libgnat/a-tiinau.adb: Likewise.
	* libgnat/a-tiinau.ads: Likewise.
	* libgnat/a-tiinio.adb: Likewise.
	* libgnat/a-tiinio.ads: Likewise.
	* libgnat/a-timoau.adb: Likewise.
	* libgnat/a-timoau.ads: Likewise.
	* libgnat/a-timoio.adb: Likewise.
	* libgnat/a-timoio.ads: Likewise.
	* libgnat/a-tiocst.adb: Likewise.
	* libgnat/a-tiocst.ads: Likewise.
	* libgnat/a-tirsfi.adb: Likewise.
	* libgnat/a-tirsfi.ads: Likewise.
	* libgnat/a-titest.adb: Likewise.
	* libgnat/a-undesu.adb: Likewise.
	* libgnat/a-wichha.adb: Likewise.
	* libgnat/a-wichun.adb: Likewise.
	* libgnat/a-wichun.ads: Likewise.
	* libgnat/a-witeio.adb: Likewise.
	* libgnat/a-witeio.ads: Likewise.
	* libgnat/a-wrstfi.adb: Likewise.
	* libgnat/a-wrstfi.ads: Likewise.
	* libgnat/a-wtcoau.adb: Likewise.
	* libgnat/a-wtcoau.ads: Likewise.
	* libgnat/a-wtcoio.adb: Likewise.
	* libgnat/a-wtcstr.adb: Likewise.
	* libgnat/a-wtcstr.ads: Likewise.
	* libgnat/a-wtdeau.adb: Likewise.
	* libgnat/a-wtdeau.ads: Likewise.
	* libgnat/a-wtdeio.adb: Likewise.
	* libgnat/a-wtedit.adb: Likewise.
	* libgnat/a-wtedit.ads: Likewise.
	* libgnat/a-wtenau.adb: Likewise.
	* libgnat/a-wtenau.ads: Likewise.
	* libgnat/a-wtenio.adb: Likewise.
	* libgnat/a-wtfiio.adb: Likewise.
	* libgnat/a-wtflau.adb: Likewise.
	* libgnat/a-wtflau.ads: Likewise.
	* libgnat/a-wtflio.adb: Likewise.
	* libgnat/a-wtgeau.adb: Likewise.
	* libgnat/a-wtgeau.ads: Likewise.
	* libgnat/a-wtinau.adb: Likewise.
	* libgnat/a-wtinau.ads: Likewise.
	* libgnat/a-wtinio.adb: Likewise.
	* libgnat/a-wtmoau.adb: Likewise.
	* libgnat/a-wtmoau.ads: Likewise.
	* libgnat/a-wtmoio.adb: Likewise.
	* libgnat/a-wtmoio.ads: Likewise.
	* libgnat/a-wttest.adb: Likewise.
	* libgnat/a-wwboio.adb: Likewise.
	* libgnat/a-zchhan.adb: Likewise.
	* libgnat/a-zchuni.adb: Likewise.
	* libgnat/a-zchuni.ads: Likewise.
	* libgnat/a-zrstfi.adb: Likewise.
	* libgnat/a-zrstfi.ads: Likewise.
	* libgnat/a-ztcoau.adb: Likewise.
	* libgnat/a-ztcoio.adb: Likewise.
	* libgnat/a-ztcstr.adb: Likewise.
	* libgnat/a-ztcstr.ads: Likewise.
	* libgnat/a-ztdeau.adb: Likewise.
	* libgnat/a-ztdeau.ads: Likewise.
	* libgnat/a-ztdeio.adb: Likewise.
	* libgnat/a-ztedit.adb: Likewise.
	* libgnat/a-ztedit.ads: Likewise.
	* libgnat/a-ztenau.adb: Likewise.
	* libgnat/a-ztenau.ads: Likewise.
	* libgnat/a-ztenio.adb: Likewise.
	* libgnat/a-ztexio.adb: Likewise.
	* libgnat/a-ztexio.ads: Likewise.
	* libgnat/a-ztfiio.adb: Likewise.
	* libgnat/a-ztflau.adb: Likewise.
	* libgnat/a-ztflau.ads: Likewise.
	* libgnat/a-ztflio.adb: Likewise.
	* libgnat/a-ztgeau.adb: Likewise.
	* libgnat/a-ztgeau.ads: Likewise.
	* libgnat/a-ztinau.adb: Likewise.
	* libgnat/a-ztinau.ads: Likewise.
	* libgnat/a-ztinio.adb: Likewise.
	* libgnat/a-ztmoau.adb: Likewise.
	* libgnat/a-ztmoau.ads: Likewise.
	* libgnat/a-ztmoio.adb: Likewise.
	* libgnat/a-zttest.adb: Likewise.
	* libgnat/a-zzboio.adb: Likewise.
	* libgnat/g-allein.ads: Likewise.
	* libgnat/g-alleve.adb: Likewise.
	* libgnat/g-alleve.ads: Likewise.
	* libgnat/g-alleve__hard.adb: Likewise.
	* libgnat/g-alleve__hard.ads: Likewise.
	* libgnat/g-altcon.adb: Likewise.
	* libgnat/g-altcon.ads: Likewise.
	* libgnat/g-altive.ads: Likewise.
	* libgnat/g-alveop.adb: Likewise.
	* libgnat/g-alveop.ads: Likewise.
	* libgnat/g-alvety.ads: Likewise.
	* libgnat/g-alvevi.ads: Likewise.
	* libgnat/g-arrspl.adb: Likewise.
	* libgnat/g-arrspl.ads: Likewise.
	* libgnat/g-awk.adb: Likewise.
	* libgnat/g-awk.ads: Likewise.
	* libgnat/g-binenv.adb: Likewise.
	* libgnat/g-binenv.ads: Likewise.
	* libgnat/g-brapre.ads: Likewise.
	* libgnat/g-bubsor.adb: Likewise.
	* libgnat/g-bubsor.ads: Likewise.
	* libgnat/g-busora.adb: Likewise.
	* libgnat/g-busora.ads: Likewise.
	* libgnat/g-busorg.adb: Likewise.
	* libgnat/g-busorg.ads: Likewise.
	* libgnat/g-byorma.adb: Likewise.
	* libgnat/g-byorma.ads: Likewise.
	* libgnat/g-bytswa.adb: Likewise.
	* libgnat/g-bytswa.ads: Likewise.
	* libgnat/g-calend.adb: Likewise.
	* libgnat/g-calend.ads: Likewise.
	* libgnat/g-casuti.adb: Likewise.
	* libgnat/g-casuti.ads: Likewise.
	* libgnat/g-catiio.adb: Likewise.
	* libgnat/g-catiio.ads: Likewise.
	* libgnat/g-cgi.adb: Likewise.
	* libgnat/g-cgi.ads: Likewise.
	* libgnat/g-cgicoo.adb: Likewise.
	* libgnat/g-cgicoo.ads: Likewise.
	* libgnat/g-cgideb.adb: Likewise.
	* libgnat/g-cgideb.ads: Likewise.
	* libgnat/g-comlin.adb: Likewise.
	* libgnat/g-comlin.ads: Likewise.
	* libgnat/g-comver.adb: Likewise.
	* libgnat/g-comver.ads: Likewise.
	* libgnat/g-cppexc.adb: Likewise.
	* libgnat/g-cppexc.ads: Likewise.
	* libgnat/g-crc32.adb: Likewise.
	* libgnat/g-crc32.ads: Likewise.
	* libgnat/g-ctrl_c.adb: Likewise.
	* libgnat/g-ctrl_c.ads: Likewise.
	* libgnat/g-curexc.ads: Likewise.
	* libgnat/g-debpoo.adb: Likewise.
	* libgnat/g-debpoo.ads: Likewise.
	* libgnat/g-debuti.adb: Likewise.
	* libgnat/g-debuti.ads: Likewise.
	* libgnat/g-decstr.adb: Likewise.
	* libgnat/g-decstr.ads: Likewise.
	* libgnat/g-deutst.ads: Likewise.
	* libgnat/g-diopit.adb: Likewise.
	* libgnat/g-diopit.ads: Likewise.
	* libgnat/g-dirope.adb: Likewise.
	* libgnat/g-dirope.ads: Likewise.
	* libgnat/g-dynhta.adb: Likewise.
	* libgnat/g-dynhta.ads: Likewise.
	* libgnat/g-dyntab.adb: Likewise.
	* libgnat/g-dyntab.ads: Likewise.
	* libgnat/g-eacodu.adb: Likewise.
	* libgnat/g-encstr.adb: Likewise.
	* libgnat/g-encstr.ads: Likewise.
	* libgnat/g-enutst.ads: Likewise.
	* libgnat/g-excact.adb: Likewise.
	* libgnat/g-excact.ads: Likewise.
	* libgnat/g-except.ads: Likewise.
	* libgnat/g-exctra.adb: Likewise.
	* libgnat/g-exctra.ads: Likewise.
	* libgnat/g-expect.adb: Likewise.
	* libgnat/g-expect.ads: Likewise.
	* libgnat/g-exptty.adb: Likewise.
	* libgnat/g-exptty.ads: Likewise.
	* libgnat/g-flocon.ads: Likewise.
	* libgnat/g-forstr.adb: Likewise.
	* libgnat/g-forstr.ads: Likewise.
	* libgnat/g-graphs.adb: Likewise.
	* libgnat/g-graphs.ads: Likewise.
	* libgnat/g-heasor.adb: Likewise.
	* libgnat/g-heasor.ads: Likewise.
	* libgnat/g-hesora.adb: Likewise.
	* libgnat/g-hesora.ads: Likewise.
	* libgnat/g-hesorg.adb: Likewise.
	* libgnat/g-hesorg.ads: Likewise.
	* libgnat/g-htable.adb: Likewise.
	* libgnat/g-htable.ads: Likewise.
	* libgnat/g-io-put__vxworks.adb: Likewise.
	* libgnat/g-io.adb: Likewise.
	* libgnat/g-io.ads: Likewise.
	* libgnat/g-io_aux.adb: Likewise.
	* libgnat/g-io_aux.ads: Likewise.
	* libgnat/g-lists.adb: Likewise.
	* libgnat/g-lists.ads: Likewise.
	* libgnat/g-locfil.adb: Likewise.
	* libgnat/g-locfil.ads: Likewise.
	* libgnat/g-mbdira.adb: Likewise.
	* libgnat/g-mbdira.ads: Likewise.
	* libgnat/g-mbflra.adb: Likewise.
	* libgnat/g-mbflra.ads: Likewise.
	* libgnat/g-md5.adb: Likewise.
	* libgnat/g-md5.ads: Likewise.
	* libgnat/g-memdum.adb: Likewise.
	* libgnat/g-memdum.ads: Likewise.
	* libgnat/g-moreex.adb: Likewise.
	* libgnat/g-moreex.ads: Likewise.
	* libgnat/g-os_lib.adb: Likewise.
	* libgnat/g-os_lib.ads: Likewise.
	* libgnat/g-pehage.adb: Likewise.
	* libgnat/g-pehage.ads: Likewise.
	* libgnat/g-rannum.adb: Likewise.
	* libgnat/g-rannum.ads: Likewise.
	* libgnat/g-regexp.adb: Likewise.
	* libgnat/g-regexp.ads: Likewise.
	* libgnat/g-regist.adb: Likewise.
	* libgnat/g-regist.ads: Likewise.
	* libgnat/g-regpat.adb: Likewise.
	* libgnat/g-regpat.ads: Likewise.
	* libgnat/g-rewdat.adb: Likewise.
	* libgnat/g-rewdat.ads: Likewise.
	* libgnat/g-sechas.adb: Likewise.
	* libgnat/g-sechas.ads: Likewise.
	* libgnat/g-sehamd.adb: Likewise.
	* libgnat/g-sehamd.ads: Likewise.
	* libgnat/g-sehash.adb: Likewise.
	* libgnat/g-sehash.ads: Likewise.
	* libgnat/g-sercom.adb: Likewise.
	* libgnat/g-sercom.ads: Likewise.
	* libgnat/g-sercom__linux.adb: Likewise.
	* libgnat/g-sercom__mingw.adb: Likewise.
	* libgnat/g-sestin.ads: Likewise.
	* libgnat/g-sets.adb: Likewise.
	* libgnat/g-sets.ads: Likewise.
	* libgnat/g-sha1.adb: Likewise.
	* libgnat/g-sha1.ads: Likewise.
	* libgnat/g-sha224.ads: Likewise.
	* libgnat/g-sha256.ads: Likewise.
	* libgnat/g-sha384.ads: Likewise.
	* libgnat/g-sha512.ads: Likewise.
	* libgnat/g-shsh32.adb: Likewise.
	* libgnat/g-shsh32.ads: Likewise.
	* libgnat/g-shsh64.adb: Likewise.
	* libgnat/g-shsh64.ads: Likewise.
	* libgnat/g-shshco.adb: Likewise.
	* libgnat/g-shshco.ads: Likewise.
	* libgnat/g-soccon.ads: Likewise.
	* libgnat/g-socket.adb: Likewise.
	* libgnat/g-socket.ads: Likewise.
	* libgnat/g-socket__dummy.adb: Likewise.
	* libgnat/g-socket__dummy.ads: Likewise.
	* libgnat/g-socthi.adb: Likewise.
	* libgnat/g-socthi.ads: Likewise.
	* libgnat/g-socthi__dummy.adb: Likewise.
	* libgnat/g-socthi__dummy.ads: Likewise.
	* libgnat/g-socthi__mingw.adb: Likewise.
	* libgnat/g-socthi__mingw.ads: Likewise.
	* libgnat/g-socthi__vxworks.adb: Likewise.
	* libgnat/g-socthi__vxworks.ads: Likewise.
	* libgnat/g-soliop.ads: Likewise.
	* libgnat/g-soliop__lynxos.ads: Likewise.
	* libgnat/g-soliop__mingw.ads: Likewise.
	* libgnat/g-soliop__qnx.ads: Likewise.
	* libgnat/g-soliop__solaris.ads: Likewise.
	* libgnat/g-sothco.adb: Likewise.
	* libgnat/g-sothco.ads: Likewise.
	* libgnat/g-sothco__dummy.adb: Likewise.
	* libgnat/g-sothco__dummy.ads: Likewise.
	* libgnat/g-souinf.ads: Likewise.
	* libgnat/g-spchge.adb: Likewise.
	* libgnat/g-spchge.ads: Likewise.
	* libgnat/g-speche.adb: Likewise.
	* libgnat/g-speche.ads: Likewise.
	* libgnat/g-spipat.adb: Likewise.
	* libgnat/g-spipat.ads: Likewise.
	* libgnat/g-spitbo.adb: Likewise.
	* libgnat/g-spitbo.ads: Likewise.
	* libgnat/g-sptabo.ads: Likewise.
	* libgnat/g-sptain.ads: Likewise.
	* libgnat/g-sptavs.ads: Likewise.
	* libgnat/g-sse.ads: Likewise.
	* libgnat/g-ssvety.ads: Likewise.
	* libgnat/g-sthcso.adb: Likewise.
	* libgnat/g-stheme.adb: Likewise.
	* libgnat/g-strhas.ads: Likewise.
	* libgnat/g-string.adb: Likewise.
	* libgnat/g-string.ads: Likewise.
	* libgnat/g-strspl.ads: Likewise.
	* libgnat/g-stseme.adb: Likewise.
	* libgnat/g-stsifd__sockets.adb: Likewise.
	* libgnat/g-table.adb: Likewise.
	* libgnat/g-table.ads: Likewise.
	* libgnat/g-tasloc.adb: Likewise.
	* libgnat/g-tasloc.ads: Likewise.
	* libgnat/g-timsta.adb: Likewise.
	* libgnat/g-timsta.ads: Likewise.
	* libgnat/g-traceb.adb: Likewise.
	* libgnat/g-traceb.ads: Likewise.
	* libgnat/g-trasym.adb: Likewise.
	* libgnat/g-trasym.ads: Likewise.
	* libgnat/g-tty.adb: Likewise.
	* libgnat/g-tty.ads: Likewise.
	* libgnat/g-u3spch.adb: Likewise.
	* libgnat/g-u3spch.ads: Likewise.
	* libgnat/g-utf_32.adb: Likewise.
	* libgnat/g-utf_32.ads: Likewise.
	* libgnat/g-wispch.adb: Likewise.
	* libgnat/g-wispch.ads: Likewise.
	* libgnat/g-wistsp.ads: Likewise.
	* libgnat/g-zspche.adb: Likewise.
	* libgnat/g-zspche.ads: Likewise.
	* libgnat/g-zstspl.ads: Likewise.
	* libgnat/gnat.ads: Likewise.
	* libgnat/i-c.adb: Likewise.
	* libgnat/i-cexten.ads: Likewise.
	* libgnat/i-cobol.adb: Likewise.
	* libgnat/i-cobol.ads: Likewise.
	* libgnat/i-cpoint.adb: Likewise.
	* libgnat/i-cpoint.ads: Likewise.
	* libgnat/i-cstrea.adb: Likewise.
	* libgnat/i-cstrea.ads: Likewise.
	* libgnat/i-cstrin.adb: Likewise.
	* libgnat/i-cstrin.ads: Likewise.
	* libgnat/i-fortra.adb: Likewise.
	* libgnat/i-pacdec.adb: Likewise.
	* libgnat/i-pacdec.ads: Likewise.
	* libgnat/i-vxwoio.adb: Likewise.
	* libgnat/i-vxwoio.ads: Likewise.
	* libgnat/i-vxwork.ads: Likewise.
	* libgnat/i-vxwork__x86.ads: Likewise.
	* libgnat/interfac.ads: Likewise.
	* libgnat/memtrack.adb: Likewise.
	* libgnat/s-addima.adb: Likewise.
	* libgnat/s-addima.ads: Likewise.
	* libgnat/s-addope.adb: Likewise.
	* libgnat/s-addope.ads: Likewise.
	* libgnat/s-aotase.adb: Likewise.
	* libgnat/s-aotase.ads: Likewise.
	* libgnat/s-arit64.adb: Likewise.
	* libgnat/s-arit64.ads: Likewise.
	* libgnat/s-assert.adb: Likewise.
	* libgnat/s-assert.ads: Likewise.
	* libgnat/s-atacco.adb: Likewise.
	* libgnat/s-atacco.ads: Likewise.
	* libgnat/s-atocou.adb: Likewise.
	* libgnat/s-atocou.ads: Likewise.
	* libgnat/s-atocou__builtin.adb: Likewise.
	* libgnat/s-atocou__x86.adb: Likewise.
	* libgnat/s-atoope.ads: Likewise.
	* libgnat/s-atopar.adb: Likewise.
	* libgnat/s-atopar.ads: Likewise.
	* libgnat/s-atopex.adb: Likewise.
	* libgnat/s-atopex.ads: Likewise.
	* libgnat/s-atopri.adb: Likewise.
	* libgnat/s-atopri.ads: Likewise.
	* libgnat/s-auxdec.adb: Likewise.
	* libgnat/s-auxdec.ads: Likewise.
	* libgnat/s-bignum.adb: Likewise.
	* libgnat/s-bignum.ads: Likewise.
	* libgnat/s-bitfie.ads: Likewise.
	* libgnat/s-bitops.adb: Likewise.
	* libgnat/s-bitops.ads: Likewise.
	* libgnat/s-bituti.adb: Likewise.
	* libgnat/s-bituti.ads: Likewise.
	* libgnat/s-boarop.ads: Likewise.
	* libgnat/s-boustr.adb: Likewise.
	* libgnat/s-boustr.ads: Likewise.
	* libgnat/s-bytswa.ads: Likewise.
	* libgnat/s-carsi8.adb: Likewise.
	* libgnat/s-carsi8.ads: Likewise.
	* libgnat/s-carun8.adb: Likewise.
	* libgnat/s-carun8.ads: Likewise.
	* libgnat/s-casi16.adb: Likewise.
	* libgnat/s-casi16.ads: Likewise.
	* libgnat/s-casi32.adb: Likewise.
	* libgnat/s-casi32.ads: Likewise.
	* libgnat/s-casi64.adb: Likewise.
	* libgnat/s-casi64.ads: Likewise.
	* libgnat/s-casuti.adb: Likewise.
	* libgnat/s-casuti.ads: Likewise.
	* libgnat/s-caun16.adb: Likewise.
	* libgnat/s-caun16.ads: Likewise.
	* libgnat/s-caun32.adb: Likewise.
	* libgnat/s-caun32.ads: Likewise.
	* libgnat/s-caun64.adb: Likewise.
	* libgnat/s-caun64.ads: Likewise.
	* libgnat/s-chepoo.ads: Likewise.
	* libgnat/s-commun.adb: Likewise.
	* libgnat/s-commun.ads: Likewise.
	* libgnat/s-conca2.adb: Likewise.
	* libgnat/s-conca2.ads: Likewise.
	* libgnat/s-conca3.adb: Likewise.
	* libgnat/s-conca3.ads: Likewise.
	* libgnat/s-conca4.adb: Likewise.
	* libgnat/s-conca4.ads: Likewise.
	* libgnat/s-conca5.adb: Likewise.
	* libgnat/s-conca5.ads: Likewise.
	* libgnat/s-conca6.adb: Likewise.
	* libgnat/s-conca6.ads: Likewise.
	* libgnat/s-conca7.adb: Likewise.
	* libgnat/s-conca7.ads: Likewise.
	* libgnat/s-conca8.adb: Likewise.
	* libgnat/s-conca8.ads: Likewise.
	* libgnat/s-conca9.adb: Likewise.
	* libgnat/s-conca9.ads: Likewise.
	* libgnat/s-crc32.adb: Likewise.
	* libgnat/s-crc32.ads: Likewise.
	* libgnat/s-crtl.ads: Likewise.
	* libgnat/s-dfmkio.ads: Likewise.
	* libgnat/s-dfmopr.ads: Likewise.
	* libgnat/s-dgmgop.ads: Likewise.
	* libgnat/s-diflio.adb: Likewise.
	* libgnat/s-diflio.ads: Likewise.
	* libgnat/s-diflmk.ads: Likewise.
	* libgnat/s-digemk.ads: Likewise.
	* libgnat/s-diinio.adb: Likewise.
	* libgnat/s-diinio.ads: Likewise.
	* libgnat/s-dilomk.ads: Likewise.
	* libgnat/s-dim.ads: Likewise.
	* libgnat/s-dimkio.ads: Likewise.
	* libgnat/s-dimmks.ads: Likewise.
	* libgnat/s-direio.adb: Likewise.
	* libgnat/s-direio.ads: Likewise.
	* libgnat/s-dlmkio.ads: Likewise.
	* libgnat/s-dlmopr.ads: Likewise.
	* libgnat/s-dmotpr.ads: Likewise.
	* libgnat/s-dsaser.ads: Likewise.
	* libgnat/s-dwalin.adb: Likewise.
	* libgnat/s-dwalin.ads: Likewise.
	* libgnat/s-elaall.adb: Likewise.
	* libgnat/s-elaall.ads: Likewise.
	* libgnat/s-excdeb.adb: Likewise.
	* libgnat/s-excdeb.ads: Likewise.
	* libgnat/s-except.adb: Likewise.
	* libgnat/s-except.ads: Likewise.
	* libgnat/s-excmac__arm.adb: Likewise.
	* libgnat/s-excmac__arm.ads: Likewise.
	* libgnat/s-excmac__gcc.adb: Likewise.
	* libgnat/s-excmac__gcc.ads: Likewise.
	* libgnat/s-exctab.adb: Likewise.
	* libgnat/s-exctab.ads: Likewise.
	* libgnat/s-exctra.adb: Likewise.
	* libgnat/s-exctra.ads: Likewise.
	* libgnat/s-exnint.adb: Likewise.
	* libgnat/s-exnint.ads: Likewise.
	* libgnat/s-exnllf.adb: Likewise.
	* libgnat/s-exnllf.ads: Likewise.
	* libgnat/s-exnlli.adb: Likewise.
	* libgnat/s-exnlli.ads: Likewise.
	* libgnat/s-expint.adb: Likewise.
	* libgnat/s-expint.ads: Likewise.
	* libgnat/s-explli.adb: Likewise.
	* libgnat/s-explli.ads: Likewise.
	* libgnat/s-expllu.adb: Likewise.
	* libgnat/s-expllu.ads: Likewise.
	* libgnat/s-expmod.adb: Likewise.
	* libgnat/s-expmod.ads: Likewise.
	* libgnat/s-expuns.adb: Likewise.
	* libgnat/s-expuns.ads: Likewise.
	* libgnat/s-fatflt.ads: Likewise.
	* libgnat/s-fatgen.adb: Likewise.
	* libgnat/s-fatgen.ads: Likewise.
	* libgnat/s-fatlfl.ads: Likewise.
	* libgnat/s-fatllf.ads: Likewise.
	* libgnat/s-fatsfl.ads: Likewise.
	* libgnat/s-ficobl.ads: Likewise.
	* libgnat/s-filatt.ads: Likewise.
	* libgnat/s-fileio.adb: Likewise.
	* libgnat/s-fileio.ads: Likewise.
	* libgnat/s-finmas.adb: Likewise.
	* libgnat/s-finmas.ads: Likewise.
	* libgnat/s-finroo.adb: Likewise.
	* libgnat/s-finroo.ads: Likewise.
	* libgnat/s-flocon.adb: Likewise.
	* libgnat/s-flocon.ads: Likewise.
	* libgnat/s-flocon__none.adb: Likewise.
	* libgnat/s-fore.adb: Likewise.
	* libgnat/s-fore.ads: Likewise.
	* libgnat/s-gearop.adb: Likewise.
	* libgnat/s-gearop.ads: Likewise.
	* libgnat/s-genbig.adb: Likewise.
	* libgnat/s-genbig.ads: Likewise.
	* libgnat/s-geveop.adb: Likewise.
	* libgnat/s-geveop.ads: Likewise.
	* libgnat/s-gloloc.adb: Likewise.
	* libgnat/s-gloloc.ads: Likewise.
	* libgnat/s-gloloc__mingw.adb: Likewise.
	* libgnat/s-htable.adb: Likewise.
	* libgnat/s-htable.ads: Likewise.
	* libgnat/s-imenne.adb: Likewise.
	* libgnat/s-imenne.ads: Likewise.
	* libgnat/s-imgbiu.adb: Likewise.
	* libgnat/s-imgbiu.ads: Likewise.
	* libgnat/s-imgboo.adb: Likewise.
	* libgnat/s-imgboo.ads: Likewise.
	* libgnat/s-imgcha.adb: Likewise.
	* libgnat/s-imgcha.ads: Likewise.
	* libgnat/s-imgdec.adb: Likewise.
	* libgnat/s-imgdec.ads: Likewise.
	* libgnat/s-imgenu.adb: Likewise.
	* libgnat/s-imgenu.ads: Likewise.
	* libgnat/s-imgint.adb: Likewise.
	* libgnat/s-imgint.ads: Likewise.
	* libgnat/s-imgllb.adb: Likewise.
	* libgnat/s-imgllb.ads: Likewise.
	* libgnat/s-imglld.adb: Likewise.
	* libgnat/s-imglld.ads: Likewise.
	* libgnat/s-imglli.adb: Likewise.
	* libgnat/s-imglli.ads: Likewise.
	* libgnat/s-imgllu.adb: Likewise.
	* libgnat/s-imgllu.ads: Likewise.
	* libgnat/s-imgllw.adb: Likewise.
	* libgnat/s-imgllw.ads: Likewise.
	* libgnat/s-imgrea.adb: Likewise.
	* libgnat/s-imgrea.ads: Likewise.
	* libgnat/s-imguns.adb: Likewise.
	* libgnat/s-imguns.ads: Likewise.
	* libgnat/s-imgwch.adb: Likewise.
	* libgnat/s-imgwch.ads: Likewise.
	* libgnat/s-imgwiu.adb: Likewise.
	* libgnat/s-imgwiu.ads: Likewise.
	* libgnat/s-io.adb: Likewise.
	* libgnat/s-io.ads: Likewise.
	* libgnat/s-llflex.ads: Likewise.
	* libgnat/s-maccod.ads: Likewise.
	* libgnat/s-mantis.adb: Likewise.
	* libgnat/s-mantis.ads: Likewise.
	* libgnat/s-mastop.adb: Likewise.
	* libgnat/s-mastop.ads: Likewise.
	* libgnat/s-memcop.ads: Likewise.
	* libgnat/s-memory.adb: Likewise.
	* libgnat/s-memory.ads: Likewise.
	* libgnat/s-mmap.adb: Likewise.
	* libgnat/s-mmap.ads: Likewise.
	* libgnat/s-mmauni__long.ads: Likewise.
	* libgnat/s-mmosin__mingw.adb: Likewise.
	* libgnat/s-mmosin__mingw.ads: Likewise.
	* libgnat/s-mmosin__unix.adb: Likewise.
	* libgnat/s-mmosin__unix.ads: Likewise.
	* libgnat/s-multip.adb: Likewise.
	* libgnat/s-objrea.adb: Likewise.
	* libgnat/s-objrea.ads: Likewise.
	* libgnat/s-optide.adb: Likewise.
	* libgnat/s-os_lib.adb: Likewise.
	* libgnat/s-os_lib.ads: Likewise.
	* libgnat/s-osprim.ads: Likewise.
	* libgnat/s-osprim__darwin.adb: Likewise.
	* libgnat/s-osprim__lynxos.ads: Likewise.
	* libgnat/s-osprim__mingw.adb: Likewise.
	* libgnat/s-osprim__posix.adb: Likewise.
	* libgnat/s-osprim__posix2008.adb: Likewise.
	* libgnat/s-osprim__rtems.adb: Likewise.
	* libgnat/s-osprim__solaris.adb: Likewise.
	* libgnat/s-osprim__unix.adb: Likewise.
	* libgnat/s-osprim__vxworks.adb: Likewise.
	* libgnat/s-osprim__x32.adb: Likewise.
	* libgnat/s-osvers__vxworks-653.ads: Likewise.
	* libgnat/s-pack03.adb: Likewise.
	* libgnat/s-pack03.ads: Likewise.
	* libgnat/s-pack05.adb: Likewise.
	* libgnat/s-pack05.ads: Likewise.
	* libgnat/s-pack06.adb: Likewise.
	* libgnat/s-pack06.ads: Likewise.
	* libgnat/s-pack07.adb: Likewise.
	* libgnat/s-pack07.ads: Likewise.
	* libgnat/s-pack09.adb: Likewise.
	* libgnat/s-pack09.ads: Likewise.
	* libgnat/s-pack10.adb: Likewise.
	* libgnat/s-pack10.ads: Likewise.
	* libgnat/s-pack11.adb: Likewise.
	* libgnat/s-pack11.ads: Likewise.
	* libgnat/s-pack12.adb: Likewise.
	* libgnat/s-pack12.ads: Likewise.
	* libgnat/s-pack13.adb: Likewise.
	* libgnat/s-pack13.ads: Likewise.
	* libgnat/s-pack14.adb: Likewise.
	* libgnat/s-pack14.ads: Likewise.
	* libgnat/s-pack15.adb: Likewise.
	* libgnat/s-pack15.ads: Likewise.
	* libgnat/s-pack17.adb: Likewise.
	* libgnat/s-pack17.ads: Likewise.
	* libgnat/s-pack18.adb: Likewise.
	* libgnat/s-pack18.ads: Likewise.
	* libgnat/s-pack19.adb: Likewise.
	* libgnat/s-pack19.ads: Likewise.
	* libgnat/s-pack20.adb: Likewise.
	* libgnat/s-pack20.ads: Likewise.
	* libgnat/s-pack21.adb: Likewise.
	* libgnat/s-pack21.ads: Likewise.
	* libgnat/s-pack22.adb: Likewise.
	* libgnat/s-pack22.ads: Likewise.
	* libgnat/s-pack23.adb: Likewise.
	* libgnat/s-pack23.ads: Likewise.
	* libgnat/s-pack24.adb: Likewise.
	* libgnat/s-pack24.ads: Likewise.
	* libgnat/s-pack25.adb: Likewise.
	* libgnat/s-pack25.ads: Likewise.
	* libgnat/s-pack26.adb: Likewise.
	* libgnat/s-pack26.ads: Likewise.
	* libgnat/s-pack27.adb: Likewise.
	* libgnat/s-pack27.ads: Likewise.
	* libgnat/s-pack28.adb: Likewise.
	* libgnat/s-pack28.ads: Likewise.
	* libgnat/s-pack29.adb: Likewise.
	* libgnat/s-pack29.ads: Likewise.
	* libgnat/s-pack30.adb: Likewise.
	* libgnat/s-pack30.ads: Likewise.
	* libgnat/s-pack31.adb: Likewise.
	* libgnat/s-pack31.ads: Likewise.
	* libgnat/s-pack33.adb: Likewise.
	* libgnat/s-pack33.ads: Likewise.
	* libgnat/s-pack34.adb: Likewise.
	* libgnat/s-pack34.ads: Likewise.
	* libgnat/s-pack35.adb: Likewise.
	* libgnat/s-pack35.ads: Likewise.
	* libgnat/s-pack36.adb: Likewise.
	* libgnat/s-pack36.ads: Likewise.
	* libgnat/s-pack37.adb: Likewise.
	* libgnat/s-pack37.ads: Likewise.
	* libgnat/s-pack38.adb: Likewise.
	* libgnat/s-pack38.ads: Likewise.
	* libgnat/s-pack39.adb: Likewise.
	* libgnat/s-pack39.ads: Likewise.
	* libgnat/s-pack40.adb: Likewise.
	* libgnat/s-pack40.ads: Likewise.
	* libgnat/s-pack41.adb: Likewise.
	* libgnat/s-pack41.ads: Likewise.
	* libgnat/s-pack42.adb: Likewise.
	* libgnat/s-pack42.ads: Likewise.
	* libgnat/s-pack43.adb: Likewise.
	* libgnat/s-pack43.ads: Likewise.
	* libgnat/s-pack44.adb: Likewise.
	* libgnat/s-pack44.ads: Likewise.
	* libgnat/s-pack45.adb: Likewise.
	* libgnat/s-pack45.ads: Likewise.
	* libgnat/s-pack46.adb: Likewise.
	* libgnat/s-pack46.ads: Likewise.
	* libgnat/s-pack47.adb: Likewise.
	* libgnat/s-pack47.ads: Likewise.
	* libgnat/s-pack48.adb: Likewise.
	* libgnat/s-pack48.ads: Likewise.
	* libgnat/s-pack49.adb: Likewise.
	* libgnat/s-pack49.ads: Likewise.
	* libgnat/s-pack50.adb: Likewise.
	* libgnat/s-pack50.ads: Likewise.
	* libgnat/s-pack51.adb: Likewise.
	* libgnat/s-pack51.ads: Likewise.
	* libgnat/s-pack52.adb: Likewise.
	* libgnat/s-pack52.ads: Likewise.
	* libgnat/s-pack53.adb: Likewise.
	* libgnat/s-pack53.ads: Likewise.
	* libgnat/s-pack54.adb: Likewise.
	* libgnat/s-pack54.ads: Likewise.
	* libgnat/s-pack55.adb: Likewise.
	* libgnat/s-pack55.ads: Likewise.
	* libgnat/s-pack56.adb: Likewise.
	* libgnat/s-pack56.ads: Likewise.
	* libgnat/s-pack57.adb: Likewise.
	* libgnat/s-pack57.ads: Likewise.
	* libgnat/s-pack58.adb: Likewise.
	* libgnat/s-pack58.ads: Likewise.
	* libgnat/s-pack59.adb: Likewise.
	* libgnat/s-pack59.ads: Likewise.
	* libgnat/s-pack60.adb: Likewise.
	* libgnat/s-pack60.ads: Likewise.
	* libgnat/s-pack61.adb: Likewise.
	* libgnat/s-pack61.ads: Likewise.
	* libgnat/s-pack62.adb: Likewise.
	* libgnat/s-pack62.ads: Likewise.
	* libgnat/s-pack63.adb: Likewise.
	* libgnat/s-pack63.ads: Likewise.
	* libgnat/s-parame.adb: Likewise.
	* libgnat/s-parame.ads: Likewise.
	* libgnat/s-parame__ae653.ads: Likewise.
	* libgnat/s-parame__hpux.ads: Likewise.
	* libgnat/s-parame__rtems.adb: Likewise.
	* libgnat/s-parame__vxworks.adb: Likewise.
	* libgnat/s-parame__vxworks.ads: Likewise.
	* libgnat/s-parint.adb: Likewise.
	* libgnat/s-parint.ads: Likewise.
	* libgnat/s-pooglo.adb: Likewise.
	* libgnat/s-pooglo.ads: Likewise.
	* libgnat/s-pooloc.adb: Likewise.
	* libgnat/s-pooloc.ads: Likewise.
	* libgnat/s-poosiz.adb: Likewise.
	* libgnat/s-poosiz.ads: Likewise.
	* libgnat/s-powtab.ads: Likewise.
	* libgnat/s-purexc.ads: Likewise.
	* libgnat/s-rannum.adb: Likewise.
	* libgnat/s-rannum.ads: Likewise.
	* libgnat/s-ransee.adb: Likewise.
	* libgnat/s-ransee.ads: Likewise.
	* libgnat/s-regexp.adb: Likewise.
	* libgnat/s-regexp.ads: Likewise.
	* libgnat/s-regpat.adb: Likewise.
	* libgnat/s-regpat.ads: Likewise.
	* libgnat/s-resfil.adb: Likewise.
	* libgnat/s-resfil.ads: Likewise.
	* libgnat/s-restri.adb: Likewise.
	* libgnat/s-restri.ads: Likewise.
	* libgnat/s-rident.ads: Likewise.
	* libgnat/s-rpc.adb: Likewise.
	* libgnat/s-rpc.ads: Likewise.
	* libgnat/s-scaval.adb: Likewise.
	* libgnat/s-scaval.ads: Likewise.
	* libgnat/s-secsta.adb: Likewise.
	* libgnat/s-secsta.ads: Likewise.
	* libgnat/s-sequio.adb: Likewise.
	* libgnat/s-sequio.ads: Likewise.
	* libgnat/s-shasto.adb: Likewise.
	* libgnat/s-shasto.ads: Likewise.
	* libgnat/s-soflin.adb: Likewise.
	* libgnat/s-soflin.ads: Likewise.
	* libgnat/s-soliin.adb: Likewise.
	* libgnat/s-soliin.ads: Likewise.
	* libgnat/s-sopco3.adb: Likewise.
	* libgnat/s-sopco3.ads: Likewise.
	* libgnat/s-sopco4.adb: Likewise.
	* libgnat/s-sopco4.ads: Likewise.
	* libgnat/s-sopco5.adb: Likewise.
	* libgnat/s-sopco5.ads: Likewise.
	* libgnat/s-spsufi.adb: Likewise.
	* libgnat/s-spsufi.ads: Likewise.
	* libgnat/s-stache.adb: Likewise.
	* libgnat/s-stache.ads: Likewise.
	* libgnat/s-stalib.adb: Likewise.
	* libgnat/s-stalib.ads: Likewise.
	* libgnat/s-stausa.adb: Likewise.
	* libgnat/s-stausa.ads: Likewise.
	* libgnat/s-stchop.adb: Likewise.
	* libgnat/s-stchop.ads: Likewise.
	* libgnat/s-stchop__limit.ads: Likewise.
	* libgnat/s-stchop__rtems.adb: Likewise.
	* libgnat/s-stchop__vxworks.adb: Likewise.
	* libgnat/s-stoele.adb: Likewise.
	* libgnat/s-stoele.ads: Likewise.
	* libgnat/s-stopoo.adb: Likewise.
	* libgnat/s-stopoo.ads: Likewise.
	* libgnat/s-stposu.adb: Likewise.
	* libgnat/s-stposu.ads: Likewise.
	* libgnat/s-stratt.adb: Likewise.
	* libgnat/s-stratt.ads: Likewise.
	* libgnat/s-stratt__xdr.adb: Likewise.
	* libgnat/s-strcom.adb: Likewise.
	* libgnat/s-strcom.ads: Likewise.
	* libgnat/s-strhas.adb: Likewise.
	* libgnat/s-strhas.ads: Likewise.
	* libgnat/s-string.adb: Likewise.
	* libgnat/s-string.ads: Likewise.
	* libgnat/s-strops.adb: Likewise.
	* libgnat/s-strops.ads: Likewise.
	* libgnat/s-ststop.adb: Likewise.
	* libgnat/s-ststop.ads: Likewise.
	* libgnat/s-tasloc.adb: Likewise.
	* libgnat/s-tasloc.ads: Likewise.
	* libgnat/s-thread.ads: Likewise.
	* libgnat/s-thread__ae653.adb: Likewise.
	* libgnat/s-traceb.adb: Likewise.
	* libgnat/s-traceb.ads: Likewise.
	* libgnat/s-traceb__hpux.adb: Likewise.
	* libgnat/s-traceb__mastop.adb: Likewise.
	* libgnat/s-traent.adb: Likewise.
	* libgnat/s-traent.ads: Likewise.
	* libgnat/s-trasym.adb: Likewise.
	* libgnat/s-trasym.ads: Likewise.
	* libgnat/s-trasym__dwarf.adb: Likewise.
	* libgnat/s-tsmona.adb: Likewise.
	* libgnat/s-tsmona__linux.adb: Likewise.
	* libgnat/s-tsmona__mingw.adb: Likewise.
	* libgnat/s-unstyp.ads: Likewise.
	* libgnat/s-utf_32.adb: Likewise.
	* libgnat/s-utf_32.ads: Likewise.
	* libgnat/s-valboo.adb: Likewise.
	* libgnat/s-valboo.ads: Likewise.
	* libgnat/s-valcha.adb: Likewise.
	* libgnat/s-valcha.ads: Likewise.
	* libgnat/s-valdec.adb: Likewise.
	* libgnat/s-valdec.ads: Likewise.
	* libgnat/s-valenu.adb: Likewise.
	* libgnat/s-valenu.ads: Likewise.
	* libgnat/s-valint.adb: Likewise.
	* libgnat/s-valint.ads: Likewise.
	* libgnat/s-vallld.adb: Likewise.
	* libgnat/s-vallld.ads: Likewise.
	* libgnat/s-vallli.adb: Likewise.
	* libgnat/s-vallli.ads: Likewise.
	* libgnat/s-valllu.adb: Likewise.
	* libgnat/s-valllu.ads: Likewise.
	* libgnat/s-valrea.adb: Likewise.
	* libgnat/s-valrea.ads: Likewise.
	* libgnat/s-valuns.adb: Likewise.
	* libgnat/s-valuns.ads: Likewise.
	* libgnat/s-valuti.adb: Likewise.
	* libgnat/s-valuti.ads: Likewise.
	* libgnat/s-valwch.adb: Likewise.
	* libgnat/s-valwch.ads: Likewise.
	* libgnat/s-veboop.adb: Likewise.
	* libgnat/s-veboop.ads: Likewise.
	* libgnat/s-vector.ads: Likewise.
	* libgnat/s-vercon.adb: Likewise.
	* libgnat/s-vercon.ads: Likewise.
	* libgnat/s-wchcnv.adb: Likewise.
	* libgnat/s-wchcnv.ads: Likewise.
	* libgnat/s-wchcon.adb: Likewise.
	* libgnat/s-wchcon.ads: Likewise.
	* libgnat/s-wchjis.adb: Likewise.
	* libgnat/s-wchjis.ads: Likewise.
	* libgnat/s-wchstw.adb: Likewise.
	* libgnat/s-wchstw.ads: Likewise.
	* libgnat/s-wchwts.adb: Likewise.
	* libgnat/s-wchwts.ads: Likewise.
	* libgnat/s-widboo.adb: Likewise.
	* libgnat/s-widboo.ads: Likewise.
	* libgnat/s-widcha.adb: Likewise.
	* libgnat/s-widcha.ads: Likewise.
	* libgnat/s-widenu.adb: Likewise.
	* libgnat/s-widenu.ads: Likewise.
	* libgnat/s-widlli.adb: Likewise.
	* libgnat/s-widlli.ads: Likewise.
	* libgnat/s-widllu.adb: Likewise.
	* libgnat/s-widllu.ads: Likewise.
	* libgnat/s-widwch.adb: Likewise.
	* libgnat/s-widwch.ads: Likewise.
	* libgnat/s-win32.ads: Likewise.
	* libgnat/s-winext.ads: Likewise.
	* libgnat/s-wwdcha.adb: Likewise.
	* libgnat/s-wwdcha.ads: Likewise.
	* libgnat/s-wwdenu.adb: Likewise.
	* libgnat/s-wwdenu.ads: Likewise.
	* libgnat/s-wwdwch.adb: Likewise.
	* libgnat/s-wwdwch.ads: Likewise.
	* libgnat/system-aix.ads: Likewise.
	* libgnat/system-darwin-arm.ads: Likewise.
	* libgnat/system-darwin-ppc.ads: Likewise.
	* libgnat/system-darwin-x86.ads: Likewise.
	* libgnat/system-djgpp.ads: Likewise.
	* libgnat/system-dragonfly-x86_64.ads: Likewise.
	* libgnat/system-freebsd.ads: Likewise.
	* libgnat/system-hpux-ia64.ads: Likewise.
	* libgnat/system-hpux.ads: Likewise.
	* libgnat/system-linux-alpha.ads: Likewise.
	* libgnat/system-linux-arm.ads: Likewise.
	* libgnat/system-linux-hppa.ads: Likewise.
	* libgnat/system-linux-ia64.ads: Likewise.
	* libgnat/system-linux-m68k.ads: Likewise.
	* libgnat/system-linux-mips.ads: Likewise.
	* libgnat/system-linux-ppc.ads: Likewise.
	* libgnat/system-linux-riscv.ads: Likewise.
	* libgnat/system-linux-s390.ads: Likewise.
	* libgnat/system-linux-sh4.ads: Likewise.
	* libgnat/system-linux-sparc.ads: Likewise.
	* libgnat/system-linux-x86.ads: Likewise.
	* libgnat/system-lynxos178-ppc.ads: Likewise.
	* libgnat/system-lynxos178-x86.ads: Likewise.
	* libgnat/system-mingw.ads: Likewise.
	* libgnat/system-qnx-aarch64.ads: Likewise.
	* libgnat/system-rtems.ads: Likewise.
	* libgnat/system-solaris-sparc.ads: Likewise.
	* libgnat/system-solaris-x86.ads: Likewise.
	* libgnat/system-vxworks-arm-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks-arm-rtp.ads: Likewise.
	* libgnat/system-vxworks-arm.ads: Likewise.
	* libgnat/system-vxworks-e500-kernel.ads: Likewise.
	* libgnat/system-vxworks-e500-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks-e500-rtp.ads: Likewise.
	* libgnat/system-vxworks-e500-vthread.ads: Likewise.
	* libgnat/system-vxworks-ppc-kernel.ads: Likewise.
	* libgnat/system-vxworks-ppc-ravenscar.ads: Likewise.
	* libgnat/system-vxworks-ppc-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks-ppc-rtp.ads: Likewise.
	* libgnat/system-vxworks-ppc-vthread.ads: Likewise.
	* libgnat/system-vxworks-ppc.ads: Likewise.
	* libgnat/system-vxworks-x86-kernel.ads: Likewise.
	* libgnat/system-vxworks-x86-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks-x86-rtp.ads: Likewise.
	* libgnat/system-vxworks-x86-vthread.ads: Likewise.
	* libgnat/system-vxworks-x86.ads: Likewise.
	* libgnat/system-vxworks7-aarch64-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks7-aarch64.ads: Likewise.
	* libgnat/system-vxworks7-arm-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks7-arm.ads: Likewise.
	* libgnat/system-vxworks7-e500-kernel.ads: Likewise.
	* libgnat/system-vxworks7-e500-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks7-e500-rtp.ads: Likewise.
	* libgnat/system-vxworks7-ppc-kernel.ads: Likewise.
	* libgnat/system-vxworks7-ppc-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks7-ppc-rtp.ads: Likewise.
	* libgnat/system-vxworks7-ppc64-kernel.ads: Likewise.
	* libgnat/system-vxworks7-ppc64-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks7-x86-kernel.ads: Likewise.
	* libgnat/system-vxworks7-x86-rtp-smp.ads: Likewise.
	* libgnat/system-vxworks7-x86-rtp.ads: Likewise.
	* libgnat/system-vxworks7-x86_64-kernel.ads: Likewise.
	* libgnat/system-vxworks7-x86_64-rtp-smp.ads: Likewise.
	* libgnat/system.ads: Likewise.
	* link.c: Likewise.
	* live.adb: Likewise.
	* live.ads: Likewise.
	* locales.c: Likewise.
	* make.adb: Likewise.
	* make.ads: Likewise.
	* make_util.adb: Likewise.
	* make_util.ads: Likewise.
	* makeusg.adb: Likewise.
	* makeusg.ads: Likewise.
	* mdll-fil.adb: Likewise.
	* mdll-fil.ads: Likewise.
	* mdll-utl.adb: Likewise.
	* mdll-utl.ads: Likewise.
	* mdll.adb: Likewise.
	* mdll.ads: Likewise.
	* mingw32.h: Likewise.
	* mkdir.c: Likewise.
	* namet-sp.adb: Likewise.
	* namet-sp.ads: Likewise.
	* namet.adb: Likewise.
	* namet.ads: Likewise.
	* namet.h: Likewise.
	* nlists.adb: Likewise.
	* nlists.ads: Likewise.
	* nlists.h: Likewise.
	* opt.adb: Likewise.
	* opt.ads: Likewise.
	* osint-b.adb: Likewise.
	* osint-b.ads: Likewise.
	* osint-c.adb: Likewise.
	* osint-c.ads: Likewise.
	* osint-l.adb: Likewise.
	* osint-l.ads: Likewise.
	* osint-m.adb: Likewise.
	* osint-m.ads: Likewise.
	* osint.adb: Likewise.
	* osint.ads: Likewise.
	* output.adb: Likewise.
	* output.ads: Likewise.
	* par-ch10.adb: Likewise.
	* par-ch11.adb: Likewise.
	* par-ch12.adb: Likewise.
	* par-ch13.adb: Likewise.
	* par-ch2.adb: Likewise.
	* par-ch3.adb: Likewise.
	* par-ch4.adb: Likewise.
	* par-ch5.adb: Likewise.
	* par-ch6.adb: Likewise.
	* par-ch7.adb: Likewise.
	* par-ch8.adb: Likewise.
	* par-ch9.adb: Likewise.
	* par-endh.adb: Likewise.
	* par-labl.adb: Likewise.
	* par-load.adb: Likewise.
	* par-prag.adb: Likewise.
	* par-sync.adb: Likewise.
	* par-tchk.adb: Likewise.
	* par-util.adb: Likewise.
	* par.adb: Likewise.
	* par.ads: Likewise.
	* par_sco.adb: Likewise.
	* par_sco.ads: Likewise.
	* pprint.adb: Likewise.
	* pprint.ads: Likewise.
	* prep.adb: Likewise.
	* prep.ads: Likewise.
	* prepcomp.adb: Likewise.
	* prepcomp.ads: Likewise.
	* put_scos.adb: Likewise.
	* put_scos.ads: Likewise.
	* raise-gcc.c: Likewise.
	* raise.c: Likewise.
	* raise.h: Likewise.
	* repinfo-input.adb: Likewise.
	* repinfo-input.ads: Likewise.
	* repinfo.adb: Likewise.
	* repinfo.ads: Likewise.
	* repinfo.h: Likewise.
	* restrict.adb: Likewise.
	* restrict.ads: Likewise.
	* rident.ads: Likewise.
	* rtfinal.c: Likewise.
	* rtinit.c: Likewise.
	* rtsfind.adb: Likewise.
	* rtsfind.ads: Likewise.
	* runtime.h: Likewise.
	* s-oscons-tmplt.c: Likewise.
	* sa_messages.adb: Likewise.
	* sa_messages.ads: Likewise.
	* scans.adb: Likewise.
	* scans.ads: Likewise.
	* scil_ll.adb: Likewise.
	* scil_ll.ads: Likewise.
	* scn.adb: Likewise.
	* scn.ads: Likewise.
	* scng.adb: Likewise.
	* scng.ads: Likewise.
	* scos.adb: Likewise.
	* scos.ads: Likewise.
	* scos.h: Likewise.
	* sdefault.ads: Likewise.
	* seh_init.c: Likewise.
	* sem.adb: Likewise.
	* sem.ads: Likewise.
	* sem_aggr.adb: Likewise.
	* sem_aggr.ads: Likewise.
	* sem_attr.adb: Likewise.
	* sem_attr.ads: Likewise.
	* sem_aux.adb: Likewise.
	* sem_aux.ads: Likewise.
	* sem_case.adb: Likewise.
	* sem_case.ads: Likewise.
	* sem_cat.adb: Likewise.
	* sem_cat.ads: Likewise.
	* sem_ch10.adb: Likewise.
	* sem_ch10.ads: Likewise.
	* sem_ch11.adb: Likewise.
	* sem_ch11.ads: Likewise.
	* sem_ch12.adb: Likewise.
	* sem_ch12.ads: Likewise.
	* sem_ch13.adb: Likewise.
	* sem_ch13.ads: Likewise.
	* sem_ch2.adb: Likewise.
	* sem_ch2.ads: Likewise.
	* sem_ch3.adb: Likewise.
	* sem_ch3.ads: Likewise.
	* sem_ch4.adb: Likewise.
	* sem_ch4.ads: Likewise.
	* sem_ch5.adb: Likewise.
	* sem_ch5.ads: Likewise.
	* sem_ch6.adb: Likewise.
	* sem_ch6.ads: Likewise.
	* sem_ch7.adb: Likewise.
	* sem_ch7.ads: Likewise.
	* sem_ch8.adb: Likewise.
	* sem_ch8.ads: Likewise.
	* sem_ch9.adb: Likewise.
	* sem_ch9.ads: Likewise.
	* sem_dim.adb: Likewise.
	* sem_dim.ads: Likewise.
	* sem_disp.adb: Likewise.
	* sem_disp.ads: Likewise.
	* sem_dist.adb: Likewise.
	* sem_dist.ads: Likewise.
	* sem_elab.adb: Likewise.
	* sem_elab.ads: Likewise.
	* sem_elim.adb: Likewise.
	* sem_elim.ads: Likewise.
	* sem_eval.adb: Likewise.
	* sem_eval.ads: Likewise.
	* sem_intr.adb: Likewise.
	* sem_intr.ads: Likewise.
	* sem_mech.adb: Likewise.
	* sem_mech.ads: Likewise.
	* sem_prag.adb: Likewise.
	* sem_prag.ads: Likewise.
	* sem_res.adb: Likewise.
	* sem_res.ads: Likewise.
	* sem_scil.adb: Likewise.
	* sem_scil.ads: Likewise.
	* sem_smem.adb: Likewise.
	* sem_smem.ads: Likewise.
	* sem_type.adb: Likewise.
	* sem_type.ads: Likewise.
	* sem_util.adb: Likewise.
	* sem_util.ads: Likewise.
	* sem_warn.adb: Likewise.
	* sem_warn.ads: Likewise.
	* set_targ.adb: Likewise.
	* set_targ.ads: Likewise.
	* sfn_scan.adb: Likewise.
	* sfn_scan.ads: Likewise.
	* sigtramp-armdroid.c: Likewise.
	* sigtramp-ios.c: Likewise.
	* sigtramp-qnx.c: Likewise.
	* sigtramp-vxworks.c: Likewise.
	* sigtramp.h: Likewise.
	* sinfo-cn.adb: Likewise.
	* sinfo-cn.ads: Likewise.
	* sinfo.adb: Likewise.
	* sinfo.ads: Likewise.
	* sinput-c.adb: Likewise.
	* sinput-c.ads: Likewise.
	* sinput-d.adb: Likewise.
	* sinput-d.ads: Likewise.
	* sinput-l.adb: Likewise.
	* sinput-l.ads: Likewise.
	* sinput.adb: Likewise.
	* sinput.ads: Likewise.
	* socket.c: Likewise.
	* spark_xrefs.adb: Likewise.
	* spark_xrefs.ads: Likewise.
	* sprint.adb: Likewise.
	* sprint.ads: Likewise.
	* stand.adb: Likewise.
	* stand.ads: Likewise.
	* stringt.adb: Likewise.
	* stringt.ads: Likewise.
	* stringt.h: Likewise.
	* style.adb: Likewise.
	* style.ads: Likewise.
	* styleg.adb: Likewise.
	* styleg.ads: Likewise.
	* stylesw.adb: Likewise.
	* stylesw.ads: Likewise.
	* switch-b.adb: Likewise.
	* switch-b.ads: Likewise.
	* switch-c.adb: Likewise.
	* switch-c.ads: Likewise.
	* switch-m.adb: Likewise.
	* switch-m.ads: Likewise.
	* switch.adb: Likewise.
	* switch.ads: Likewise.
	* symbols.adb: Likewise.
	* symbols.ads: Likewise.
	* sysdep.c: Likewise.
	* table.adb: Likewise.
	* table.ads: Likewise.
	* targext.c: Likewise.
	* targparm.adb: Likewise.
	* targparm.ads: Likewise.
	* tbuild.adb: Likewise.
	* tbuild.ads: Likewise.
	* tempdir.adb: Likewise.
	* tempdir.ads: Likewise.
	* terminals.c: Likewise.
	* tracebak.c: Likewise.
	* tree_gen.adb: Likewise.
	* tree_gen.ads: Likewise.
	* tree_in.adb: Likewise.
	* tree_in.ads: Likewise.
	* tree_io.adb: Likewise.
	* tree_io.ads: Likewise.
	* treepr.adb: Likewise.
	* treepr.ads: Likewise.
	* ttypes.ads: Likewise.
	* types.adb: Likewise.
	* types.ads: Likewise.
	* types.h: Likewise.
	* uintp.adb: Likewise.
	* uintp.ads: Likewise.
	* uintp.h: Likewise.
	* uname.adb: Likewise.
	* uname.ads: Likewise.
	* urealp.adb: Likewise.
	* urealp.ads: Likewise.
	* urealp.h: Likewise.
	* usage.adb: Likewise.
	* usage.ads: Likewise.
	* validsw.adb: Likewise.
	* validsw.ads: Likewise.
	* warnsw.adb: Likewise.
	* warnsw.ads: Likewise.
	* widechar.adb: Likewise.
	* widechar.ads: Likewise.
	* xeinfo.adb: Likewise.
	* xnmake.adb: Likewise.
	* xoscons.adb: Likewise.
	* xr_tabls.adb: Likewise.
	* xr_tabls.ads: Likewise.
	* xref_lib.adb: Likewise.
	* xref_lib.ads: Likewise.
	* xsinfo.adb: Likewise.
	* xsnamest.adb: Likewise.
	* xtreeprs.adb: Likewise.
	* xutil.adb: Likewise.
	* xutil.ads: Likewise.

2020-06-02  Javier Miranda  <miranda@adacore.com>

	* sem_ch3.adb (Analyze_Object_Declaration): Set attribute
	Expansion_Delayed on aggregates that initialize an object that
	has aspect alignment or address clause. Done to allow ther
	initialization by means of multiple assignments.
	* exp_ch3.adb (Expand_N_Object_Declaration): Resolve delayed
	aggregates. This patch complements the patch applied to
	sem_ch3.adb

2020-06-02  Javier Miranda  <miranda@adacore.com>

	* sem_util.adb (Ensure_Minimum_Decoration): New subprogram that
	ensures the minimum decoration required by
	Requires_Transient_Scope() to provide its functionality when the
	entity is not frozen.

2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_ch4.adb (Expand_N_Op_Divide): Remove code dealing with
	the Treat_Fixed_As_Integer flag.
	(Expand_N_Op_Multiply): Likewise.
	* exp_fixd.adb (Build_Divide): Do the division in an integer
	type long enough to hold both operands and convert the result
	to the type of the LHS.  Do not set Treat_Fixed_As_Integer.
	(Build_Multiply): Do not set Treat_Fixed_As_Integer.
	(Build_Rem): Likewise.
	* sem_ch4.adb (Analyze_Arithmetic_Op): Remove code dealing with
	the Treat_Fixed_As_Integer flag.
	(Check_Arithmetic_Pair): Likewise.
	* sinfo.ads (Treat_Fixed_As_Integer): Delete.
	(N_Has_Treat_Fixed_As_Integer): Likewise.
	(Set_Treat_Fixed_As_Integer): Likewise.
	* sinfo.adb (Treat_Fixed_As_Integer): Likewise.
	(Set_Treat_Fixed_As_Integer): Likewise.
	* sprint.ads (Syntax Extensions): Remove '#' special character.
	* sprint.adb (Process_TFAI_RR_Flags): Delete.
	(Sprint_Node_Actual) <N_Op_Divide>: Print '@' manually.
	<N_Op_Multiply>: Likewise.
	<N_Op_Mod>: Do not print '#'.
	<N_Op_Rem>: Likewise.

2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_aggr.adb (Others_Check): In the positional case, use the
	general expression for the comparison only when needed.
	* exp_attr.adb (Expand_Fpt_Attribute;): Use a simple conversion
	to the target type instead of an unchecked conversion to the
	base type to do the range check, as in the other cases.
	(Expand_N_Attribute_Reference) <Attribute_Storage_Size>: Do the
	Max operation in the type of the storage size variable, and use
	Convert_To as in the other cases.
	* tbuild.adb (Convert_To): Do not get rid of an intermediate
	conversion to Universal_Integer here...
	* sem_res.adb  (Simplify_Type_Conversion): ...but here instead.

2020-06-02  Bob Duff  <duff@adacore.com>

	* doc/gnat_ugn/gnat_utility_programs.rst: Update documentation
	for --RM-style-spacing.

2020-06-02  Bob Duff  <duff@adacore.com>

	* doc/gnat_ugn/gnat_utility_programs.rst: Add documentation for
	--[no-]compact switch.

2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_aggr.adb (Build_Array_Aggr_Code): Set the type of the PAT
	on the zero used to clear the array.
	* exp_attr.adb (Expand_N_Attribute_Reference)
	<Attribute_Alignment>: In the CW case, directly convert from the
	alignment's type to the target type if the parent is an
	unchecked conversion.
	* sem_res.adb (Set_String_Literal_Subtype): In the dynamic case,
	use the general expression for the upper bound only when needed.
	Set the base type of the index as the type of the low bound.
	(Simplify_Type_Conversion): Do an intermediate conversion to the
	root type of the target type if the operand is an integer
	literal.
	* tbuild.adb (Convert_To): Get rid of an intermediate conversion
	to Universal_Integer if the inner expression has integer tyoe.
	* libgnat/a-sequio.adb (Byte_Swap): Make use of an equivalent
	static expression in the case statement.

2020-06-02  Thomas Quinot  <quinot@adacore.com>

	* par_sco.adb (Traverse_Degenerate_Subprogram): Set statement
	code to 'X'.
	* scos.ads: Update comment documenting SCO data.

2020-06-02  Gary Dismukes  <dismukes@adacore.com>

	* exp_unst.adb (Register_Subprogram): Test for Address_Taken (in
	addition to the existing test for In_Synchonized_Unit) when
	deciding whether to reset the Reachable flag on all subprograms
	enclosing the subprogram being registered.

2020-06-02  Justin Squirek  <squirek@adacore.com>

	* sem_ch6.adb (Check_Return_Obj_Accessibility): Avoid use of
	parent node pointers so we are not relying on expansion done in
	GNATprove mode.

2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_attr.adb (Expand_N_Attribute_Reference)
	<Attribute_Alignment>: Adjust comment and compare against proper
	type.

2020-06-02  Gary Dismukes  <dismukes@adacore.com>

	* exp_unst.adb (Visit_Node): When visiting array attribute
	nodes, apply Get_Referenced_Object to the attribute prefix, to
	handle prefixes denoting renamed objects by picking up the Etype
	of the renamed object rather than the possibly unconstrained
	nominal subtype of the renaming declaration's Entity.
	* sem_util.ads (Get_Referenced_Object): Update comment to
	clearly indicate that any kind of node can be passed to this
	function.
	* sem_util.adb (Get_Referenced_Object): Add test of Is_Object to
	the condition, to allow for passing names that denote types and
	subtypes.

2020-06-02  Bob Duff  <duff@adacore.com>

	* snames.ads-tmpl: Add comments explaining that enumeration
	types have to be kept in synch with subtypes of Name_Id.

2020-06-02  Piotr Trojanek  <trojanek@adacore.com>

	* sem_util.adb (Check_No_Hidden_State): Remove dead code.

2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_pakd.adb (Expand_Packed_Bit_Reference): Change type of
	reference from Universal_Integer to Standard_Natural.

2020-06-02  Piotr Trojanek  <trojanek@adacore.com>

	* sem_prag.adb (Collect_States_And_Objects): Call itself on
	declaration of nested packages; append abstract states
	one-by-one, so that in recursive call we do not overwrite the
	ones that have been already collected.

2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_atag.ads (Build_Inherit_Predefined_Prims): Change type
	of Num_Predef_Prim parameter from Int to Nat.
	* exp_atag.adb (Build_Range): New procedure.
	(Build_Val): Likewise.
	(Build_CW_Membership): Call Build_Val.
	(Build_Get_Predefined_Prim_Op_Address): Likewise.
	(Build_Inherit_CPP_Prims): Likewise.
	(Build_Get_Prim_Op_Address): Likewise.
	(Build_Set_Predefined_Prim_Op_Address): Likewise.
	(Build_Inherit_Prims): Call Build_Range.
	(Build_Inherit_Predefined_Prims): Likewise.  Change type of
	Num_Predef_Prim parameter from Int to Nat.

2020-06-02  Gary Dismukes  <dismukes@adacore.com>

	* sem_ch3.adb: Two typo fixes.

2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch3.adb (Replace_Discriminants): Preserve the Etype of the
	Name of N_Variant_Part nodes when rewriting it.

2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch3.adb (Signed_Integer_Type_Declaration): Change the type
	of the bounds from Universal_Integer to Implicit_Base.

2020-06-02  Arnaud Charlet  <charlet@adacore.com>

	* bcheck.adb, binde.adb, bindo-diagnostics.adb, checks.adb,
	exp_aggr.adb, exp_ch3.adb, exp_ch4.adb, exp_ch7.adb,
	exp_ch9.adb, gnatname.adb, sem_case.adb, sem_ch13.adb,
	sem_ch5.adb, sem_prag.adb, sem_util.adb, uintp.adb, urealp.adb,
	xoscons.adb, xr_tabls.adb, xref_lib.adb: Initialize objects more
	explicitly and add corresponding assertions. Remove dead code.
	Also add a few Annotate pragmas to help static analysis.
	* libgnat/a-caldel.adb, libgnat/a-calend.adb,
	libgnat/a-ngcoty.adb, libgnat/a-ngelfu.adb,
	libgnat/a-ngrear.adb, libgnat/a-strfix.adb,
	libgnat/g-calend.adb, libgnat/g-catiio.adb,
	libgnat/g-comlin.adb, libgnat/g-debpoo.adb,
	libgnat/g-dirope.adb, libgnat/g-hesorg.adb,
	libgnat/g-pehage.adb, libgnat/g-socket.adb, libgnat/i-cobol.adb,
	libgnat/s-dwalin.adb, libgnat/s-dwalin.ads,
	libgnat/s-fatgen.adb, libgnat/s-gearop.adb,
	libgnat/s-genbig.adb, libgnat/s-imgrea.adb,
	libgnat/s-os_lib.adb, libgnat/s-rannum.adb,
	libgnat/s-regpat.adb, libgnat/s-trasym__dwarf.adb,
	libgnat/s-valrea.adb: Ditto.

2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_ch3.adb (Replace_Components): Rename into...
	(Replace_Discriminants): ...this.  Replace girder discriminants
	with non-girder ones.  Do not replace components.
	* sem_ch13.adb (Check_Record_Representation_Clause): Deal with
	non-girder discriminants correctly.

2020-06-02  Piotr Trojanek  <trojanek@adacore.com>

	* lib-xref-spark_specific.adb (Create_Heap): use a new variant
	of Name_Enter to directly converts String to Make_Id.

2020-06-02  Gary Dismukes  <dismukes@adacore.com>

	* exp_attr.adb, par-ch4.adb, par-util.adb, scans.ads, scng.adb,
	sem_attr.adb, sem_ch4.adb, sinfo.ads: Typo corrections and minor
	reformatting.

2020-06-02  Arnaud Charlet  <charlet@adacore.com>

	* snames.ads-tmpl (Name_Img, Attribute_Img): Make it an
	attribute returning renamable functions.

2020-06-02  Yannick Moy  <moy@adacore.com>

	* sem_prag.adb, sem_prag.ads (Set_Overflow_Mode): New procedure
	to set overflow mode.

2020-06-02  Piotr Trojanek  <trojanek@adacore.com>

	* contracts.adb, einfo.adb, exp_ch9.adb, sem_ch12.adb,
	sem_ch4.adb, sem_ch7.adb, sem_ch8.adb, sem_elab.adb,
	sem_type.adb, sem_util.adb: Reuse Is_Package_Or_Generic_Package
	where possible (similarly, reuse Is_Concurrent_Type if it was
	possible in the same expressions).

2020-05-30  Arnaud Charlet  <charlet@adacore.com>

	* Makefile.rtl (ADA_INCLUDE_SRCS): Replace Makefile.adalib by
	libada.gpr and associated project files.
	(g-debpoo.o): Add missing rule to ensure subprograms are not reordered.
	(setup-rts): Add generation of libgnat/libgnarl.lst.
	(LIBGNAT_SRCS): Remove thread.c which is part of libgnarl.
	* tracebak.c, tb-gcc.c: Merged the two files to simplify dependencies.
	* libgnarl/libgnarl.gpr, libgnat/libada.gpr,
	libgnat/libgnat.gpr, libgnat/libgnat_common.gpr: New files.
	* doc/gnat_ugn/the_gnat_compilation_model.rst: Makefile.adalib
	replaced by libada.gpr.
	* libgnat/system-mingw.ads: Remove obsolete comment.
	* gcc-interface/Makefile.in: Remove dependency on tb-gcc.c.

2020-05-27  Martin Liska  <mliska@suse.cz>

	* gnatvsn.ads: Bump Library_Version to 11.

2020-05-26  Eric Botcazou  <ebotcazou@gcc.gnu.org>

	PR ada/95333
	* gcc-interface/decl.c (gnat_to_gnu_param): Never make a variant of
	the type.

2020-05-26  Alexandre Oliva  <oliva@adacore.com>

	* gcc-interface/lang-specs.h (ADA_DUMPS_OPTIONS): Define in
	terms of DUMPS_OPTIONS.  Replace occurrences of %{d*} %:dumps
	with it.

2020-05-26  Alexandre Oliva  <oliva@adacore.com>

	* gcc-interface/lang-specs.h: Drop auxbase and auxbase-strip.
	Use %:dumps instead of -dumpbase.  Add %w for implicit .s
	primary output.
	* switch.adb (Is_Internal_GCC_Switch): Recognize dumpdir and
	dumpbase-ext.  Drop auxbase and auxbase-strip.

2020-05-25  Yannick Moy  <moy@adacore.com>

	* sem_util.adb (Check_No_Hidden_State): Stop propagation at
	first block/task/entry.

2020-05-25  Yannick Moy  <moy@adacore.com>

	* doc/gnat_rm/implementation_defined_pragmas.rst: Document
	changes to pragmas Compile_Time_Error/Compile_Time_Warning.
	* gnat_rm.texi: Regenerate.
	* libgnat/g-bytswa.adb: Change uses of Compile_Time_Error to
	Compile_Time_Warning, as the actual expression may not always be
	known statically.
	* sem_prag.adb (Analyze_Pragma): Handle differently pragma
	Compile_Time_Error in both compilation and in GNATprove mode.
	(Validate_Compile_Time_Warning_Or_Error): Issue an error or
	warning when the expression is not known at compile time.
	* usage.adb: Add missing documentation for warning switches _c
	and _r.
	* warnsw.ads: Update comment.

2020-05-25  Justin Squirek  <squirek@adacore.com>

	* sem_ch6.adb (Check_Return_Obj_Accessibility): Use original
	node to avoid looking at expansion done in GNATprove mode.

2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity): Add new local variable
	and use it throughout the function.
	<E_Variable>: Rename local variable and adjust accordingly.  In the
	case of a renaming, materialize the entity if the renamed object is
	an N_Expression_With_Actions node.
	<E_Procedure>: Use Alias accessor function consistently.

2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/misc.c (get_array_bit_stride): Get to the debug type,
	if any, before calling gnat_get_array_descr_info.

2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Tidy up.
	(build_variant_list): Add GNAT_VARIANT_PART parameter and annotate its
	variants if it is present.  Adjust the recursive call by passing the
	variant subpart of variants, if any.
	(copy_and_substitute_in_layout): Rename GNU_SUBST_LIST to SUBST_LIST
	and adjust throughout.  For a type, pass the variant part in the
	call to build_variant_list.

2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_component_type): Cap the alignment
	of the component type according to the component size.

2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Add a
	description of the various types associated with the unconstrained
	type.  Declare the fat pointer earlier.  Set the current function
	as context on the template type, and the fat pointer type on the
	array type.  Always mark the fat pointer type as artificial and set
	it as the context for the pointer type to the array.  Also reuse
	GNU_ENTITY_NAME.  Finish up the unconstrained type at the very end.
	* gcc-interface/misc.c (gnat_get_array_descr_info): Do not handle
	fat pointer types and tidy up accordingly.
	* gcc-interface/utils.c (build_unc_object_type): Do not set the
	context on the template type.
	(gnat_pushdecl): Mark the canonical fat pointer types as artificial.

2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (operand_type): New static inline function.
	* gcc-interface/trans.c (gnat_to_gnu): Do not suppress conversion
	to the resulty type at the end for array types.
	* gcc-interface/utils2.c (build_binary_op) <MODIFY_EXPR>: Do not
	remove conversions between array types on the LHS.

2020-05-12  Eric Botcazou  <ebotcazou@adacore.com>

	* sem_aggr.ads (Is_Single_Aggregate): New function.
	* sem_aggr.adb (Is_Others_Aggregate): Use local variable.
	(Is_Single_Aggregate): New function to recognize an aggregate with
	a single association containing a single choice.
	* fe.h (Is_Others_Aggregate): Delete.
	(Is_Single_Aggregate): New declaration.
	* gcc-interface/trans.c (gnat_to_gnu) <N_Assignment_Statement>: Call
	Is_Single_Aggregate instead of Is_Others_Aggregate.

2020-05-12  Eric Botcazou  <ebotcazou@adacore.com>

	PR ada/95035
	* gcc-interface/utils.c (packable_type_hasher::equal): Also compare
	the scalar storage order.
	(hash_packable_type): Also hash the scalar storage order.
	(hash_pad_type): Likewise.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/*.[ch]: Update copyright year.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Access>: Assert that
	the prefix is not a type.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/ada-tree.h (TYPE_PACKED_ARRAY_TYPE_P): Rename into...
	(TYPE_BIT_PACKED_ARRAY_TYPE_P): ...this.
	(TYPE_IS_PACKED_ARRAY_TYPE_P): Rename into...
	(BIT_PACKED_ARRAY_TYPE_P): ...this.
	(TYPE_IMPL_PACKED_ARRAY_P): Adjust to above renaming.
	* gcc-interface/gigi.h (maybe_pad_type): Remove IS_USER_TYPE parameter.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Adjust call
	to maybe_pad_type.
	<E_Ordinary_Fixed_Point_Type>: Remove const qualifiers for tree.
	<E_Signed_Integer_Subtype>: Remove redundant test and redundant call
	to associate_original_type_to_packed_array.  Turn test into assertion.
	Call associate_original_type_to_packed_array and modify gnu_entity_name
	accordingly.  Explicitly set the parallel type for GNAT encodings.
	Call create_type_decl in the misaligned case before maybe_pad_type.
	<E_Array_Type>: Do not use the name of the implementation type for a
	packed array when not using GNAT encodings.
	<E_Array_Subtype>: Move around setting flags. Use the result of the
	call to associate_original_type_to_packed_array for gnu_entity_name.
	<E_Record_Subtype>: Create XVS type and XVZ variable only if debug
	info is requested for the type.
	Call create_type_decl if a padded type was created for a type entity.
	(gnat_to_gnu_component_type): Use local variable and adjust calls to
	maybe_pad_type.
	(gnat_to_gnu_subprog_type): Adjust call to maybe_pad_type.
	(gnat_to_gnu_field): Likewise.
	(validate_size): Adjust to renaming of macro.
	(set_rm_size): Likewise.
	(associate_original_type_to_packed_array): Adjust return type and
	return the name of the original type if GNAT encodings are not used.
	* gcc-interface/misc.c (gnat_get_debug_typ): Remove obsolete stuff.
	(gnat_get_fixed_point_type_info): Remove const qualifiers for tree.
	(gnat_get_array_descr_info): Likewise and set variables lazily.
	Remove call to maybe_debug_type.  Simplify a few computations.
	(enumerate_modes): Remove const qualifier for tree.
	* gcc-interface/utils.c (make_type_from_size): Adjust to renaming.
	(maybe_pad_type): Remove IS_USER_TYPE parameter and adjust.  Remove
	specific code for implementation types for packed arrays.
	(compute_deferred_decl_context): Remove const qualifier for tree.
	(convert): Adjust call to maybe_pad_type.
	(unchecked_convert): Likewise.
	* gcc-interface/utils2.c (is_simple_additive_expressio): Likewise.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/utils2.c (build_binary_op) <ARRAY_RANGE_REF>: Use
	build_nonshared_array_type to build the common type and declare it.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/misc.c (gnat_init_gcc_eh): Do not override the user
	for -fnon-call-exceptions in default mode.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (lvalue_required_p) <N_Selected_Component>:
	Merge with N_Slice.
	<N_Allocator>: Move to...
	(lvalue_for_aggregate_p): ...here.  New function.
	(Identifier_to_gnu): For an identifier with aggregate type, also
	call lvalue_for_aggregate_p if lvalue_required_p returned false
	before substituting the identifier with the constant.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (gnat_to_gnu): Do not wrap boolean values if
	they appear in any kind of attribute references.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (gnat_to_gnu) <N_Assignment_Statement>: Deal
	with qualified "others" aggregates in the memset case.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_param): Also back-annotate the
	mechanism in the case of an Out parameter only passed by copy-out.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (change_qualified_type): Move around.
	(maybe_vector_array): Likewise.
	(maybe_padded_object): New static line function.
	* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Component_Size>:
	Remove useless code.
	<Attr_Null_Parameter>: Remove obsolete code.
	(Call_to_gn): Likewise.  Use maybe_padded_object to remove padding.
	(gnat_to_gnu): Likewise.
	<N_String_Literal>: Do not add a useless null character at the end.
	<N_Indexed_Component>: Likewise and remove obsolete code.
	(add_decl_expr): Likewise.
	(maybe_implicit_deref): Likewise.
	* gcc-interface/utils.c (maybe_unconstrained_array): Likewise.
	* gcc-interface/utils2.c (gnat_invariant_expr): Likewise.

2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/utils2.c: Include builtins.h.
	(known_alignment) <ADDR_EXPR>: Use DECL_ALIGN for DECL_P operands
	and get_object_alignment for the rest.

2020-05-08  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Force at
	least the unit size for an aliased object of a constrained nominal
	subtype whose size is variable.

2020-05-08  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Deal
	with artificial maximally-sized types designed by access types.
	* gcc-interface/utils.c (packable_type_hash): New structure.
	(packable_type_hasher): Likewise.
	(packable_type_hash_table): New hash table.
	(init_gnat_utils): Initialize it.
	(destroy_gnat_utils): Destroy it.
	(packable_type_hasher::equal): New method.
	(hash_packable_type): New static function.
	(canonicalize_packable_type): Likewise.
	(make_packable_type): Make sure not to use too small a type for the
	size of the new fields.  Canonicalize the type if it is named.

2020-05-08  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (Raise_Error_to_gnu): Always compute a lower
	bound and an upper bound for use by the -gnateE switch for range and
	comparison operators.

2020-05-08  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_param): Do not make a variant of
	the type in LTO mode.

2020-05-04  Mikael Pettersson  <mikpelinux@gmail.com>

	PR bootstrap/94918
	* mingw32.h: Prevent windows.h from including emmintrin.h on Cygwin64.
	* s-oscons-tmplt.c (Serial_Port_Descriptor): Use System.Win32.HANDLE
	also on Cygwin.

2020-03-11  Richard Wai  <richard@annexi-strayline.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity): Also test Is_Public on
	the Alias of the entitiy, if it is present, in the main assertion.

2020-02-06  Alexandre Oliva <oliva@adacore.com>

	* raise-gcc.c (personality_body) [__ARM_EABI_UNWINDER__]:
	Initialize barrier_cache.sp when ending phase1.

2020-01-04  Eric Botcazou  <ebotcazou@adacore.com>

	* gnatvsn.ads: Bump copyright year.

2020-01-01  Jakub Jelinek  <jakub@redhat.com>

	Update copyright years.

  	* gnat_ugn.texi: Bump @copying's copyright year.
  	* gnat_rm.texi: Likewise.

Copyright (C) 2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
