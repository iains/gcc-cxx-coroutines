; Built-in functions for PowerPC.
; Copyright (C) 2020-21 Free Software Foundation, Inc.
; Contributed by Bill Schmidt, IBM <wschmidt@linux.ibm.com>
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT ANY
; WARRANTY; without even the implied warranty of MERCHANTABILITY or
; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
; for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.


; Built-in functions in this file are organized into "stanzas", where
; all built-ins in a given stanza are enabled together.  Each stanza
; starts with a line identifying the circumstances in which the group of
; functions is permitted, with the gating predicate in square brackets.
; For example, this could be
;
;     [altivec]
;
;   or it could be
;
;     [power9]
;
; The bracketed gating predicate is the only information allowed on
; the stanza header line, other than whitespace.
;
; Following the stanza header are two lines for each function: the
; prototype line and the attributes line.  The prototype line has
; this format, where the square brackets indicate optional
; information and angle brackets indicate required information:
;
;   [kind] <return-type> <bif-name> (<argument-list>);
;
; Here [kind] can be one of "const", "pure", or "fpmath";
; <return-type> is a legal type for a built-in function result;
; <bif-name> is the name by which the function can be called;
; and <argument-list> is a comma-separated list of legal types
; for built-in function arguments.  The argument list may be
; empty, but the parentheses and semicolon are required.
;
; A legal type is of the form:
;
;   [const] [[signed|unsigned] <basetype> | <vectype>] [*]
;
; where "const" applies only to a <basetype> of "int".  Legal values
; of <basetype> are (for now):
;
;   char
;   short
;   int
;   long
;   long double
;   long long
;   float
;   double
;   __int128
;   _Float128
;   bool
;   string
;   _Decimal32
;   _Decimal64
;   _Decimal128
;   __ibm128
;
; Legal values of <vectype> are as follows, and are shorthand for
; the associated meaning:
;
;   vsc		vector signed char
;   vuc		vector unsigned char
;   vbc		vector bool char
;   vss		vector signed short
;   vus		vector unsigned short
;   vbs		vector bool short
;   vsi		vector signed int
;   vui		vector unsigned int
;   vbi		vector bool int
;   vsll	vector signed long long
;   vull	vector unsigned long long
;   vbll	vector bool long long
;   vsq		vector signed __int128
;   vuq		vector unsigned __int128
;   vbq		vector bool __int128
;   vp		vector pixel
;   vf		vector float
;   vd		vector double
;   v256	__vector_pair
;   v512	__vector_quad
;
; For simplicity, We don't support "short int" and "long long int".
; We don't currently support a <basetype> of "_Float16".  "signed"
; and "unsigned" only apply to integral base types.  The optional *
; indicates a pointer type.
;
; The attributes line looks like this:
;
;   <bif-id> <bif-pattern> {<attribute-list>}
;
; Here <bif-id> is a unique internal identifier for the built-in
; function that will be used as part of an enumeration of all
; built-in functions; <bif-pattern> is the define_expand or
; define_insn that will be invoked when the call is expanded;
; and <attribute-list> is a comma-separated list of special
; conditions that apply to the built-in function.  The attribute
; list may be empty, but the braces are required.
;
; Attributes are strings, and the allowed ones are listed below.
;
;   init     Process as a vec_init function
;   set      Process as a vec_set function
;   extract  Process as a vec_extract function
;   nosoft   Not valid with -msoft-float
;   ldvec    Needs special handling for vec_ld semantics
;   stvec    Needs special handling for vec_st semantics
;   reve     Needs special handling for element reversal
;   pred     Needs special handling for comparison predicates
;   htm      Needs special handling for transactional memory
;   htmspr   HTM function using an SPR
;   htmcr    HTM function using a CR
;   mma      Needs special handling for MMA
;   quad     MMA instruction using a register quad as an input operand
;   pair     MMA instruction using a register pair as an input operand
;   no32bit  Not valid for TARGET_32BIT
;   32bit    Requires different handling for TARGET_32BIT
;   cpu      This is a "cpu_is" or "cpu_supports" builtin
;   ldstmask Altivec mask for load or store
;   lxvrse   Needs special handling for load-rightmost, sign-extended
;   lxvrze   Needs special handling for load-rightmost, zero-extended
;   endian   Needs special handling for endianness
;
; Each attribute corresponds to extra processing required when
; the built-in is expanded.  All such special processing should
; be controlled by an attribute from now on.
;
; It is important to note that each entry's <bif-name> must be
; unique.  The code generated from this file will call def_builtin
; for each entry, and this can only happen once per name.
;
; The type signature for the builtin must match the modes of the RTL
; pattern <bif-pattern>.  When a builtin is used only as a basis for
; overloading, you can use an arbitrary type for each mode (for example,
; for V8HImode, you could use vp, vss, vus, or vbs).  The overloading
; machinery takes care of adding appropriate casts between vectors to
; satisfy impedance matching.  The overloaded prototypes are the ones
; that must match what users expect.  Thus you will often have a small
; number of entries in this file that correspond to a much greater
; number of entries in rs6000-overload.def.
;
; However, builtins in this file that are expected to be directly called
; by users must have one version for each expected type combination.
;
; Eventually we want to automatically generate built-in documentation
; from the entries in this file.  Documenting of built-ins with more
; than one acceptable prototype can be done by cross-referencing
; against rs6000-overload.def and picking up the allowable prototypes
; from there.
;
; Blank lines may be used as desired in this file between the lines as
; defined above; that is, you can introduce as many extra newlines as you
; like after a required newline, but nowhere else.  Lines beginning with
; a semicolon are also treated as blank lines.
;
; A const int argument may be restricted to certain values.  This is
; indicated by one of the following occurring after the "int" token:
;
;    <x>   restricts the constant to x bits, interpreted as unsigned
;    <x,y> restricts the constant to the inclusive range [x,y]
;    [x,y] restricts the constant to the inclusive range [x,y],
;	   but only applies if the argument is constant.
;    {x,y} restricts the constant to one of two values, x or y.
;
; Here x and y are integer tokens.  Note that the "const" token is a
; lie when the restriction is [x,y], but this simplifies the parsing
; significantly and is hopefully forgivable.



; Builtins that have been around since time immemorial or are just
; considered available everywhere.
[always]
  void __builtin_cpu_init ();
    CPU_INIT nothing {cpu}

  bool __builtin_cpu_is (string);
    CPU_IS nothing {cpu}

  bool __builtin_cpu_supports (string);
    CPU_SUPPORTS nothing {cpu}

  unsigned long long __builtin_ppc_get_timebase ();
    GET_TB rs6000_get_timebase {}

  double __builtin_mffs ();
    MFFS rs6000_mffs {}

; This thing really assumes long double == __ibm128, and I'm told it has
; been used as such within libgcc.  Given that __builtin_pack_ibm128
; exists for the same purpose, this should really not be used at all.
; TODO: Consider adding special handling for this to warn whenever
; long double is not __ibm128.
  const long double __builtin_pack_longdouble (double, double);
    PACK_TF packtf {}

  unsigned long __builtin_ppc_mftb ();
    MFTB rs6000_mftb_di {32bit}

  void __builtin_mtfsb0 (const int<5>);
    MTFSB0 rs6000_mtfsb0 {}

  void __builtin_mtfsb1 (const int<5>);
    MTFSB1 rs6000_mtfsb1 {}

  void __builtin_mtfsf (const int<8>, double);
    MTFSF rs6000_mtfsf {}

  const __ibm128 __builtin_pack_ibm128 (double, double);
    PACK_IF packif {}

  void __builtin_set_fpscr_rn (const int[0,3]);
    SET_FPSCR_RN rs6000_set_fpscr_rn {}

  const double __builtin_unpack_ibm128 (__ibm128, const int<1>);
    UNPACK_IF unpackif {}

; See above comments for __builtin_pack_longdouble.
  const double __builtin_unpack_longdouble (long double, const int<1>);
    UNPACK_TF unpacktf {}


; Builtins that have been around just about forever, but not quite.
[power5]
  fpmath double __builtin_recipdiv (double, double);
    RECIP recipdf3 {}

  fpmath float __builtin_recipdivf (float, float);
    RECIPF recipsf3 {}

  fpmath double __builtin_rsqrt (double);
    RSQRT rsqrtdf2 {}

  fpmath float __builtin_rsqrtf (float);
    RSQRTF rsqrtsf2 {}


; Power6 builtins (ISA 2.05).
[power6]
  const signed long __builtin_p6_cmpb (signed long, signed long);
    CMPB cmpbdi3 {}

  const signed int __builtin_p6_cmpb_32 (signed int, signed int);
    CMPB_32 cmpbsi3 {}


; AltiVec builtins.
[altivec]
  const vsc __builtin_altivec_abs_v16qi (vsc);
    ABS_V16QI absv16qi2 {}

  const vf __builtin_altivec_abs_v4sf (vf);
    ABS_V4SF absv4sf2 {}

  const vsi __builtin_altivec_abs_v4si (vsi);
    ABS_V4SI absv4si2 {}

  const vss __builtin_altivec_abs_v8hi (vss);
    ABS_V8HI absv8hi2 {}

  const vsc __builtin_altivec_abss_v16qi (vsc);
    ABSS_V16QI altivec_abss_v16qi {}

  const vsi __builtin_altivec_abss_v4si (vsi);
    ABSS_V4SI altivec_abss_v4si {}

  const vss __builtin_altivec_abss_v8hi (vss);
    ABSS_V8HI altivec_abss_v8hi {}

  const vf __builtin_altivec_copysignfp (vf, vf);
    COPYSIGN_V4SF vector_copysignv4sf3 {}

  void __builtin_altivec_dss (const int<2>);
    DSS altivec_dss {}

  void __builtin_altivec_dssall ();
    DSSALL altivec_dssall {}

  void __builtin_altivec_dst (void *, const int, const int<2>);
    DST altivec_dst {}

  void __builtin_altivec_dstst (void *, const int, const int<2>);
    DSTST altivec_dstst {}

  void __builtin_altivec_dststt (void *, const int, const int<2>);
    DSTSTT altivec_dststt {}

  void __builtin_altivec_dstt (void *, const int, const int<2>);
    DSTT altivec_dstt {}

  fpmath vsi __builtin_altivec_fix_sfsi (vf);
    FIX_V4SF_V4SI fix_truncv4sfv4si2 {}

  fpmath vui __builtin_altivec_fixuns_sfsi (vf);
    FIXUNS_V4SF_V4SI fixuns_truncv4sfv4si2 {}

  fpmath vf __builtin_altivec_float_sisf (vsi);
    FLOAT_V4SI_V4SF floatv4siv4sf2 {}

  pure vsc __builtin_altivec_lvebx (signed long, const void *);
    LVEBX altivec_lvebx {ldvec}

  pure vss __builtin_altivec_lvehx (signed long, const void *);
    LVEHX altivec_lvehx {ldvec}

  pure vsi __builtin_altivec_lvewx (signed long, const void *);
    LVEWX altivec_lvewx {ldvec}

  pure vuc __builtin_altivec_lvsl (signed long, const void *);
    LVSL altivec_lvsl {ldvec}

  pure vuc __builtin_altivec_lvsr (signed long, const void *);
    LVSR altivec_lvsr {ldvec}

  pure vsi __builtin_altivec_lvx (signed long, const void *);
    LVX altivec_lvx_v4si {ldvec}

  pure vsq __builtin_altivec_lvx_v1ti (signed long, const void *);
    LVX_V1TI altivec_lvx_v1ti {ldvec}

  pure vsc __builtin_altivec_lvx_v16qi (signed long, const void *);
    LVX_V16QI altivec_lvx_v16qi {ldvec}

  pure vf __builtin_altivec_lvx_v4sf (signed long, const void *);
    LVX_V4SF altivec_lvx_v4sf {ldvec}

  pure vsi __builtin_altivec_lvx_v4si (signed long, const void *);
    LVX_V4SI altivec_lvx_v4si {ldvec}

  pure vss __builtin_altivec_lvx_v8hi (signed long, const void *);
    LVX_V8HI altivec_lvx_v8hi {ldvec}

  pure vsi __builtin_altivec_lvxl (signed long, const void *);
    LVXL altivec_lvxl_v4si {ldvec}

  pure vsc __builtin_altivec_lvxl_v16qi (signed long, const void *);
    LVXL_V16QI altivec_lvxl_v16qi {ldvec}

  pure vf __builtin_altivec_lvxl_v4sf (signed long, const void *);
    LVXL_V4SF altivec_lvxl_v4sf {ldvec}

  pure vsi __builtin_altivec_lvxl_v4si (signed long, const void *);
    LVXL_V4SI altivec_lvxl_v4si {ldvec}

  pure vss __builtin_altivec_lvxl_v8hi (signed long, const void *);
    LVXL_V8HI altivec_lvxl_v8hi {ldvec}

  const vsc __builtin_altivec_mask_for_load (const void *);
    MASK_FOR_LOAD altivec_lvsr_direct {ldstmask}

  vss __builtin_altivec_mfvscr ();
    MFVSCR altivec_mfvscr {}

  void __builtin_altivec_mtvscr (vsi);
    MTVSCR altivec_mtvscr {}

  const vsll __builtin_altivec_vmulesw (vsi, vsi);
    VMULESW vec_widen_smult_even_v4si {}

  const vull __builtin_altivec_vmuleuw (vui, vui);
    VMULEUW vec_widen_umult_even_v4si {}

  const vsll __builtin_altivec_vmulosw (vsi, vsi);
    VMULOSW vec_widen_smult_odd_v4si {}

  const vull __builtin_altivec_vmulouw (vui, vui);
    VMULOUW vec_widen_umult_odd_v4si {}

  const vsc __builtin_altivec_nabs_v16qi (vsc);
    NABS_V16QI nabsv16qi2 {}

  const vf __builtin_altivec_nabs_v4sf (vf);
    NABS_V4SF vsx_nabsv4sf2 {}

  const vsi __builtin_altivec_nabs_v4si (vsi);
    NABS_V4SI nabsv4si2 {}

  const vss __builtin_altivec_nabs_v8hi (vss);
    NABS_V8HI nabsv8hi2 {}

  void __builtin_altivec_stvebx (vsc, signed long, void *);
    STVEBX altivec_stvebx {stvec}

  void __builtin_altivec_stvehx (vss, signed long, void *);
    STVEHX altivec_stvehx {stvec}

  void __builtin_altivec_stvewx (vsi, signed long, void *);
    STVEWX altivec_stvewx {stvec}

  void __builtin_altivec_stvx (vsi, signed long, void *);
    STVX altivec_stvx_v4si {stvec}

  void __builtin_altivec_stvx_v16qi (vsc, signed long, void *);
    STVX_V16QI altivec_stvx_v16qi {stvec}

  void __builtin_altivec_stvx_v4sf (vf, signed long, void *);
    STVX_V4SF altivec_stvx_v4sf {stvec}

  void __builtin_altivec_stvx_v4si (vsi, signed long, void *);
    STVX_V4SI altivec_stvx_v4si {stvec}

  void __builtin_altivec_stvx_v8hi (vss, signed long, void *);
    STVX_V8HI altivec_stvx_v8hi {stvec}

  void __builtin_altivec_stvxl (vsi, signed long, void *);
    STVXL altivec_stvxl_v4si {stvec}

  void __builtin_altivec_stvxl_v16qi (vsc, signed long, void *);
    STVXL_V16QI altivec_stvxl_v16qi {stvec}

  void __builtin_altivec_stvxl_v4sf (vf, signed long, void *);
    STVXL_V4SF altivec_stvxl_v4sf {stvec}

  void __builtin_altivec_stvxl_v4si (vsi, signed long, void *);
    STVXL_V4SI altivec_stvxl_v4si {stvec}

  void __builtin_altivec_stvxl_v8hi (vss, signed long, void *);
    STVXL_V8HI altivec_stvxl_v8hi {stvec}

  fpmath vf __builtin_altivec_uns_float_sisf (vui);
    UNSFLOAT_V4SI_V4SF floatunsv4siv4sf2 {}

  const vui __builtin_altivec_vaddcuw (vui, vui);
    VADDCUW altivec_vaddcuw {}

  const vf __builtin_altivec_vaddfp (vf, vf);
    VADDFP addv4sf3 {}

  const vsc __builtin_altivec_vaddsbs (vsc, vsc);
    VADDSBS altivec_vaddsbs {}

  const vss __builtin_altivec_vaddshs (vss, vss);
    VADDSHS altivec_vaddshs {}

  const vsi __builtin_altivec_vaddsws (vsi, vsi);
    VADDSWS altivec_vaddsws {}

  const vuc __builtin_altivec_vaddubm (vuc, vuc);
    VADDUBM addv16qi3 {}

  const vuc __builtin_altivec_vaddubs (vuc, vuc);
    VADDUBS altivec_vaddubs {}

  const vus __builtin_altivec_vadduhm (vus, vus);
    VADDUHM addv8hi3 {}

  const vus __builtin_altivec_vadduhs (vus, vus);
    VADDUHS altivec_vadduhs {}

  const vsi __builtin_altivec_vadduwm (vsi, vsi);
    VADDUWM addv4si3 {}

  const vui __builtin_altivec_vadduws (vui, vui);
    VADDUWS altivec_vadduws {}

  const vsc __builtin_altivec_vand_v16qi (vsc, vsc);
    VAND_V16QI andv16qi3 {}

  const vuc __builtin_altivec_vand_v16qi_uns (vuc, vuc);
    VAND_V16QI_UNS andv16qi3 {}

  const vf __builtin_altivec_vand_v4sf (vf, vf);
    VAND_V4SF andv4sf3 {}

  const vsi __builtin_altivec_vand_v4si (vsi, vsi);
    VAND_V4SI andv4si3 {}

  const vui __builtin_altivec_vand_v4si_uns (vui, vui);
    VAND_V4SI_UNS andv4si3 {}

  const vss __builtin_altivec_vand_v8hi (vss, vss);
    VAND_V8HI andv8hi3 {}

  const vus __builtin_altivec_vand_v8hi_uns (vus, vus);
    VAND_V8HI_UNS andv8hi3 {}

  const vsc __builtin_altivec_vandc_v16qi (vsc, vsc);
    VANDC_V16QI andcv16qi3 {}

  const vuc __builtin_altivec_vandc_v16qi_uns (vuc, vuc);
    VANDC_V16QI_UNS andcv16qi3 {}

  const vf __builtin_altivec_vandc_v4sf (vf, vf);
    VANDC_V4SF andcv4sf3 {}

  const vsi __builtin_altivec_vandc_v4si (vsi, vsi);
    VANDC_V4SI andcv4si3 {}

  const vui __builtin_altivec_vandc_v4si_uns (vui, vui);
    VANDC_V4SI_UNS andcv4si3 {}

  const vss __builtin_altivec_vandc_v8hi (vss, vss);
    VANDC_V8HI andcv8hi3 {}

  const vus __builtin_altivec_vandc_v8hi_uns (vus, vus);
    VANDC_V8HI_UNS andcv8hi3 {}

  const vsc __builtin_altivec_vavgsb (vsc, vsc);
    VAVGSB avgv16qi3_ceil {}

  const vss __builtin_altivec_vavgsh (vss, vss);
    VAVGSH avgv8hi3_ceil {}

  const vsi __builtin_altivec_vavgsw (vsi, vsi);
    VAVGSW avgv4si3_ceil {}

  const vuc __builtin_altivec_vavgub (vuc, vuc);
    VAVGUB uavgv16qi3_ceil {}

  const vus __builtin_altivec_vavguh (vus, vus);
    VAVGUH uavgv8hi3_ceil {}

  const vui __builtin_altivec_vavguw (vui, vui);
    VAVGUW uavgv4si3_ceil {}

  const vf __builtin_altivec_vcfsx (vsi, const int<5>);
    VCFSX altivec_vcfsx {}

  const vf __builtin_altivec_vcfux (vui, const int<5>);
    VCFUX altivec_vcfux {}

  const vsi __builtin_altivec_vcmpbfp (vf, vf);
    VCMPBFP altivec_vcmpbfp {}

  const int __builtin_altivec_vcmpbfp_p (int, vf, vf);
    VCMPBFP_P altivec_vcmpbfp_p {pred}

  const vf __builtin_altivec_vcmpeqfp (vf, vf);
    VCMPEQFP vector_eqv4sf {}

  const int __builtin_altivec_vcmpeqfp_p (int, vf, vf);
    VCMPEQFP_P vector_eq_v4sf_p {pred}

  const vsc __builtin_altivec_vcmpequb (vuc, vuc);
    VCMPEQUB vector_eqv16qi {}

  const int __builtin_altivec_vcmpequb_p (int, vsc, vsc);
    VCMPEQUB_P vector_eq_v16qi_p {pred}

  const vss __builtin_altivec_vcmpequh (vus, vus);
    VCMPEQUH vector_eqv8hi {}

  const int __builtin_altivec_vcmpequh_p (int, vss, vss);
    VCMPEQUH_P vector_eq_v8hi_p {pred}

  const vsi __builtin_altivec_vcmpequw (vui, vui);
    VCMPEQUW vector_eqv4si {}

  const int __builtin_altivec_vcmpequw_p (int, vsi, vsi);
    VCMPEQUW_P vector_eq_v4si_p {pred}

  const vf __builtin_altivec_vcmpgefp (vf, vf);
    VCMPGEFP vector_gev4sf {}

  const int __builtin_altivec_vcmpgefp_p (int, vf, vf);
    VCMPGEFP_P vector_ge_v4sf_p {pred}

  const vf __builtin_altivec_vcmpgtfp (vf, vf);
    VCMPGTFP vector_gtv4sf {}

  const int __builtin_altivec_vcmpgtfp_p (int, vf, vf);
    VCMPGTFP_P vector_gt_v4sf_p {pred}

  const vsc __builtin_altivec_vcmpgtsb (vsc, vsc);
    VCMPGTSB vector_gtv16qi {}

  const int __builtin_altivec_vcmpgtsb_p (int, vsc, vsc);
    VCMPGTSB_P vector_gt_v16qi_p {pred}

  const vss __builtin_altivec_vcmpgtsh (vss, vss);
    VCMPGTSH vector_gtv8hi {}

  const int __builtin_altivec_vcmpgtsh_p (int, vss, vss);
    VCMPGTSH_P vector_gt_v8hi_p {pred}

  const vsi __builtin_altivec_vcmpgtsw (vsi, vsi);
    VCMPGTSW vector_gtv4si {}

  const int __builtin_altivec_vcmpgtsw_p (int, vsi, vsi);
    VCMPGTSW_P vector_gt_v4si_p {pred}

  const vsc __builtin_altivec_vcmpgtub (vuc, vuc);
    VCMPGTUB vector_gtuv16qi {}

  const int __builtin_altivec_vcmpgtub_p (int, vsc, vsc);
    VCMPGTUB_P vector_gtu_v16qi_p {pred}

  const vss __builtin_altivec_vcmpgtuh (vus, vus);
    VCMPGTUH vector_gtuv8hi {}

  const int __builtin_altivec_vcmpgtuh_p (int, vss, vss);
    VCMPGTUH_P vector_gtu_v8hi_p {pred}

  const vsi __builtin_altivec_vcmpgtuw (vui, vui);
    VCMPGTUW vector_gtuv4si {}

  const int __builtin_altivec_vcmpgtuw_p (int, vsi, vsi);
    VCMPGTUW_P vector_gtu_v4si_p {pred}

  const vsi __builtin_altivec_vctsxs (vf, const int<5>);
    VCTSXS altivec_vctsxs {}

  const vui __builtin_altivec_vctuxs (vf, const int<5>);
    VCTUXS altivec_vctuxs {}

  fpmath vf __builtin_altivec_vexptefp (vf);
    VEXPTEFP altivec_vexptefp {}

  fpmath vf __builtin_altivec_vlogefp (vf);
    VLOGEFP altivec_vlogefp {}

  fpmath vf __builtin_altivec_vmaddfp (vf, vf, vf);
    VMADDFP fmav4sf4 {}

  const vf __builtin_altivec_vmaxfp (vf, vf);
    VMAXFP smaxv4sf3 {}

  const vsc __builtin_altivec_vmaxsb (vsc, vsc);
    VMAXSB smaxv16qi3 {}

  const vuc __builtin_altivec_vmaxub (vuc, vuc);
    VMAXUB umaxv16qi3 {}

  const vss __builtin_altivec_vmaxsh (vss, vss);
    VMAXSH smaxv8hi3 {}

  const vsi __builtin_altivec_vmaxsw (vsi, vsi);
    VMAXSW smaxv4si3 {}

  const vus __builtin_altivec_vmaxuh (vus, vus);
    VMAXUH umaxv8hi3 {}

  const vui __builtin_altivec_vmaxuw (vui, vui);
    VMAXUW umaxv4si3 {}

  vss __builtin_altivec_vmhaddshs (vss, vss, vss);
    VMHADDSHS altivec_vmhaddshs {}

  vss __builtin_altivec_vmhraddshs (vss, vss, vss);
    VMHRADDSHS altivec_vmhraddshs {}

  const vf __builtin_altivec_vminfp (vf, vf);
    VMINFP sminv4sf3 {}

  const vsc __builtin_altivec_vminsb (vsc, vsc);
    VMINSB sminv16qi3 {}

  const vss __builtin_altivec_vminsh (vss, vss);
    VMINSH sminv8hi3 {}

  const vsi __builtin_altivec_vminsw (vsi, vsi);
    VMINSW sminv4si3 {}

  const vuc __builtin_altivec_vminub (vuc, vuc);
    VMINUB uminv16qi3 {}

  const vus __builtin_altivec_vminuh (vus, vus);
    VMINUH uminv8hi3 {}

  const vui __builtin_altivec_vminuw (vui, vui);
    VMINUW uminv4si3 {}

  const vss __builtin_altivec_vmladduhm (vss, vss, vss);
    VMLADDUHM fmav8hi4 {}

  const vsc __builtin_altivec_vmrghb (vsc, vsc);
    VMRGHB altivec_vmrghb {}

  const vss __builtin_altivec_vmrghh (vss, vss);
    VMRGHH altivec_vmrghh {}

  const vsi __builtin_altivec_vmrghw (vsi, vsi);
    VMRGHW altivec_vmrghw {}

  const vsc __builtin_altivec_vmrglb (vsc, vsc);
    VMRGLB altivec_vmrglb {}

  const vss __builtin_altivec_vmrglh (vss, vss);
    VMRGLH altivec_vmrglh {}

  const vsi __builtin_altivec_vmrglw (vsi, vsi);
    VMRGLW altivec_vmrglw {}

  const vsi __builtin_altivec_vmsummbm (vsc, vuc, vsi);
    VMSUMMBM altivec_vmsummbm {}

  const vsi __builtin_altivec_vmsumshm (vss, vss, vsi);
    VMSUMSHM altivec_vmsumshm {}

  vsi __builtin_altivec_vmsumshs (vss, vss, vsi);
    VMSUMSHS altivec_vmsumshs {}

  const vui __builtin_altivec_vmsumubm (vuc, vuc, vui);
    VMSUMUBM altivec_vmsumubm {}

  const vui __builtin_altivec_vmsumuhm (vus, vus, vui);
    VMSUMUHM altivec_vmsumuhm {}

  vui __builtin_altivec_vmsumuhs (vus, vus, vui);
    VMSUMUHS altivec_vmsumuhs {}

  const vss __builtin_altivec_vmulesb (vsc, vsc);
    VMULESB vec_widen_smult_even_v16qi {}

  const vsi __builtin_altivec_vmulesh (vss, vss);
    VMULESH vec_widen_smult_even_v8hi {}

  const vus __builtin_altivec_vmuleub (vuc, vuc);
    VMULEUB vec_widen_umult_even_v16qi {}

  const vui __builtin_altivec_vmuleuh (vus, vus);
    VMULEUH vec_widen_umult_even_v8hi {}

  const vss __builtin_altivec_vmulosb (vsc, vsc);
    VMULOSB vec_widen_smult_odd_v16qi {}

  const vus __builtin_altivec_vmuloub (vuc, vuc);
    VMULOUB vec_widen_umult_odd_v16qi {}

  const vsi __builtin_altivec_vmulosh (vss, vss);
    VMULOSH vec_widen_smult_odd_v8hi {}

  const vui __builtin_altivec_vmulouh (vus, vus);
    VMULOUH vec_widen_umult_odd_v8hi {}

  fpmath vf __builtin_altivec_vnmsubfp (vf, vf, vf);
    VNMSUBFP nfmsv4sf4 {}

  const vsc __builtin_altivec_vnor_v16qi (vsc, vsc);
    VNOR_V16QI norv16qi3 {}

  const vuc __builtin_altivec_vnor_v16qi_uns (vuc, vuc);
    VNOR_V16QI_UNS norv16qi3 {}

  const vf __builtin_altivec_vnor_v4sf (vf, vf);
    VNOR_V4SF norv4sf3 {}

  const vsi __builtin_altivec_vnor_v4si (vsi, vsi);
    VNOR_V4SI norv4si3 {}

  const vui __builtin_altivec_vnor_v4si_uns (vui, vui);
    VNOR_V4SI_UNS norv4si3 {}

  const vss __builtin_altivec_vnor_v8hi (vss, vss);
    VNOR_V8HI norv8hi3 {}

  const vus __builtin_altivec_vnor_v8hi_uns (vus, vus);
    VNOR_V8HI_UNS norv8hi3 {}

  const vsc __builtin_altivec_vor_v16qi (vsc, vsc);
    VOR_V16QI iorv16qi3 {}

  const vuc __builtin_altivec_vor_v16qi_uns (vuc, vuc);
    VOR_V16QI_UNS iorv16qi3 {}

  const vf __builtin_altivec_vor_v4sf (vf, vf);
    VOR_V4SF iorv4sf3 {}

  const vsi __builtin_altivec_vor_v4si (vsi, vsi);
    VOR_V4SI iorv4si3 {}

  const vui __builtin_altivec_vor_v4si_uns (vui, vui);
    VOR_V4SI_UNS iorv4si3 {}

  const vss __builtin_altivec_vor_v8hi (vss, vss);
    VOR_V8HI iorv8hi3 {}

  const vus __builtin_altivec_vor_v8hi_uns (vus, vus);
    VOR_V8HI_UNS iorv8hi3 {}

  const vsc __builtin_altivec_vperm_16qi (vsc, vsc, vuc);
    VPERM_16QI altivec_vperm_v16qi {}

  const vuc __builtin_altivec_vperm_16qi_uns (vuc, vuc, vuc);
    VPERM_16QI_UNS altivec_vperm_v16qi_uns {}

  const vsq __builtin_altivec_vperm_1ti (vsq, vsq, vuc);
    VPERM_1TI altivec_vperm_v1ti {}

  const vuq __builtin_altivec_vperm_1ti_uns (vuq, vuq, vuc);
    VPERM_1TI_UNS altivec_vperm_v1ti_uns {}

  const vf __builtin_altivec_vperm_4sf (vf, vf, vuc);
    VPERM_4SF altivec_vperm_v4sf {}

  const vsi __builtin_altivec_vperm_4si (vsi, vsi, vuc);
    VPERM_4SI altivec_vperm_v4si {}

  const vui __builtin_altivec_vperm_4si_uns (vui, vui, vuc);
    VPERM_4SI_UNS altivec_vperm_v4si_uns {}

  const vss __builtin_altivec_vperm_8hi (vss, vss, vuc);
    VPERM_8HI altivec_vperm_v8hi {}

  const vus __builtin_altivec_vperm_8hi_uns (vus, vus, vuc);
    VPERM_8HI_UNS altivec_vperm_v8hi_uns {}

  const vp __builtin_altivec_vpkpx (vui, vui);
    VPKPX altivec_vpkpx {}

  const vsc __builtin_altivec_vpkshss (vss, vss);
    VPKSHSS altivec_vpkshss {}

  const vuc __builtin_altivec_vpkshus (vss, vss);
    VPKSHUS altivec_vpkshus {}

  const vss __builtin_altivec_vpkswss (vsi, vsi);
    VPKSWSS altivec_vpkswss {}

  const vus __builtin_altivec_vpkswus (vsi, vsi);
    VPKSWUS altivec_vpkswus {}

  const vsc __builtin_altivec_vpkuhum (vss, vss);
    VPKUHUM altivec_vpkuhum {}

  const vuc __builtin_altivec_vpkuhus (vus, vus);
    VPKUHUS altivec_vpkuhus {}

  const vss __builtin_altivec_vpkuwum (vsi, vsi);
    VPKUWUM altivec_vpkuwum {}

  const vus __builtin_altivec_vpkuwus (vui, vui);
    VPKUWUS altivec_vpkuwus {}

  const vf __builtin_altivec_vrecipdivfp (vf, vf);
    VRECIPFP recipv4sf3 {}

  fpmath vf __builtin_altivec_vrefp (vf);
    VREFP rev4sf2 {}

  const vsc __builtin_altivec_vreve_v16qi (vsc);
    VREVE_V16QI altivec_vrevev16qi2 {}

  const vf __builtin_altivec_vreve_v4sf (vf);
    VREVE_V4SF altivec_vrevev4sf2 {}

  const vsi __builtin_altivec_vreve_v4si (vsi);
    VREVE_V4SI altivec_vrevev4si2 {}

  const vss __builtin_altivec_vreve_v8hi (vss);
    VREVE_V8HI altivec_vrevev8hi2 {}

  fpmath vf __builtin_altivec_vrfim (vf);
    VRFIM vector_floorv4sf2 {}

  fpmath vf __builtin_altivec_vrfin (vf);
    VRFIN altivec_vrfin {}

  fpmath vf __builtin_altivec_vrfip (vf);
    VRFIP vector_ceilv4sf2 {}

  fpmath vf __builtin_altivec_vrfiz (vf);
    VRFIZ vector_btruncv4sf2 {}

  const vsc __builtin_altivec_vrlb (vsc, vsc);
    VRLB vrotlv16qi3 {}

  const vss __builtin_altivec_vrlh (vss, vss);
    VRLH vrotlv8hi3 {}

  const vsi __builtin_altivec_vrlw (vsi, vsi);
    VRLW vrotlv4si3 {}

  fpmath vf __builtin_altivec_vrsqrtefp (vf);
    VRSQRTEFP rsqrtev4sf2 {}

  fpmath vf __builtin_altivec_vrsqrtfp (vf);
    VRSQRTFP rsqrtv4sf2 {}

  const vsc __builtin_altivec_vsel_16qi (vsc, vsc, vuc);
    VSEL_16QI vector_select_v16qi {}

  const vuc __builtin_altivec_vsel_16qi_uns (vuc, vuc, vuc);
    VSEL_16QI_UNS vector_select_v16qi_uns {}

  const vsq __builtin_altivec_vsel_1ti (vsq, vsq, vuq);
    VSEL_1TI vector_select_v1ti {}

  const vuq __builtin_altivec_vsel_1ti_uns (vuq, vuq, vuq);
    VSEL_1TI_UNS vector_select_v1ti_uns {}

  const vf __builtin_altivec_vsel_4sf (vf, vf, vf);
    VSEL_4SF vector_select_v4sf {}

  const vsi __builtin_altivec_vsel_4si (vsi, vsi, vui);
    VSEL_4SI vector_select_v4si {}

  const vui __builtin_altivec_vsel_4si_uns (vui, vui, vui);
    VSEL_4SI_UNS vector_select_v4si_uns {}

  const vss __builtin_altivec_vsel_8hi (vss, vss, vus);
    VSEL_8HI vector_select_v8hi {}

  const vus __builtin_altivec_vsel_8hi_uns (vus, vus, vus);
    VSEL_8HI_UNS vector_select_v8hi_uns {}

  const vsi __builtin_altivec_vsl (vsi, vsi);
    VSL altivec_vsl {}

  const vsc __builtin_altivec_vslb (vsc, vuc);
    VSLB vashlv16qi3 {}

  const vsc __builtin_altivec_vsldoi_16qi (vsc, vsc, const int<4>);
    VSLDOI_16QI altivec_vsldoi_v16qi {}

  const vf __builtin_altivec_vsldoi_4sf (vf, vf, const int<4>);
    VSLDOI_4SF altivec_vsldoi_v4sf {}

  const vsi __builtin_altivec_vsldoi_4si (vsi, vsi, const int<4>);
    VSLDOI_4SI altivec_vsldoi_v4si {}

  const vss __builtin_altivec_vsldoi_8hi (vss, vss, const int<4>);
    VSLDOI_8HI altivec_vsldoi_v8hi {}

  const vss __builtin_altivec_vslh (vss, vus);
    VSLH vashlv8hi3 {}

  const vsi __builtin_altivec_vslo (vsi, vsi);
    VSLO altivec_vslo {}

  const vsi __builtin_altivec_vslw (vsi, vui);
    VSLW vashlv4si3 {}

  const vsc __builtin_altivec_vspltb (vsc, const int<4>);
    VSPLTB altivec_vspltb {}

  const vss __builtin_altivec_vsplth (vss, const int<3>);
    VSPLTH altivec_vsplth {}

  const vsc __builtin_altivec_vspltisb (const int<-16,15>);
    VSPLTISB altivec_vspltisb {}

  const vss __builtin_altivec_vspltish (const int<-16,15>);
    VSPLTISH altivec_vspltish {}

  const vsi __builtin_altivec_vspltisw (const int<-16,15>);
    VSPLTISW altivec_vspltisw {}

  const vsi __builtin_altivec_vspltw (vsi, const int<2>);
    VSPLTW altivec_vspltw {}

  const vsi __builtin_altivec_vsr (vsi, vsi);
    VSR altivec_vsr {}

  const vsc __builtin_altivec_vsrab (vsc, vuc);
    VSRAB vashrv16qi3 {}

  const vss __builtin_altivec_vsrah (vss, vus);
    VSRAH vashrv8hi3 {}

  const vsi __builtin_altivec_vsraw (vsi, vui);
    VSRAW vashrv4si3 {}

  const vsc __builtin_altivec_vsrb (vsc, vuc);
    VSRB vlshrv16qi3 {}

  const vss __builtin_altivec_vsrh (vss, vus);
    VSRH vlshrv8hi3 {}

  const vsi __builtin_altivec_vsro (vsi, vsi);
    VSRO altivec_vsro {}

  const vsi __builtin_altivec_vsrw (vsi, vui);
    VSRW vlshrv4si3 {}

  const vsi __builtin_altivec_vsubcuw (vsi, vsi);
    VSUBCUW altivec_vsubcuw {}

  const vf __builtin_altivec_vsubfp (vf, vf);
    VSUBFP subv4sf3 {}

  const vsc __builtin_altivec_vsubsbs (vsc, vsc);
    VSUBSBS altivec_vsubsbs {}

  const vss __builtin_altivec_vsubshs (vss, vss);
    VSUBSHS altivec_vsubshs {}

  const vsi __builtin_altivec_vsubsws (vsi, vsi);
    VSUBSWS altivec_vsubsws {}

  const vuc __builtin_altivec_vsububm (vuc, vuc);
    VSUBUBM subv16qi3 {}

  const vuc __builtin_altivec_vsububs (vuc, vuc);
    VSUBUBS altivec_vsububs {}

  const vus __builtin_altivec_vsubuhm (vus, vus);
    VSUBUHM subv8hi3 {}

  const vus __builtin_altivec_vsubuhs (vus, vus);
    VSUBUHS altivec_vsubuhs {}

  const vui __builtin_altivec_vsubuwm (vui, vui);
    VSUBUWM subv4si3 {}

  const vui __builtin_altivec_vsubuws (vui, vui);
    VSUBUWS altivec_vsubuws {}

  const vsi __builtin_altivec_vsum2sws (vsi, vsi);
    VSUM2SWS altivec_vsum2sws {}

  const vsi __builtin_altivec_vsum4sbs (vsc, vsi);
    VSUM4SBS altivec_vsum4sbs {}

  const vsi __builtin_altivec_vsum4shs (vss, vsi);
    VSUM4SHS altivec_vsum4shs {}

  const vui __builtin_altivec_vsum4ubs (vuc, vui);
    VSUM4UBS altivec_vsum4ubs {}

  const vsi __builtin_altivec_vsumsws (vsi, vsi);
    VSUMSWS altivec_vsumsws {}

  const vsi __builtin_altivec_vsumsws_be (vsi, vsi);
    VSUMSWS_BE altivec_vsumsws_direct {}

  const vui __builtin_altivec_vupkhpx (vp);
    VUPKHPX altivec_vupkhpx {}

  const vss __builtin_altivec_vupkhsb (vsc);
    VUPKHSB altivec_vupkhsb {}

  const vsi __builtin_altivec_vupkhsh (vss);
    VUPKHSH altivec_vupkhsh {}

  const vui __builtin_altivec_vupklpx (vp);
    VUPKLPX altivec_vupklpx {}

  const vss __builtin_altivec_vupklsb (vsc);
    VUPKLSB altivec_vupklsb {}

  const vsi __builtin_altivec_vupklsh (vss);
    VUPKLSH altivec_vupklsh {}

  const vsc __builtin_altivec_vxor_v16qi (vsc, vsc);
    VXOR_V16QI xorv16qi3 {}

  const vuc __builtin_altivec_vxor_v16qi_uns (vuc, vuc);
    VXOR_V16QI_UNS xorv16qi3 {}

  const vf __builtin_altivec_vxor_v4sf (vf, vf);
    VXOR_V4SF xorv4sf3 {}

  const vsi __builtin_altivec_vxor_v4si (vsi, vsi);
    VXOR_V4SI xorv4si3 {}

  const vui __builtin_altivec_vxor_v4si_uns (vui, vui);
    VXOR_V4SI_UNS xorv4si3 {}

  const vss __builtin_altivec_vxor_v8hi (vss, vss);
    VXOR_V8HI xorv8hi3 {}

  const vus __builtin_altivec_vxor_v8hi_uns (vus, vus);
    VXOR_V8HI_UNS xorv8hi3 {}

  const signed char __builtin_vec_ext_v16qi (vsc, signed int);
    VEC_EXT_V16QI nothing {extract}

  const float __builtin_vec_ext_v4sf (vf, signed int);
    VEC_EXT_V4SF nothing {extract}

  const signed int __builtin_vec_ext_v4si (vsi, signed int);
    VEC_EXT_V4SI nothing {extract}

  const signed short __builtin_vec_ext_v8hi (vss, signed int);
    VEC_EXT_V8HI nothing {extract}

  const vsc __builtin_vec_init_v16qi (signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char);
    VEC_INIT_V16QI nothing {init}

  const vf __builtin_vec_init_v4sf (float, float, float, float);
    VEC_INIT_V4SF nothing {init}

  const vsi __builtin_vec_init_v4si (signed int, signed int, signed int, signed int);
    VEC_INIT_V4SI nothing {init}

  const vss __builtin_vec_init_v8hi (signed short, signed short, signed short, signed short, signed short, signed short, signed short, signed short);
    VEC_INIT_V8HI nothing {init}

  const vsc __builtin_vec_set_v16qi (vsc, signed char, const int<4>);
    VEC_SET_V16QI nothing {set}

  const vf __builtin_vec_set_v4sf (vf, float, const int<2>);
    VEC_SET_V4SF nothing {set}

  const vsi __builtin_vec_set_v4si (vsi, signed int, const int<2>);
    VEC_SET_V4SI nothing {set}

  const vss __builtin_vec_set_v8hi (vss, signed short, const int<3>);
    VEC_SET_V8HI nothing {set}


; VSX builtins.
[vsx]
  pure vd __builtin_altivec_lvx_v2df (signed long, const void *);
    LVX_V2DF altivec_lvx_v2df {ldvec}

  pure vsll __builtin_altivec_lvx_v2di (signed long, const void *);
    LVX_V2DI altivec_lvx_v2di {ldvec}

  pure vd __builtin_altivec_lvxl_v2df (signed long, const void *);
    LVXL_V2DF altivec_lvxl_v2df {ldvec}

  pure vsll __builtin_altivec_lvxl_v2di (signed long, const void *);
    LVXL_V2DI altivec_lvxl_v2di {ldvec}

  const vd __builtin_altivec_nabs_v2df (vd);
    NABS_V2DF vsx_nabsv2df2 {}

  const vsll __builtin_altivec_nabs_v2di (vsll);
    NABS_V2DI nabsv2di2 {}

  void __builtin_altivec_stvx_v2df (vd, signed long, void *);
    STVX_V2DF altivec_stvx_v2df {stvec}

  void __builtin_altivec_stvx_v2di (vsll, signed long, void *);
    STVX_V2DI altivec_stvx_v2di {stvec}

  void __builtin_altivec_stvxl_v2df (vd, signed long, void *);
    STVXL_V2DF altivec_stvxl_v2df {stvec}

  void __builtin_altivec_stvxl_v2di (vsll, signed long, void *);
    STVXL_V2DI altivec_stvxl_v2di {stvec}

  const vd __builtin_altivec_vand_v2df (vd, vd);
    VAND_V2DF andv2df3 {}

  const vsll __builtin_altivec_vand_v2di (vsll, vsll);
    VAND_V2DI andv2di3 {}

  const vull __builtin_altivec_vand_v2di_uns (vull, vull);
    VAND_V2DI_UNS andv2di3 {}

  const vd __builtin_altivec_vandc_v2df (vd, vd);
    VANDC_V2DF andcv2df3 {}

  const vsll __builtin_altivec_vandc_v2di (vsll, vsll);
    VANDC_V2DI andcv2di3 {}

  const vull __builtin_altivec_vandc_v2di_uns (vull, vull);
    VANDC_V2DI_UNS andcv2di3 {}

  const vsll __builtin_altivec_vcmpequd (vull, vull);
    VCMPEQUD vector_eqv2di {}

  const int __builtin_altivec_vcmpequd_p (int, vsll, vsll);
    VCMPEQUD_P vector_eq_v2di_p {pred}

  const vsll __builtin_altivec_vcmpgtsd (vsll, vsll);
    VCMPGTSD vector_gtv2di {}

  const int __builtin_altivec_vcmpgtsd_p (int, vsll, vsll);
    VCMPGTSD_P vector_gt_v2di_p {pred}

  const vsll __builtin_altivec_vcmpgtud (vull, vull);
    VCMPGTUD vector_gtuv2di {}

  const int __builtin_altivec_vcmpgtud_p (int, vsll, vsll);
    VCMPGTUD_P vector_gtu_v2di_p {pred}

  const vd __builtin_altivec_vnor_v2df (vd, vd);
    VNOR_V2DF norv2df3 {}

  const vsll __builtin_altivec_vnor_v2di (vsll, vsll);
    VNOR_V2DI norv2di3 {}

  const vull __builtin_altivec_vnor_v2di_uns (vull, vull);
    VNOR_V2DI_UNS norv2di3 {}

  const vd __builtin_altivec_vor_v2df (vd, vd);
    VOR_V2DF iorv2df3 {}

  const vsll __builtin_altivec_vor_v2di (vsll, vsll);
    VOR_V2DI iorv2di3 {}

  const vull __builtin_altivec_vor_v2di_uns (vull, vull);
    VOR_V2DI_UNS iorv2di3 {}

  const vd __builtin_altivec_vperm_2df (vd, vd, vuc);
    VPERM_2DF altivec_vperm_v2df {}

  const vsll __builtin_altivec_vperm_2di (vsll, vsll, vuc);
    VPERM_2DI altivec_vperm_v2di {}

  const vull __builtin_altivec_vperm_2di_uns (vull, vull, vuc);
    VPERM_2DI_UNS altivec_vperm_v2di_uns {}

  const vd __builtin_altivec_vreve_v2df (vd);
    VREVE_V2DF altivec_vrevev2df2 {}

  const vsll __builtin_altivec_vreve_v2di (vsll);
    VREVE_V2DI altivec_vrevev2di2 {}

  const vd __builtin_altivec_vsel_2df (vd, vd, vd);
    VSEL_2DF vector_select_v2df {}

  const vsll __builtin_altivec_vsel_2di (vsll, vsll, vsll);
    VSEL_2DI_B vector_select_v2di {}

  const vull __builtin_altivec_vsel_2di_uns (vull, vull, vull);
    VSEL_2DI_UNS vector_select_v2di_uns {}

  const vd __builtin_altivec_vsldoi_2df (vd, vd, const int<4>);
    VSLDOI_2DF altivec_vsldoi_v2df {}

  const vsll __builtin_altivec_vsldoi_2di (vsll, vsll, const int<4>);
    VSLDOI_2DI altivec_vsldoi_v2di {}

  const vd __builtin_altivec_vxor_v2df (vd, vd);
    VXOR_V2DF xorv2df3 {}

  const vsll __builtin_altivec_vxor_v2di (vsll, vsll);
    VXOR_V2DI xorv2di3 {}

  const vull __builtin_altivec_vxor_v2di_uns (vull, vull);
    VXOR_V2DI_UNS xorv2di3 {}

  const signed __int128 __builtin_vec_ext_v1ti (vsq, signed int);
    VEC_EXT_V1TI nothing {extract}

  const double __builtin_vec_ext_v2df (vd, signed int);
    VEC_EXT_V2DF nothing {extract}

  const signed long long __builtin_vec_ext_v2di (vsll, signed int);
    VEC_EXT_V2DI nothing {extract}

  const vsq __builtin_vec_init_v1ti (signed __int128);
    VEC_INIT_V1TI nothing {init}

  const vd __builtin_vec_init_v2df (double, double);
    VEC_INIT_V2DF nothing {init}

  const vsll __builtin_vec_init_v2di (signed long long, signed long long);
    VEC_INIT_V2DI nothing {init}

  const vsq __builtin_vec_set_v1ti (vsq, signed __int128, const int<0,0>);
    VEC_SET_V1TI nothing {set}

  const vd __builtin_vec_set_v2df (vd, double, const int<1>);
    VEC_SET_V2DF nothing {set}

  const vsll __builtin_vec_set_v2di (vsll, signed long long, const int<1>);
    VEC_SET_V2DI nothing {set}

  const vsc __builtin_vsx_cmpge_16qi (vsc, vsc);
    CMPGE_16QI vector_nltv16qi {}

  const vsll __builtin_vsx_cmpge_2di (vsll, vsll);
    CMPGE_2DI vector_nltv2di {}

  const vsi __builtin_vsx_cmpge_4si (vsi, vsi);
    CMPGE_4SI vector_nltv4si {}

  const vss __builtin_vsx_cmpge_8hi (vss, vss);
    CMPGE_8HI vector_nltv8hi {}

  const vsc __builtin_vsx_cmpge_u16qi (vuc, vuc);
    CMPGE_U16QI vector_nltuv16qi {}

  const vsll __builtin_vsx_cmpge_u2di (vull, vull);
    CMPGE_U2DI vector_nltuv2di {}

  const vsi __builtin_vsx_cmpge_u4si (vui, vui);
    CMPGE_U4SI vector_nltuv4si {}

  const vss __builtin_vsx_cmpge_u8hi (vus, vus);
    CMPGE_U8HI vector_nltuv8hi {}

  const vsc __builtin_vsx_cmple_16qi (vsc, vsc);
    CMPLE_16QI vector_ngtv16qi {}

  const vsll __builtin_vsx_cmple_2di (vsll, vsll);
    CMPLE_2DI vector_ngtv2di {}

  const vsi __builtin_vsx_cmple_4si (vsi, vsi);
    CMPLE_4SI vector_ngtv4si {}

  const vss __builtin_vsx_cmple_8hi (vss, vss);
    CMPLE_8HI vector_ngtv8hi {}

  const vsc __builtin_vsx_cmple_u16qi (vsc, vsc);
    CMPLE_U16QI vector_ngtuv16qi {}

  const vsll __builtin_vsx_cmple_u2di (vsll, vsll);
    CMPLE_U2DI vector_ngtuv2di {}

  const vsi __builtin_vsx_cmple_u4si (vsi, vsi);
    CMPLE_U4SI vector_ngtuv4si {}

  const vss __builtin_vsx_cmple_u8hi (vss, vss);
    CMPLE_U8HI vector_ngtuv8hi {}

  const vd __builtin_vsx_concat_2df (double, double);
    CONCAT_2DF vsx_concat_v2df {}

  const vsll __builtin_vsx_concat_2di (signed long long, signed long long);
    CONCAT_2DI vsx_concat_v2di {}

  const vd __builtin_vsx_cpsgndp (vd, vd);
    CPSGNDP vector_copysignv2df3 {}

  const vf __builtin_vsx_cpsgnsp (vf, vf);
    CPSGNSP vector_copysignv4sf3 {}

  const vsll __builtin_vsx_div_2di (vsll, vsll);
    DIV_V2DI vsx_div_v2di {}

  const vd __builtin_vsx_doublee_v4sf (vf);
    DOUBLEE_V4SF doubleev4sf2 {}

  const vd __builtin_vsx_doublee_v4si (vsi);
    DOUBLEE_V4SI doubleev4si2 {}

  const vd __builtin_vsx_doubleh_v4sf (vf);
    DOUBLEH_V4SF doublehv4sf2 {}

  const vd __builtin_vsx_doubleh_v4si (vsi);
    DOUBLEH_V4SI doublehv4si2 {}

  const vd __builtin_vsx_doublel_v4sf (vf);
    DOUBLEL_V4SF doublelv4sf2 {}

  const vd __builtin_vsx_doublel_v4si (vsi);
    DOUBLEL_V4SI doublelv4si2 {}

  const vd __builtin_vsx_doubleo_v4sf (vf);
    DOUBLEO_V4SF doubleov4sf2 {}

  const vd __builtin_vsx_doubleo_v4si (vsi);
    DOUBLEO_V4SI doubleov4si2 {}

  const vf __builtin_vsx_floate_v2df (vd);
    FLOATE_V2DF floatev2df {}

  const vf __builtin_vsx_floate_v2di (vsll);
    FLOATE_V2DI floatev2di {}

  const vf __builtin_vsx_floato_v2df (vd);
    FLOATO_V2DF floatov2df {}

  const vf __builtin_vsx_floato_v2di (vsll);
    FLOATO_V2DI floatov2di {}

  pure vsq __builtin_vsx_ld_elemrev_v1ti (signed long, const void *);
    LD_ELEMREV_V1TI vsx_ld_elemrev_v1ti {ldvec,endian}

  pure vd __builtin_vsx_ld_elemrev_v2df (signed long, const void *);
    LD_ELEMREV_V2DF vsx_ld_elemrev_v2df {ldvec,endian}

  pure vsll __builtin_vsx_ld_elemrev_v2di (signed long, const void *);
    LD_ELEMREV_V2DI vsx_ld_elemrev_v2di {ldvec,endian}

  pure vf __builtin_vsx_ld_elemrev_v4sf (signed long, const void *);
    LD_ELEMREV_V4SF vsx_ld_elemrev_v4sf {ldvec,endian}

  pure vsi __builtin_vsx_ld_elemrev_v4si (signed long, const void *);
    LD_ELEMREV_V4SI vsx_ld_elemrev_v4si {ldvec,endian}

  pure vss __builtin_vsx_ld_elemrev_v8hi (signed long, const void *);
    LD_ELEMREV_V8HI vsx_ld_elemrev_v8hi {ldvec,endian}

  pure vsc __builtin_vsx_ld_elemrev_v16qi (signed long, const void *);
    LD_ELEMREV_V16QI vsx_ld_elemrev_v16qi {ldvec,endian}

; TODO: There is apparent intent in rs6000-builtin.def to have
; RS6000_BTC_SPECIAL processing for LXSDX, LXVDSX, and STXSDX, but there are
; no def_builtin calls for any of them.  At some point, we may want to add a
; set of built-ins for whichever vector types make sense for these.

  pure vsq __builtin_vsx_lxvd2x_v1ti (signed long, const void *);
    LXVD2X_V1TI vsx_load_v1ti {ldvec}

  pure vd __builtin_vsx_lxvd2x_v2df (signed long, const void *);
    LXVD2X_V2DF vsx_load_v2df {ldvec}

  pure vsll __builtin_vsx_lxvd2x_v2di (signed long, const void *);
    LXVD2X_V2DI vsx_load_v2di {ldvec}

  pure vsc __builtin_vsx_lxvw4x_v16qi (signed long, const void *);
    LXVW4X_V16QI vsx_load_v16qi {ldvec}

  pure vf __builtin_vsx_lxvw4x_v4sf (signed long, const void *);
    LXVW4X_V4SF vsx_load_v4sf {ldvec}

  pure vsi __builtin_vsx_lxvw4x_v4si (signed long, const void *);
    LXVW4X_V4SI vsx_load_v4si {ldvec}

  pure vss __builtin_vsx_lxvw4x_v8hi (signed long, const void *);
    LXVW4X_V8HI vsx_load_v8hi {ldvec}

  const vd __builtin_vsx_mergeh_2df (vd, vd);
    VEC_MERGEH_V2DF vsx_mergeh_v2df {}

  const vsll __builtin_vsx_mergeh_2di (vsll, vsll);
    VEC_MERGEH_V2DI vsx_mergeh_v2di {}

  const vd __builtin_vsx_mergel_2df (vd, vd);
    VEC_MERGEL_V2DF vsx_mergel_v2df {}

  const vsll __builtin_vsx_mergel_2di (vsll, vsll);
    VEC_MERGEL_V2DI vsx_mergel_v2di {}

  const vsll __builtin_vsx_mul_2di (vsll, vsll);
    MUL_V2DI vsx_mul_v2di {}

  const vsq __builtin_vsx_set_1ti (vsq, signed __int128, const int<0,0>);
    SET_1TI vsx_set_v1ti {set}

  const vd __builtin_vsx_set_2df (vd, double, const int<0,1>);
    SET_2DF vsx_set_v2df {set}

  const vsll __builtin_vsx_set_2di (vsll, signed long long, const int<0,1>);
    SET_2DI vsx_set_v2di {set}

  const vd __builtin_vsx_splat_2df (double);
    SPLAT_2DF vsx_splat_v2df {}

  const vsll __builtin_vsx_splat_2di (signed long long);
    SPLAT_2DI vsx_splat_v2di {}

  void __builtin_vsx_st_elemrev_v1ti (vsq, signed long, void *);
    ST_ELEMREV_V1TI vsx_st_elemrev_v1ti {stvec,endian}

  void __builtin_vsx_st_elemrev_v2df (vd, signed long, void *);
    ST_ELEMREV_V2DF vsx_st_elemrev_v2df {stvec,endian}

  void __builtin_vsx_st_elemrev_v2di (vsll, signed long, void *);
    ST_ELEMREV_V2DI vsx_st_elemrev_v2di {stvec,endian}

  void __builtin_vsx_st_elemrev_v4sf (vf, signed long, void *);
    ST_ELEMREV_V4SF vsx_st_elemrev_v4sf {stvec,endian}

  void __builtin_vsx_st_elemrev_v4si (vsi, signed long, void *);
    ST_ELEMREV_V4SI vsx_st_elemrev_v4si {stvec,endian}

  void __builtin_vsx_st_elemrev_v8hi (vss, signed long, void *);
    ST_ELEMREV_V8HI vsx_st_elemrev_v8hi {stvec,endian}

  void __builtin_vsx_st_elemrev_v16qi (vsc, signed long, void *);
    ST_ELEMREV_V16QI vsx_st_elemrev_v16qi {stvec,endian}

  void __builtin_vsx_stxvd2x_v1ti (vsq, signed long, void *);
    STXVD2X_V1TI vsx_store_v1ti {stvec}

  void __builtin_vsx_stxvd2x_v2df (vd, signed long, void *);
    STXVD2X_V2DF vsx_store_v2df {stvec}

  void __builtin_vsx_stxvd2x_v2di (vsll, signed long, void *);
    STXVD2X_V2DI vsx_store_v2di {stvec}

  void __builtin_vsx_stxvw4x_v4sf (vf, signed long, void *);
    STXVW4X_V4SF vsx_store_v4sf {stvec}

  void __builtin_vsx_stxvw4x_v4si (vsi, signed long, void *);
    STXVW4X_V4SI vsx_store_v4si {stvec}

  void __builtin_vsx_stxvw4x_v8hi (vss, signed long, void *);
    STXVW4X_V8HI vsx_store_v8hi {stvec}

  void __builtin_vsx_stxvw4x_v16qi (vsc, signed long, void *);
    STXVW4X_V16QI vsx_store_v16qi {stvec}

  const vull __builtin_vsx_udiv_2di (vull, vull);
    UDIV_V2DI vsx_udiv_v2di {}

  const vd __builtin_vsx_uns_doublee_v4si (vsi);
    UNS_DOUBLEE_V4SI unsdoubleev4si2 {}

  const vd __builtin_vsx_uns_doubleh_v4si (vsi);
    UNS_DOUBLEH_V4SI unsdoublehv4si2 {}

  const vd __builtin_vsx_uns_doublel_v4si (vsi);
    UNS_DOUBLEL_V4SI unsdoublelv4si2 {}

  const vd __builtin_vsx_uns_doubleo_v4si (vsi);
    UNS_DOUBLEO_V4SI unsdoubleov4si2 {}

  const vf __builtin_vsx_uns_floate_v2di (vsll);
    UNS_FLOATE_V2DI unsfloatev2di {}

  const vf __builtin_vsx_uns_floato_v2di (vsll);
    UNS_FLOATO_V2DI unsfloatov2di {}

; These are duplicates of __builtin_altivec_* counterparts, and are being
; kept for backwards compatibility.  The reason for their existence is
; unclear.  TODO: Consider deprecation/removal at some point.
  const vsc __builtin_vsx_vperm_16qi (vsc, vsc, vuc);
    VPERM_16QI_X altivec_vperm_v16qi {}

  const vuc __builtin_vsx_vperm_16qi_uns (vuc, vuc, vuc);
    VPERM_16QI_UNS_X altivec_vperm_v16qi_uns {}

  const vsq __builtin_vsx_vperm_1ti (vsq, vsq, vsc);
    VPERM_1TI_X altivec_vperm_v1ti {}

  const vsq __builtin_vsx_vperm_1ti_uns (vsq, vsq, vsc);
    VPERM_1TI_UNS_X altivec_vperm_v1ti_uns {}

  const vd __builtin_vsx_vperm_2df (vd, vd, vuc);
    VPERM_2DF_X altivec_vperm_v2df {}

  const vsll __builtin_vsx_vperm_2di (vsll, vsll, vuc);
    VPERM_2DI_X altivec_vperm_v2di {}

  const vull __builtin_vsx_vperm_2di_uns (vull, vull, vuc);
    VPERM_2DI_UNS_X altivec_vperm_v2di_uns {}

  const vf __builtin_vsx_vperm_4sf (vf, vf, vuc);
    VPERM_4SF_X altivec_vperm_v4sf {}

  const vsi __builtin_vsx_vperm_4si (vsi, vsi, vuc);
    VPERM_4SI_X altivec_vperm_v4si {}

  const vui __builtin_vsx_vperm_4si_uns (vui, vui, vuc);
    VPERM_4SI_UNS_X altivec_vperm_v4si_uns {}

  const vss __builtin_vsx_vperm_8hi (vss, vss, vuc);
    VPERM_8HI_X altivec_vperm_v8hi {}

  const vus __builtin_vsx_vperm_8hi_uns (vus, vus, vuc);
    VPERM_8HI_UNS_X altivec_vperm_v8hi_uns {}

  const vsll __builtin_vsx_vsigned_v2df (vd);
    VEC_VSIGNED_V2DF vsx_xvcvdpsxds {}

  const vsi __builtin_vsx_vsigned_v4sf (vf);
    VEC_VSIGNED_V4SF vsx_xvcvspsxws {}

  const vsi __builtin_vsx_vsignede_v2df (vd);
    VEC_VSIGNEDE_V2DF vsignede_v2df {}

  const vsi __builtin_vsx_vsignedo_v2df (vd);
    VEC_VSIGNEDO_V2DF vsignedo_v2df {}

  const vsll __builtin_vsx_vunsigned_v2df (vd);
    VEC_VUNSIGNED_V2DF vsx_xvcvdpsxds {}

  const vsi __builtin_vsx_vunsigned_v4sf (vf);
    VEC_VUNSIGNED_V4SF vsx_xvcvspsxws {}

  const vsi __builtin_vsx_vunsignede_v2df (vd);
    VEC_VUNSIGNEDE_V2DF vunsignede_v2df {}

  const vsi __builtin_vsx_vunsignedo_v2df (vd);
    VEC_VUNSIGNEDO_V2DF vunsignedo_v2df {}

  const vf __builtin_vsx_xscvdpsp (double);
    XSCVDPSP vsx_xscvdpsp {}

  const double __builtin_vsx_xscvspdp (vf);
    XSCVSPDP vsx_xscvspdp {}

  const double __builtin_vsx_xsmaxdp (double, double);
    XSMAXDP smaxdf3 {}

  const double __builtin_vsx_xsmindp (double, double);
    XSMINDP smindf3 {}

  const double __builtin_vsx_xsrdpi (double);
    XSRDPI vsx_xsrdpi {}

  const double __builtin_vsx_xsrdpic (double);
    XSRDPIC vsx_xsrdpic {}

  const double __builtin_vsx_xsrdpim (double);
    XSRDPIM floordf2 {}

  const double __builtin_vsx_xsrdpip (double);
    XSRDPIP ceildf2 {}

  const double __builtin_vsx_xsrdpiz (double);
    XSRDPIZ btruncdf2 {}

  const signed int __builtin_vsx_xstdivdp_fe (double, double);
    XSTDIVDP_FE vsx_tdivdf3_fe {}

  const signed int __builtin_vsx_xstdivdp_fg (double, double);
    XSTDIVDP_FG vsx_tdivdf3_fg {}

  const signed int __builtin_vsx_xstsqrtdp_fe (double);
    XSTSQRTDP_FE vsx_tsqrtdf2_fe {}

  const signed int __builtin_vsx_xstsqrtdp_fg (double);
    XSTSQRTDP_FG vsx_tsqrtdf2_fg {}

  const vd __builtin_vsx_xvabsdp (vd);
    XVABSDP absv2df2 {}

  const vf __builtin_vsx_xvabssp (vf);
    XVABSSP absv4sf2 {}

  fpmath vd __builtin_vsx_xvadddp (vd, vd);
    XVADDDP addv2df3 {}

  fpmath vf __builtin_vsx_xvaddsp (vf, vf);
    XVADDSP addv4sf3 {}

  const vd __builtin_vsx_xvcmpeqdp (vd, vd);
    XVCMPEQDP vector_eqv2df {}

  const signed int __builtin_vsx_xvcmpeqdp_p (signed int, vd, vd);
    XVCMPEQDP_P vector_eq_v2df_p {pred}

  const vf __builtin_vsx_xvcmpeqsp (vf, vf);
    XVCMPEQSP vector_eqv4sf {}

  const signed int __builtin_vsx_xvcmpeqsp_p (signed int, vf, vf);
    XVCMPEQSP_P vector_eq_v4sf_p {pred}

  const vd __builtin_vsx_xvcmpgedp (vd, vd);
    XVCMPGEDP vector_gev2df {}

  const signed int __builtin_vsx_xvcmpgedp_p (signed int, vd, vd);
    XVCMPGEDP_P vector_ge_v2df_p {pred}

  const vf __builtin_vsx_xvcmpgesp (vf, vf);
    XVCMPGESP vector_gev4sf {}

  const signed int __builtin_vsx_xvcmpgesp_p (signed int, vf, vf);
    XVCMPGESP_P vector_ge_v4sf_p {pred}

  const vd __builtin_vsx_xvcmpgtdp (vd, vd);
    XVCMPGTDP vector_gtv2df {}

  const signed int __builtin_vsx_xvcmpgtdp_p (signed int, vd, vd);
    XVCMPGTDP_P vector_gt_v2df_p {pred}

  const vf __builtin_vsx_xvcmpgtsp (vf, vf);
    XVCMPGTSP vector_gtv4sf {}

  const signed int __builtin_vsx_xvcmpgtsp_p (signed int, vf, vf);
    XVCMPGTSP_P vector_gt_v4sf_p {pred}

  const vf __builtin_vsx_xvcvdpsp (vd);
    XVCVDPSP vsx_xvcvdpsp {}

  const vsll __builtin_vsx_xvcvdpsxds (vd);
    XVCVDPSXDS vsx_fix_truncv2dfv2di2 {}

  const vsll __builtin_vsx_xvcvdpsxds_scale (vd, const int);
    XVCVDPSXDS_SCALE vsx_xvcvdpsxds_scale {}

  const vsi __builtin_vsx_xvcvdpsxws (vd);
    XVCVDPSXWS vsx_xvcvdpsxws {}

  const vsll __builtin_vsx_xvcvdpuxds (vd);
    XVCVDPUXDS vsx_fixuns_truncv2dfv2di2 {}

  const vsll __builtin_vsx_xvcvdpuxds_scale (vd, const int);
    XVCVDPUXDS_SCALE vsx_xvcvdpuxds_scale {}

  const vull __builtin_vsx_xvcvdpuxds_uns (vd);
    XVCVDPUXDS_UNS vsx_fixuns_truncv2dfv2di2 {}

  const vsi __builtin_vsx_xvcvdpuxws (vd);
    XVCVDPUXWS vsx_xvcvdpuxws {}

  const vd __builtin_vsx_xvcvspdp (vf);
    XVCVSPDP vsx_xvcvspdp {}

  const vsll __builtin_vsx_xvcvspsxds (vf);
    XVCVSPSXDS vsx_xvcvspsxds {}

  const vsi __builtin_vsx_xvcvspsxws (vf);
    XVCVSPSXWS vsx_fix_truncv4sfv4si2 {}

  const vsll __builtin_vsx_xvcvspuxds (vf);
    XVCVSPUXDS vsx_xvcvspuxds {}

  const vsi __builtin_vsx_xvcvspuxws (vf);
    XVCVSPUXWS vsx_fixuns_truncv4sfv4si2 {}

  const vd __builtin_vsx_xvcvsxddp (vsll);
    XVCVSXDDP vsx_floatv2div2df2 {}

  const vd __builtin_vsx_xvcvsxddp_scale (vsll, const int<5>);
    XVCVSXDDP_SCALE vsx_xvcvsxddp_scale {}

  const vf __builtin_vsx_xvcvsxdsp (vsll);
    XVCVSXDSP vsx_xvcvsxdsp {}

  const vd __builtin_vsx_xvcvsxwdp (vsi);
    XVCVSXWDP vsx_xvcvsxwdp {}

  const vf __builtin_vsx_xvcvsxwsp (vsi);
    XVCVSXWSP vsx_floatv4siv4sf2 {}

  const vd __builtin_vsx_xvcvuxddp (vsll);
    XVCVUXDDP vsx_floatunsv2div2df2 {}

  const vd __builtin_vsx_xvcvuxddp_scale (vsll, const int<5>);
    XVCVUXDDP_SCALE vsx_xvcvuxddp_scale {}

  const vd __builtin_vsx_xvcvuxddp_uns (vull);
    XVCVUXDDP_UNS vsx_floatunsv2div2df2 {}

  const vf __builtin_vsx_xvcvuxdsp (vull);
    XVCVUXDSP vsx_xvcvuxdsp {}

  const vd __builtin_vsx_xvcvuxwdp (vsi);
    XVCVUXWDP vsx_xvcvuxwdp {}

  const vf __builtin_vsx_xvcvuxwsp (vsi);
    XVCVUXWSP vsx_floatunsv4siv4sf2 {}

  fpmath vd __builtin_vsx_xvdivdp (vd, vd);
    XVDIVDP divv2df3 {}

  fpmath vf __builtin_vsx_xvdivsp (vf, vf);
    XVDIVSP divv4sf3 {}

  const vd __builtin_vsx_xvmadddp (vd, vd, vd);
    XVMADDDP fmav2df4 {}

  const vf __builtin_vsx_xvmaddsp (vf, vf, vf);
    XVMADDSP fmav4sf4 {}

  const vd __builtin_vsx_xvmaxdp (vd, vd);
    XVMAXDP smaxv2df3 {}

  const vf __builtin_vsx_xvmaxsp (vf, vf);
    XVMAXSP smaxv4sf3 {}

  const vd __builtin_vsx_xvmindp (vd, vd);
    XVMINDP sminv2df3 {}

  const vf __builtin_vsx_xvminsp (vf, vf);
    XVMINSP sminv4sf3 {}

  const vd __builtin_vsx_xvmsubdp (vd, vd, vd);
    XVMSUBDP fmsv2df4 {}

  const vf __builtin_vsx_xvmsubsp (vf, vf, vf);
    XVMSUBSP fmsv4sf4 {}

  fpmath vd __builtin_vsx_xvmuldp (vd, vd);
    XVMULDP mulv2df3 {}

  fpmath vf __builtin_vsx_xvmulsp (vf, vf);
    XVMULSP mulv4sf3 {}

  const vd __builtin_vsx_xvnabsdp (vd);
    XVNABSDP vsx_nabsv2df2 {}

  const vf __builtin_vsx_xvnabssp (vf);
    XVNABSSP vsx_nabsv4sf2 {}

  const vd __builtin_vsx_xvnegdp (vd);
    XVNEGDP negv2df2 {}

  const vf __builtin_vsx_xvnegsp (vf);
    XVNEGSP negv4sf2 {}

  const vd __builtin_vsx_xvnmadddp (vd, vd, vd);
    XVNMADDDP nfmav2df4 {}

  const vf __builtin_vsx_xvnmaddsp (vf, vf, vf);
    XVNMADDSP nfmav4sf4 {}

  const vd __builtin_vsx_xvnmsubdp (vd, vd, vd);
    XVNMSUBDP nfmsv2df4 {}

  const vf __builtin_vsx_xvnmsubsp (vf, vf, vf);
    XVNMSUBSP nfmsv4sf4 {}

  const vd __builtin_vsx_xvrdpi (vd);
    XVRDPI vsx_xvrdpi {}

  const vd __builtin_vsx_xvrdpic (vd);
    XVRDPIC vsx_xvrdpic {}

  const vd __builtin_vsx_xvrdpim (vd);
    XVRDPIM vsx_floorv2df2 {}

  const vd __builtin_vsx_xvrdpip (vd);
    XVRDPIP vsx_ceilv2df2 {}

  const vd __builtin_vsx_xvrdpiz (vd);
    XVRDPIZ vsx_btruncv2df2 {}

  fpmath vd __builtin_vsx_xvrecipdivdp (vd, vd);
    RECIP_V2DF recipv2df3 {}

  fpmath vf __builtin_vsx_xvrecipdivsp (vf, vf);
    RECIP_V4SF recipv4sf3 {}

  const vd __builtin_vsx_xvredp (vd);
    XVREDP vsx_frev2df2 {}

  const vf __builtin_vsx_xvresp (vf);
    XVRESP vsx_frev4sf2 {}

  const vf __builtin_vsx_xvrspi (vf);
    XVRSPI vsx_xvrspi {}

  const vf __builtin_vsx_xvrspic (vf);
    XVRSPIC vsx_xvrspic {}

  const vf __builtin_vsx_xvrspim (vf);
    XVRSPIM vsx_floorv4sf2 {}

  const vf __builtin_vsx_xvrspip (vf);
    XVRSPIP vsx_ceilv4sf2 {}

  const vf __builtin_vsx_xvrspiz (vf);
    XVRSPIZ vsx_btruncv4sf2 {}

  const vd __builtin_vsx_xvrsqrtdp (vd);
    RSQRT_2DF rsqrtv2df2 {}

  const vf __builtin_vsx_xvrsqrtsp (vf);
    RSQRT_4SF rsqrtv4sf2 {}

  const vd __builtin_vsx_xvrsqrtedp (vd);
    XVRSQRTEDP rsqrtev2df2 {}

  const vf __builtin_vsx_xvrsqrtesp (vf);
    XVRSQRTESP rsqrtev4sf2 {}

  const vd __builtin_vsx_xvsqrtdp (vd);
    XVSQRTDP sqrtv2df2 {}

  const vf __builtin_vsx_xvsqrtsp (vf);
    XVSQRTSP sqrtv4sf2 {}

  fpmath vd __builtin_vsx_xvsubdp (vd, vd);
    XVSUBDP subv2df3 {}

  fpmath vf __builtin_vsx_xvsubsp (vf, vf);
    XVSUBSP subv4sf3 {}

  const signed int __builtin_vsx_xvtdivdp_fe (vd, vd);
    XVTDIVDP_FE vsx_tdivv2df3_fe {}

  const signed int __builtin_vsx_xvtdivdp_fg (vd, vd);
    XVTDIVDP_FG vsx_tdivv2df3_fg {}

  const signed int __builtin_vsx_xvtdivsp_fe (vf, vf);
    XVTDIVSP_FE vsx_tdivv4sf3_fe {}

  const signed int __builtin_vsx_xvtdivsp_fg (vf, vf);
    XVTDIVSP_FG vsx_tdivv4sf3_fg {}

  const signed int __builtin_vsx_xvtsqrtdp_fe (vd);
    XVTSQRTDP_FE vsx_tsqrtv2df2_fe {}

  const signed int __builtin_vsx_xvtsqrtdp_fg (vd);
    XVTSQRTDP_FG vsx_tsqrtv2df2_fg {}

  const signed int __builtin_vsx_xvtsqrtsp_fe (vf);
    XVTSQRTSP_FE vsx_tsqrtv4sf2_fe {}

  const signed int __builtin_vsx_xvtsqrtsp_fg (vf);
    XVTSQRTSP_FG vsx_tsqrtv4sf2_fg {}

  const vf __builtin_vsx_xxmrghw (vf, vf);
    XXMRGHW_4SF vsx_xxmrghw_v4sf {}

  const vsi __builtin_vsx_xxmrghw_4si (vsi, vsi);
    XXMRGHW_4SI vsx_xxmrghw_v4si {}

  const vf __builtin_vsx_xxmrglw (vf, vf);
    XXMRGLW_4SF vsx_xxmrglw_v4sf {}

  const vsi __builtin_vsx_xxmrglw_4si (vsi, vsi);
    XXMRGLW_4SI vsx_xxmrglw_v4si {}

  const vsc __builtin_vsx_xxpermdi_16qi (vsc, vsc, const int<2>);
    XXPERMDI_16QI vsx_xxpermdi_v16qi {}

  const vsq __builtin_vsx_xxpermdi_1ti (vsq, vsq, const int<2>);
    XXPERMDI_1TI vsx_xxpermdi_v1ti {}

  const vd __builtin_vsx_xxpermdi_2df (vd, vd, const int<2>);
    XXPERMDI_2DF vsx_xxpermdi_v2df {}

  const vsll __builtin_vsx_xxpermdi_2di (vsll, vsll, const int<2>);
    XXPERMDI_2DI vsx_xxpermdi_v2di {}

  const vf __builtin_vsx_xxpermdi_4sf (vf, vf, const int<2>);
    XXPERMDI_4SF vsx_xxpermdi_v4sf {}

  const vsi __builtin_vsx_xxpermdi_4si (vsi, vsi, const int<2>);
    XXPERMDI_4SI vsx_xxpermdi_v4si {}

  const vss __builtin_vsx_xxpermdi_8hi (vss, vss, const int<2>);
    XXPERMDI_8HI vsx_xxpermdi_v8hi {}

  const vsc __builtin_vsx_xxsel_16qi (vsc, vsc, vsc);
    XXSEL_16QI vector_select_v16qi {}

  const vuc __builtin_vsx_xxsel_16qi_uns (vuc, vuc, vuc);
    XXSEL_16QI_UNS vector_select_v16qi_uns {}

  const vsq __builtin_vsx_xxsel_1ti (vsq, vsq, vsq);
    XXSEL_1TI vector_select_v1ti {}

  const vsq __builtin_vsx_xxsel_1ti_uns (vsq, vsq, vsq);
    XXSEL_1TI_UNS vector_select_v1ti_uns {}

  const vd __builtin_vsx_xxsel_2df (vd, vd, vd);
    XXSEL_2DF vector_select_v2df {}

  const vsll __builtin_vsx_xxsel_2di (vsll, vsll, vsll);
    XXSEL_2DI vector_select_v2di {}

  const vull __builtin_vsx_xxsel_2di_uns (vull, vull, vull);
    XXSEL_2DI_UNS vector_select_v2di_uns {}

  const vf __builtin_vsx_xxsel_4sf (vf, vf, vf);
    XXSEL_4SF vector_select_v4sf {}

  const vsi __builtin_vsx_xxsel_4si (vsi, vsi, vsi);
    XXSEL_4SI vector_select_v4si {}

  const vui __builtin_vsx_xxsel_4si_uns (vui, vui, vui);
    XXSEL_4SI_UNS vector_select_v4si_uns {}

  const vss __builtin_vsx_xxsel_8hi (vss, vss, vss);
    XXSEL_8HI vector_select_v8hi {}

  const vus __builtin_vsx_xxsel_8hi_uns (vus, vus, vus);
    XXSEL_8HI_UNS vector_select_v8hi_uns {}

  const vsc __builtin_vsx_xxsldwi_16qi (vsc, vsc, const int<2>);
    XXSLDWI_16QI vsx_xxsldwi_v16qi {}

  const vd __builtin_vsx_xxsldwi_2df (vd, vd, const int<2>);
    XXSLDWI_2DF vsx_xxsldwi_v2df {}

  const vsll __builtin_vsx_xxsldwi_2di (vsll, vsll, const int<2>);
    XXSLDWI_2DI vsx_xxsldwi_v2di {}

  const vf __builtin_vsx_xxsldwi_4sf (vf, vf, const int<2>);
    XXSLDWI_4SF vsx_xxsldwi_v4sf {}

  const vsi __builtin_vsx_xxsldwi_4si (vsi, vsi, const int<2>);
    XXSLDWI_4SI vsx_xxsldwi_v4si {}

  const vss __builtin_vsx_xxsldwi_8hi (vss, vss, const int<2>);
    XXSLDWI_8HI vsx_xxsldwi_v8hi {}

  const vd __builtin_vsx_xxspltd_2df (vd, const int<1>);
    XXSPLTD_V2DF vsx_xxspltd_v2df {}

  const vsll __builtin_vsx_xxspltd_2di (vsll, const int<1>);
    XXSPLTD_V2DI vsx_xxspltd_v2di {}


; Power7 builtins (ISA 2.06).
[power7]
  const unsigned int __builtin_addg6s (unsigned int, unsigned int);
    ADDG6S addg6s {}

  const signed long __builtin_bpermd (signed long, signed long);
    BPERMD bpermd_di {}

  const unsigned int __builtin_cbcdtd (unsigned int);
    CBCDTD cbcdtd {}

  const unsigned int __builtin_cdtbcd (unsigned int);
    CDTBCD cdtbcd {}

  const signed int __builtin_divwe (signed int, signed int);
    DIVWE dive_si {}

  const unsigned int __builtin_divweu (unsigned int, unsigned int);
    DIVWEU diveu_si {}

  const vsq __builtin_pack_vector_int128 (unsigned long long, unsigned long long);
    PACK_V1TI packv1ti {}

  void __builtin_ppc_speculation_barrier ();
    SPECBARR speculation_barrier {}

  const unsigned long __builtin_unpack_vector_int128 (vsq, const int<1>);
    UNPACK_V1TI unpackv1ti {}


; Power7 builtins requiring 64-bit GPRs (even with 32-bit addressing).
[power7-64]
  const signed long long __builtin_divde (signed long long, signed long long);
    DIVDE dive_di {}

  const unsigned long long __builtin_divdeu (unsigned long long, unsigned long long);
    DIVDEU diveu_di {}


; Power8 vector built-ins.
[power8-vector]
  const vsll __builtin_altivec_abs_v2di (vsll);
    ABS_V2DI absv2di2 {}

  const vsc __builtin_altivec_bcddiv10_v16qi (vsc);
    BCDDIV10_V16QI bcddiv10_v16qi {}

  const vsc __builtin_altivec_bcdmul10_v16qi (vsc);
    BCDMUL10_V16QI bcdmul10_v16qi {}

  const vsc __builtin_altivec_eqv_v16qi (vsc, vsc);
    EQV_V16QI eqvv16qi3 {}

  const vuc __builtin_altivec_eqv_v16qi_uns (vuc, vuc);
    EQV_V16QI_UNS eqvv16qi3 {}

  const vsq __builtin_altivec_eqv_v1ti (vsq, vsq);
    EQV_V1TI eqvv1ti3 {}

  const vuq __builtin_altivec_eqv_v1ti_uns (vuq, vuq);
    EQV_V1TI_UNS eqvv1ti3 {}

  const vd __builtin_altivec_eqv_v2df (vd, vd);
    EQV_V2DF eqvv2df3 {}

  const vsll __builtin_altivec_eqv_v2di (vsll, vsll);
    EQV_V2DI eqvv2di3 {}

  const vull __builtin_altivec_eqv_v2di_uns (vull, vull);
    EQV_V2DI_UNS eqvv2di3 {}

  const vf __builtin_altivec_eqv_v4sf (vf, vf);
    EQV_V4SF eqvv4sf3 {}

  const vsi __builtin_altivec_eqv_v4si (vsi, vsi);
    EQV_V4SI eqvv4si3 {}

  const vui __builtin_altivec_eqv_v4si_uns (vui, vui);
    EQV_V4SI_UNS eqvv4si3 {}

  const vss __builtin_altivec_eqv_v8hi (vss, vss);
    EQV_V8HI eqvv8hi3 {}

  const vus __builtin_altivec_eqv_v8hi_uns (vus, vus);
    EQV_V8HI_UNS eqvv8hi3 {}

  const vsc __builtin_altivec_nand_v16qi (vsc, vsc);
    NAND_V16QI nandv16qi3 {}

  const vuc __builtin_altivec_nand_v16qi_uns (vuc, vuc);
    NAND_V16QI_UNS nandv16qi3 {}

  const vsq __builtin_altivec_nand_v1ti (vsq, vsq);
    NAND_V1TI nandv1ti3 {}

  const vuq __builtin_altivec_nand_v1ti_uns (vuq, vuq);
    NAND_V1TI_UNS nandv1ti3 {}

  const vd __builtin_altivec_nand_v2df (vd, vd);
    NAND_V2DF nandv2df3 {}

  const vsll __builtin_altivec_nand_v2di (vsll, vsll);
    NAND_V2DI nandv2di3 {}

  const vull __builtin_altivec_nand_v2di_uns (vull, vull);
    NAND_V2DI_UNS nandv2di3 {}

  const vf __builtin_altivec_nand_v4sf (vf, vf);
    NAND_V4SF nandv4sf3 {}

  const vsi __builtin_altivec_nand_v4si (vsi, vsi);
    NAND_V4SI nandv4si3 {}

  const vui __builtin_altivec_nand_v4si_uns (vui, vui);
    NAND_V4SI_UNS nandv4si3 {}

  const vss __builtin_altivec_nand_v8hi (vss, vss);
    NAND_V8HI nandv8hi3 {}

  const vus __builtin_altivec_nand_v8hi_uns (vus, vus);
    NAND_V8HI_UNS nandv8hi3 {}

  const vsc __builtin_altivec_neg_v16qi (vsc);
    NEG_V16QI negv16qi2 {}

  const vd __builtin_altivec_neg_v2df (vd);
    NEG_V2DF negv2df2 {}

  const vsll __builtin_altivec_neg_v2di (vsll);
    NEG_V2DI negv2di2 {}

  const vf __builtin_altivec_neg_v4sf (vf);
    NEG_V4SF negv4sf2 {}

  const vsi __builtin_altivec_neg_v4si (vsi);
    NEG_V4SI negv4si2 {}

  const vss __builtin_altivec_neg_v8hi (vss);
    NEG_V8HI negv8hi2 {}

  const vsc __builtin_altivec_orc_v16qi (vsc, vsc);
    ORC_V16QI orcv16qi3 {}

  const vuc __builtin_altivec_orc_v16qi_uns (vuc, vuc);
    ORC_V16QI_UNS orcv16qi3 {}

  const vsq __builtin_altivec_orc_v1ti (vsq, vsq);
    ORC_V1TI orcv1ti3 {}

  const vuq __builtin_altivec_orc_v1ti_uns (vuq, vuq);
    ORC_V1TI_UNS orcv1ti3 {}

  const vd __builtin_altivec_orc_v2df (vd, vd);
    ORC_V2DF orcv2df3 {}

  const vsll __builtin_altivec_orc_v2di (vsll, vsll);
    ORC_V2DI orcv2di3 {}

  const vull __builtin_altivec_orc_v2di_uns (vull, vull);
    ORC_V2DI_UNS orcv2di3 {}

  const vf __builtin_altivec_orc_v4sf (vf, vf);
    ORC_V4SF orcv4sf3 {}

  const vsi __builtin_altivec_orc_v4si (vsi, vsi);
    ORC_V4SI orcv4si3 {}

  const vui __builtin_altivec_orc_v4si_uns (vui, vui);
    ORC_V4SI_UNS orcv4si3 {}

  const vss __builtin_altivec_orc_v8hi (vss, vss);
    ORC_V8HI orcv8hi3 {}

  const vus __builtin_altivec_orc_v8hi_uns (vus, vus);
    ORC_V8HI_UNS orcv8hi3 {}

  const vsc __builtin_altivec_vclzb (vsc);
    VCLZB clzv16qi2 {}

  const vsll __builtin_altivec_vclzd (vsll);
    VCLZD clzv2di2 {}

  const vss __builtin_altivec_vclzh (vss);
    VCLZH clzv8hi2 {}

  const vsi __builtin_altivec_vclzw (vsi);
    VCLZW clzv4si2 {}

  const vuc __builtin_altivec_vgbbd (vuc);
    VGBBD p8v_vgbbd {}

  const vsq __builtin_altivec_vaddcuq (vsq, vsq);
    VADDCUQ altivec_vaddcuq {}

  const vsq __builtin_altivec_vaddecuq (vsq, vsq, vsq);
    VADDECUQ altivec_vaddecuq {}

  const vsq __builtin_altivec_vaddeuqm (vsq, vsq, vsq);
    VADDEUQM altivec_vaddeuqm {}

  const vsll __builtin_altivec_vaddudm (vsll, vsll);
    VADDUDM addv2di3 {}

  const vsq __builtin_altivec_vadduqm (vsq, vsq);
    VADDUQM altivec_vadduqm {}

  const vsll __builtin_altivec_vbpermq (vsc, vsc);
    VBPERMQ altivec_vbpermq {}

  const vsc __builtin_altivec_vbpermq2 (vsc, vsc);
    VBPERMQ2 altivec_vbpermq2 {}

  const vsll __builtin_altivec_vmaxsd (vsll, vsll);
    VMAXSD smaxv2di3 {}

  const vull __builtin_altivec_vmaxud (vull, vull);
    VMAXUD umaxv2di3 {}

  const vsll __builtin_altivec_vminsd (vsll, vsll);
    VMINSD sminv2di3 {}

  const vull __builtin_altivec_vminud (vull, vull);
    VMINUD uminv2di3 {}

  const vd __builtin_altivec_vmrgew_v2df (vd, vd);
    VMRGEW_V2DF p8_vmrgew_v2df {}

  const vsll __builtin_altivec_vmrgew_v2di (vsll, vsll);
    VMRGEW_V2DI p8_vmrgew_v2di {}

  const vf __builtin_altivec_vmrgew_v4sf (vf, vf);
    VMRGEW_V4SF p8_vmrgew_v4sf {}

  const vsi __builtin_altivec_vmrgew_v4si (vsi, vsi);
    VMRGEW_V4SI p8_vmrgew_v4si {}

  const vd __builtin_altivec_vmrgow_v2df (vd, vd);
    VMRGOW_V2DF p8_vmrgow_v2df {}

  const vsll __builtin_altivec_vmrgow_v2di (vsll, vsll);
    VMRGOW_V2DI p8_vmrgow_v2di {}

  const vf __builtin_altivec_vmrgow_v4sf (vf, vf);
    VMRGOW_V4SF p8_vmrgow_v4sf {}

  const vsi __builtin_altivec_vmrgow_v4si (vsi, vsi);
    VMRGOW_V4SI p8_vmrgow_v4si {}

  const vsc __builtin_altivec_vpermxor (vsc, vsc, vsc);
    VPERMXOR altivec_vpermxor {}

  const vsi __builtin_altivec_vpksdss (vsll, vsll);
    VPKSDSS altivec_vpksdss {}

  const vsi __builtin_altivec_vpksdus (vsll, vsll);
    VPKSDUS altivec_vpksdus {}

  const vsi __builtin_altivec_vpkudum (vsll, vsll);
    VPKUDUM altivec_vpkudum {}

  const vsi __builtin_altivec_vpkudus (vsll, vsll);
    VPKUDUS altivec_vpkudus {}

  const vsc __builtin_altivec_vpmsumb (vsc, vsc);
    VPMSUMB_A crypto_vpmsumb {}

  const vsll __builtin_altivec_vpmsumd (vsll, vsll);
    VPMSUMD_A crypto_vpmsumd {}

  const vss __builtin_altivec_vpmsumh (vss, vss);
    VPMSUMH_A crypto_vpmsumh {}

  const vsi __builtin_altivec_vpmsumw (vsi, vsi);
    VPMSUMW_A crypto_vpmsumw {}

  const vsc __builtin_altivec_vpopcntb (vsc);
    VPOPCNTB popcountv16qi2 {}

  const vsll __builtin_altivec_vpopcntd (vsll);
    VPOPCNTD popcountv2di2 {}

  const vss __builtin_altivec_vpopcnth (vss);
    VPOPCNTH popcountv8hi2 {}

  const vsc __builtin_altivec_vpopcntub (vsc);
    VPOPCNTUB popcountv16qi2 {}

  const vsll __builtin_altivec_vpopcntud (vsll);
    VPOPCNTUD popcountv2di2 {}

  const vss __builtin_altivec_vpopcntuh (vss);
    VPOPCNTUH popcountv8hi2 {}

  const vsi __builtin_altivec_vpopcntuw (vsi);
    VPOPCNTUW popcountv4si2 {}

  const vsi __builtin_altivec_vpopcntw (vsi);
    VPOPCNTW popcountv4si2 {}

  const vsll __builtin_altivec_vrld (vsll, vsll);
    VRLD vrotlv2di3 {}

  const vsll __builtin_altivec_vsld (vsll, vsll);
    VSLD vashlv2di3 {}

  const vsll __builtin_altivec_vsrad (vsll, vsll);
    VSRAD vashrv2di3 {}

  const vsll __builtin_altivec_vsrd (vsll, vull);
    VSRD vlshrv2di3 {}

  const vsq __builtin_altivec_vsubcuq (vsq, vsq);
    VSUBCUQ altivec_vsubcuq {}

  const vsq __builtin_altivec_vsubecuq (vsq, vsq, vsq);
    VSUBECUQ altivec_vsubecuq {}

  const vsq __builtin_altivec_vsubeuqm (vsq, vsq, vsq);
    VSUBEUQM altivec_vsubeuqm {}

  const vsll __builtin_altivec_vsubudm (vsll, vsll);
    VSUBUDM subv2di3 {}

  const vsq __builtin_altivec_vsubuqm (vsq, vsq);
    VSUBUQM altivec_vsubuqm {}

  const vsll __builtin_altivec_vupkhsw (vsi);
    VUPKHSW altivec_vupkhsw {}

  const vsll __builtin_altivec_vupklsw (vsi);
    VUPKLSW altivec_vupklsw {}

  const vsq __builtin_bcdadd_v1ti (vsq, vsq, const int<1>);
    BCDADD_V1TI bcdadd_v1ti {}

  const vsc __builtin_bcdadd_v16qi (vsc, vsc, const int<1>);
    BCDADD_V16QI bcdadd_v16qi {}

  const signed int __builtin_bcdadd_eq_v1ti (vsq, vsq, const int<1>);
    BCDADD_EQ_V1TI bcdadd_eq_v1ti {}

  const signed int __builtin_bcdadd_eq_v16qi (vsc, vsc, const int<1>);
    BCDADD_EQ_V16QI bcdadd_eq_v16qi {}

  const signed int __builtin_bcdadd_gt_v1ti (vsq, vsq, const int<1>);
    BCDADD_GT_V1TI bcdadd_gt_v1ti {}

  const signed int __builtin_bcdadd_gt_v16qi (vsc, vsc, const int<1>);
    BCDADD_GT_V16QI bcdadd_gt_v16qi {}

  const signed int __builtin_bcdadd_lt_v1ti (vsq, vsq, const int<1>);
    BCDADD_LT_V1TI bcdadd_lt_v1ti {}

  const signed int __builtin_bcdadd_lt_v16qi (vsc, vsc, const int<1>);
    BCDADD_LT_V16QI bcdadd_lt_v16qi {}

  const signed int __builtin_bcdadd_ov_v1ti (vsq, vsq, const int<1>);
    BCDADD_OV_V1TI bcdadd_unordered_v1ti {}

  const signed int __builtin_bcdadd_ov_v16qi (vsc, vsc, const int<1>);
    BCDADD_OV_V16QI bcdadd_unordered_v16qi {}

  const signed int __builtin_bcdinvalid_v1ti (vsq);
    BCDINVALID_V1TI bcdinvalid_v1ti {}

  const signed int __builtin_bcdinvalid_v16qi (vsc);
    BCDINVALID_V16QI bcdinvalid_v16qi {}

  const vsq __builtin_bcdsub_v1ti (vsq, vsq, const int<1>);
    BCDSUB_V1TI bcdsub_v1ti {}

  const vsc __builtin_bcdsub_v16qi (vsc, vsc, const int<1>);
    BCDSUB_V16QI bcdsub_v16qi {}

  const signed int __builtin_bcdsub_eq_v1ti (vsq, vsq, const int<1>);
    BCDSUB_EQ_V1TI bcdsub_eq_v1ti {}

  const signed int __builtin_bcdsub_eq_v16qi (vsc, vsc, const int<1>);
    BCDSUB_EQ_V16QI bcdsub_eq_v16qi {}

  const signed int __builtin_bcdsub_ge_v1ti (vsq, vsq, const int<1>);
    BCDSUB_GE_V1TI bcdsub_ge_v1ti {}

  const signed int __builtin_bcdsub_ge_v16qi (vsc, vsc, const int<1>);
    BCDSUB_GE_V16QI bcdsub_ge_v16qi {}

  const signed int __builtin_bcdsub_gt_v1ti (vsq, vsq, const int<1>);
    BCDSUB_GT_V1TI bcdsub_gt_v1ti {}

  const signed int __builtin_bcdsub_gt_v16qi (vsc, vsc, const int<1>);
    BCDSUB_GT_V16QI bcdsub_gt_v16qi {}

  const signed int __builtin_bcdsub_le_v1ti (vsq, vsq, const int<1>);
    BCDSUB_LE_V1TI bcdsub_le_v1ti {}

  const signed int __builtin_bcdsub_le_v16qi (vsc, vsc, const int<1>);
    BCDSUB_LE_V16QI bcdsub_le_v16qi {}

  const signed int __builtin_bcdsub_lt_v1ti (vsq, vsq, const int<1>);
    BCDSUB_LT_V1TI bcdsub_lt_v1ti {}

  const signed int __builtin_bcdsub_lt_v16qi (vsc, vsc, const int<1>);
    BCDSUB_LT_V16QI bcdsub_lt_v16qi {}

  const signed int __builtin_bcdsub_ov_v1ti (vsq, vsq, const int<1>);
    BCDSUB_OV_V1TI bcdsub_unordered_v1ti {}

  const signed int __builtin_bcdsub_ov_v16qi (vsc, vsc, const int<1>);
    BCDSUB_OV_V16QI bcdsub_unordered_v16qi {}

  const vuc __builtin_crypto_vpermxor_v16qi (vuc, vuc, vuc);
    VPERMXOR_V16QI crypto_vpermxor_v16qi {}

  const vull __builtin_crypto_vpermxor_v2di (vull, vull, vull);
    VPERMXOR_V2DI crypto_vpermxor_v2di {}

  const vui __builtin_crypto_vpermxor_v4si (vui, vui, vui);
    VPERMXOR_V4SI crypto_vpermxor_v4si {}

  const vus __builtin_crypto_vpermxor_v8hi (vus, vus, vus);
    VPERMXOR_V8HI crypto_vpermxor_v8hi {}

  const vuc __builtin_crypto_vpmsumb (vuc, vuc);
    VPMSUMB crypto_vpmsumb {}

  const vull __builtin_crypto_vpmsumd (vull, vull);
    VPMSUMD crypto_vpmsumd {}

  const vus __builtin_crypto_vpmsumh (vus, vus);
    VPMSUMH crypto_vpmsumh {}

  const vui __builtin_crypto_vpmsumw (vui, vui);
    VPMSUMW crypto_vpmsumw {}

  const vf __builtin_vsx_float2_v2df (vd, vd);
    FLOAT2_V2DF float2_v2df {}

  const vf __builtin_vsx_float2_v2di (vsll, vsll);
    FLOAT2_V2DI float2_v2di {}

  const vsc __builtin_vsx_revb_v16qi (vsc);
    REVB_V16QI revb_v16qi {}

  const vsq __builtin_vsx_revb_v1ti (vsq);
    REVB_V1TI revb_v1ti {}

  const vd __builtin_vsx_revb_v2df (vd);
    REVB_V2DF revb_v2df {}

  const vsll __builtin_vsx_revb_v2di (vsll);
    REVB_V2DI revb_v2di {}

  const vf __builtin_vsx_revb_v4sf (vf);
    REVB_V4SF revb_v4sf {}

  const vsi __builtin_vsx_revb_v4si (vsi);
    REVB_V4SI revb_v4si {}

  const vss __builtin_vsx_revb_v8hi (vss);
    REVB_V8HI revb_v8hi {}

  const vf __builtin_vsx_uns_float2_v2di (vsll, vsll);
    UNS_FLOAT2_V2DI uns_float2_v2di {}

  const vsi __builtin_vsx_vsigned2_v2df (vd, vd);
    VEC_VSIGNED2_V2DF vsigned2_v2df {}

  const vsi __builtin_vsx_vunsigned2_v2df (vd, vd);
    VEC_VUNSIGNED2_V2DF vunsigned2_v2df {}

  const vf __builtin_vsx_xscvdpspn (double);
    XSCVDPSPN vsx_xscvdpspn {}

  const double __builtin_vsx_xscvspdpn (vf);
    XSCVSPDPN vsx_xscvspdpn {}
